<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leezp&#39;s Blog</title>
  <subtitle>Mr.Lee</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.leezp.space/blog/"/>
  <updated>2017-05-03T01:22:58.637Z</updated>
  <id>http://www.leezp.space/blog/</id>
  
  <author>
    <name>Leezp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqlserver常用SQL语句整理</title>
    <link href="http://www.leezp.space/blog/2017/04/20/sqlserver%E5%B8%B8%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E6%95%B4%E7%90%86/"/>
    <id>http://www.leezp.space/blog/2017/04/20/sqlserver常用SQL语句整理/</id>
    <published>2017-04-20T12:08:07.000Z</published>
    <updated>2017-05-03T01:22:58.637Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>15年10月份，大概一年半以前的某个工作日凌晨2点钟开始整理的sql语句。</p>
<a id="more"></a>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE 数据库名</div><div class="line">ON PRIMARY     --默认就属于PRIMARY主文件组，可省略</div><div class="line">(</div><div class="line"> NAME=<span class="string">'  '</span>,  --主数据文件的逻辑名</div><div class="line"> FILENAME=<span class="string">'D:\project\stuDB_data.mdf'</span>,  --主数据文件的物理名</div><div class="line"> SIZE=5mb,  --主数据文件初始大小</div><div class="line"> MAXSIZE=100mb,  --主数据文件增长的最大值</div><div class="line"> FILEGROWTH=15%   --主数据文件的增长率</div><div class="line">)</div><div class="line">LOG ON</div><div class="line">(</div><div class="line">  NAME=<span class="string">'  '</span>,</div><div class="line">  FILENAME=<span class="string">'D:\project\stuDB_log.ldf'</span>,</div><div class="line">  SIZE=2mb,</div><div class="line">  FILEGROWTH=1MB</div><div class="line">)</div><div class="line">GO</div></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE 数据库名 </div><div class="line">USE master  --设置当前数据库为master，以便访问sysdatabases表</div><div class="line">GO</div><div class="line">IF  EXISTS（SELECT * FROM  sysdatabases WHERE  name =<span class="string">'stuDB'</span>）</div><div class="line">   DROP DATABASE stuDB</div></pre></td></tr></table></figure>
<h2 id="SqlServer的主要数据类型"><a href="#SqlServer的主要数据类型" class="headerlink" title="SqlServer的主要数据类型"></a>SqlServer的主要数据类型</h2><p>Image:可用来存储图像<br>Char:固定长度的非Unicode字符数据<br>Varchar:可变长度非 Unicode 数据<br>Nchar: 固定长度的Unicode 数据<br>Nvarchar:可变长度的Unicode 数据<br>DataTime：日期和时间<br>int,smallint:整数<br>Money:货币数据类型<br>Bit:布尔</p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  表名</div><div class="line"> (</div><div class="line">    字段1 数据类型 列的特征，</div><div class="line">    字段2 数据类型 列的特征，</div><div class="line">     ...</div><div class="line">)</div><div class="line"></div><div class="line">USE stuDB   -数据库名 </div><div class="line">GO</div><div class="line">CREATE  TABLE  stuInfo    /*-创建学员信息表-*/</div><div class="line">(</div><div class="line"> stuName  VARCHAR(20)  NOT  NULL ,  --姓名，非空（必填）</div><div class="line"> stuNo   CHAR(6)  NOT  NULL,   --学号，非空（必填）</div><div class="line"> stuAge  INT  NOT  NULL,  --年龄，INT类型默认为4个字节</div><div class="line"> stuID  NUMERIC(18,0),     --身份证号</div><div class="line"> stuSeat   SMALLINT  IDENTITY (1,1),   --座位号，自动编号</div><div class="line"> stuAddress   TEXT   --住址，允许为空，即可选输入</div><div class="line">) </div><div class="line">GO</div></pre></td></tr></table></figure>
<p>创建表：保证数据的完整性 = 实施完整性约束</p>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DROP TABLE 表名</div><div class="line">USE stuDB   --将当前数据库设置为stuDB ，以便在stuDB数据库中建表</div><div class="line">GO</div><div class="line">IF EXISTS（SELECT * FROM  sysobjects  WHERE  name=’stuInfo’ ）</div><div class="line">    DROP  TABLE  stuInfo</div><div class="line">CREATE  TABLE  stuInfo   /*-创建学员信息表-*/</div><div class="line">(</div><div class="line">…..</div><div class="line">) </div><div class="line">GO</div></pre></td></tr></table></figure>
<h2 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名  </div><div class="line">     ADD CONSTRAINT 约束名  约束类型  具体的约束说明</div><div class="line">--	主键（Primary Key）约束：如 PK_stuNo</div><div class="line">--	唯一（Unique Key）约束：如 UQ_stuID(允许为空,不能重复)</div><div class="line">--	默认（Default Key）约束：如 DF_stuAddress(当插入记录时该字段没有赋值，会使用默认值)</div><div class="line">--	检查（Check Key）约束：如 CK_stuAge(列字段的内容必须符合要求,通常是一个取值范围)</div><div class="line">--	外键(Foreign Key)约束：如 FK_stuNo </div><div class="line">ALTER TABLE stuInfo </div><div class="line">     ADD CONSTRAINT PK_stuNo PRIMARY KEY (stuNo)</div><div class="line">ALTER TABLE stuInfo </div><div class="line">    ADD CONSTRAINT UQ_stuID UNIQUE (stuID)</div><div class="line">ALTER TABLE stuInfo </div><div class="line">    ADD CONSTRAINT DF_stuAddress </div><div class="line">          DEFAULT (<span class="string">'地址不详'</span>) FOR stuAddress</div><div class="line">ALTER TABLE stuInfo </div><div class="line">    ADD CONSTRAINT CK_stuAge </div><div class="line">        CHECK(stuAge BETWEEN 15 AND 40)</div><div class="line">ALTER TABLE stuMarks</div><div class="line">   ADD CONSTRAINT FK_stuNo          </div><div class="line">       FOREIGN KEY(stuNo) REFERENCES stuInfo(stuNo)</div><div class="line">GO</div></pre></td></tr></table></figure>
<h2 id="主外键关系"><a href="#主外键关系" class="headerlink" title="主外键关系"></a>主外键关系</h2><ol>
<li>当主表中没有对应的记录时，不能将记录添加到子表<br>成绩表中不能出现在学员信息表中不存在的学号；</li>
<li>不能更改主表中的值而导致子表中的记录孤立<br>把学员信息表中的学号改变了，学员成绩表中的学号也应当随之改变；</li>
<li>子表存在与主表对应的记录，不能从主表中删除该行<br>不能把有成绩的学员删除了</li>
<li>删除主表前，先删子表<br>先删学员成绩表、后删除学员信息表</li>
</ol>
<h2 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名  </div><div class="line">      DROP CONSTRAINT 约束名</div></pre></td></tr></table></figure>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>= &gt; &lt; &gt;= &lt;= &lt;&gt;不等于 !</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">‘&#95;’</td>
<td style="text-align:left">一个字符</td>
<td style="text-align:left">A Like ‘C&#95;’</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">任意长度的字符串</td>
<td style="text-align:left">B Like ‘CO&#95;%’</td>
</tr>
<tr>
<td style="text-align:left">[ ]</td>
<td style="text-align:left">括号中所指定范围内的一个字符</td>
<td style="text-align:left">C Like ‘9W0[1-2]’</td>
</tr>
<tr>
<td style="text-align:left">[^]</td>
<td style="text-align:left">不在括号中所指定范围内的一个字符</td>
<td style="text-align:left">D Like ‘%[A-D][^1-2]’</td>
</tr>
</tbody>
</table>
<h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AND</td>
<td style="text-align:left">逻辑与</td>
<td style="text-align:left">1 AND 1 = 1; 1 AND 0 = 0; 0 AND 0 = 0;</td>
</tr>
<tr>
<td style="text-align:left">OR</td>
<td style="text-align:left">逻辑或</td>
<td style="text-align:left">1 OR 1 = 1; 1OR 0 = 1; 0 OR 0 = 0;</td>
</tr>
<tr>
<td style="text-align:left">NOT</td>
<td style="text-align:left">逻辑非</td>
<td style="text-align:left">NOT 1 = 0; NOT 0 = 1;</td>
</tr>
</tbody>
</table>
<h2 id="插入数据行"><a href="#插入数据行" class="headerlink" title="插入数据行"></a>插入数据行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InSert  [INTO] &lt;表名&gt;  [列名] Values &lt;值列表&gt;</div><div class="line">INSERT INTO 	Table_1 (id,loginId,LoginPwd) </div><div class="line">values (3,4,5)</div></pre></td></tr></table></figure>
<h3 id="插入多行数据-一个表中数据引入另一个表-建临时表"><a href="#插入多行数据-一个表中数据引入另一个表-建临时表" class="headerlink" title="插入多行数据(一个表中数据引入另一个表/建临时表)"></a>插入多行数据(一个表中数据引入另一个表/建临时表)</h3><p>应用：复制学员表Student为Table_1，包含表结构和全部的数据<br>语法：<br>Insert Into &lt;表名&gt;(列名)<br>Select &lt;列名&gt;<br>From &lt;源表名&gt;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">INSERT INTO Table_1(id, loginId, LoginPwd) </div><div class="line">SELECT Id,Name,Number</div><div class="line">FROM Student</div><div class="line"></div><div class="line">INSERT INTO tb_TB(id, number, 数学成绩) </div><div class="line">SELECT A.id,A.学号,A.数学成绩 </div><div class="line">FROM (SELECT  id,number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math between 60 and 100</div><div class="line">ORDER BY tb_Score.number           ------</div><div class="line">) A</div></pre></td></tr></table></figure>
<font color="red">除非另外还指定了TOP 或FOR XML，否则，ORDER BY 子句在视图、内联函数、派生表、子查询和公用表表达式中无效。</font>

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">INSERT INTO tb_TB(id, number, 数学成绩) </div><div class="line">SELECT A.id,A.学号,A.数学成绩 </div><div class="line">FROM (SELECT  id,number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math between 60 and 100</div><div class="line">--ORDER BY tb_Score.number</div><div class="line">) A</div></pre></td></tr></table></figure>
<p>//(9 行受影响)  </p>
<p><font color="blue">一般常用的创建临时表的方法是:</font><br>Select &lt;列名&gt;<br>Into &lt;表名&gt;(列名)<br>From &lt;源表名&gt;      –若不存在自己创建，若存在提示已存在</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select  A.id,A.学号,A.数学成绩 </div><div class="line">into tb_TB</div><div class="line">from(SELECT  id,number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math between 60 and 100</div><div class="line">--ORDER BY tb_Score.number</div><div class="line">) A</div></pre></td></tr></table></figure>
<p>//消息 2714，级别 16，状态 6，第 1 行 数据库中已存在名为 ‘tb_TB’ 的对象。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">select  A.id,A.学号,A.数学成绩 </div><div class="line">into tb_TC</div><div class="line">from(SELECT  id,number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math between 60 and 100</div><div class="line">--ORDER BY tb_Score.number</div><div class="line">) A</div><div class="line"></div><div class="line">select * from tb_TC</div><div class="line">--新表中自动创建的id，number,Math与源表中数量，类型一致</div></pre></td></tr></table></figure>
<p><strong>Q：在数据库表中，数据行位置并不重要，但是一个单位中要根据奇数行和偶数行的数据来汇总，在这个汇总的基础上再得到一个数值，因此，要查询数据库表的奇数行和偶数行的总数。</strong><br><strong>A：新建一个临时表，从原表中任选一列数据存入临时表，根据新的标识列，进行奇偶判断。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT 	</div><div class="line">IDENTITY(int,1,1) AS ID </div><div class="line">INTO TEMPTABL</div><div class="line">FROM tb_TC</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from TEMPTABL</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT count(ID) AS 奇数列汇总 </div><div class="line">FROM TEMPTABL</div><div class="line">WHERE ID%2 &lt;&gt; 0</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT count(ID) AS 偶数列汇总 </div><div class="line">FROM TEMPTABL </div><div class="line">WHERE ID%2 = 0</div></pre></td></tr></table></figure>
<h2 id="更新数据行"><a href="#更新数据行" class="headerlink" title="更新数据行"></a>更新数据行</h2><p>语法：<br>Update &lt;表名&gt; Set &lt;列名 = 更新值&gt;<br>[Where &lt;更新条件&gt;]</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE Students SET SSEX = 0</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UPDATE Scores</div><div class="line">SET Scores = Scores + 5</div><div class="line">WHERE Scores &lt;= 95</div></pre></td></tr></table></figure>
<h2 id="删除数据行"><a href="#删除数据行" class="headerlink" title="删除数据行"></a>删除数据行</h2><p>语法：Delete From &lt;表名&gt; [Where &lt;删除条件&gt;]</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DELETE FROM Table_3</div><div class="line"><span class="built_in">where</span> s = <span class="string">'6'</span></div></pre></td></tr></table></figure>
<h2 id="删除表-1"><a href="#删除表-1" class="headerlink" title="删除表"></a>删除表</h2><p>语法：Truncate Table &lt;表名&gt;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TRUNCATE TABLE Table_3</div><div class="line"></div><div class="line">DELETE FROM Table_3    --与上面的语句等价</div></pre></td></tr></table></figure>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>语法:<br>SELECT    &lt;列名&gt;<br>FROM      &lt;表名&gt;<br>[WHERE    &lt;查询条件表达式&gt;]<br>[ORDER BY &lt;排序的列名&gt;[ASC或DESC]]</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT id,Name,Number </div><div class="line">FROM Student </div><div class="line">WHERE SEX = 0 </div><div class="line">ORDER BY ClassNo</div></pre></td></tr></table></figure>
<p>查询全部的行和列:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM Students</div></pre></td></tr></table></figure>
<p>查询部分行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT SCode,SName,SAddress FROM Students</div><div class="line">WHERE SAddress = <span class="string">'河南新乡'</span></div><div class="line"></div><div class="line">SELECT SCode,SName,SAddress FROM Students</div><div class="line">WHERE SAddress &lt;&gt; <span class="string">'河南新乡'</span></div></pre></td></tr></table></figure>
<p>使用AS来命名列:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SELECT SCode AS 学员编号,SName AS学员姓名,SAddress AS 学员地址  </div><div class="line">FROM Students</div><div class="line">WHERE SAddress &lt;&gt; <span class="string">'河南新乡'</span></div><div class="line"></div><div class="line">SELECT Name + <span class="string">'.'</span> + Number AS <span class="string">'姓名'</span> </div><div class="line">FROM Student</div><div class="line"></div><div class="line">SELECT Name  AS <span class="string">'男'</span> </div><div class="line">FROM Student</div><div class="line"><span class="built_in">where</span> Sex=1</div></pre></td></tr></table></figure>
<p>使用=来命名列:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT <span class="string">'A'</span> = Name+<span class="string">'.'</span>+Number </div><div class="line">FROM Student</div></pre></td></tr></table></figure>
<p>查询空行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT Name FROM Student WHERE Sex IS NULL</div></pre></td></tr></table></figure>
<p>使用常量列(‘’AS列名,列名下元素赋值’’):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT 姓名=Name,学号= Number,<span class="string">'.Net班'</span> AS 班级</div><div class="line">FROM Student</div><div class="line"></div><div class="line">--查询Name命名为ok</div><div class="line">SELECT Name AS ok,学号= Number,<span class="string">'.Net班'</span> AS 班级</div><div class="line">FROM Student</div></pre></td></tr></table></figure>
<p>限制固定行数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT TOP 5 Name, Number</div><div class="line">FROM Student WHERE Sex = 0</div></pre></td></tr></table></figure>
<p>返回百分之多少行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT TOP 40 PERCENT Name, Address</div><div class="line">FROM Student WHERE Sex = 0</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT TOP 1 PERCENT Name, Address</div><div class="line">FROM Student WHERE Sex = 0</div><div class="line">--若存在至少返回一行</div></pre></td></tr></table></figure>
<p>升序排列:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT id As 学员编号,(Math*0.9+5) As 综合成绩</div><div class="line">FROM Tb_Score</div><div class="line">WHERE (Math*0.9+5)&gt;60</div><div class="line">ORDER BY number</div></pre></td></tr></table></figure>
<p>//消息8115，级别16，状态8，第1 行 将varchar 转换为数据类型numeric 时出现算术溢出错误。</p>
<p>降序排列:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">…</div><div class="line">ORDER BY number DESC</div></pre></td></tr></table></figure>
<p>按多列排序:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT  number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math&gt;60</div><div class="line">ORDER BY tb_Score.number</div><div class="line">--tb_Score可省略</div></pre></td></tr></table></figure>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>LIKE:<br>Q:以下的SQL语句：<br>SELECT * FROM 数据表<br>WHERE 编号 LIKE ‘00[^8]%[A,C]%’<br>可能会查询出的编号值为(B)。<br>A、9890ACD<br>B、007_AFF<br>C、008&amp;DCG<br>D、KK8C</p>
<p>IS NULL(把某一字段中内容为空的记录查询出来):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT ID, Name FROM Student WHERE Phone Is null</div></pre></td></tr></table></figure>
<p>BETWEEN:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT  number As 学号,Math As 数学成绩</div><div class="line">FROM tb_Score</div><div class="line">WHERE Math between 60 and 100</div><div class="line">ORDER BY tb_Score.number</div></pre></td></tr></table></figure>
<p>IN(把某一字段中内容与所列出的查询内容列表匹配的记录查询出来):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT ID, Number FROM tb_address WHERE address </div><div class="line">IN (<span class="string">'北京'</span>,<span class="string">'沈阳'</span>,<span class="string">'南京'</span>)</div></pre></td></tr></table></figure>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>SUM:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT SUM(Math) FROM Tb_Score WHERE English = <span class="string">'95'</span></div></pre></td></tr></table></figure>
<p>AVG:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT AVG(Math) AS 平均成绩 </div><div class="line">From Tb_Score WHERE Math &gt;=60</div></pre></td></tr></table></figure>
<p>MAX、MIN:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT AVG(Math) AS 平均成绩, MAX (Math) AS 最高分, </div><div class="line">MIN (Math) AS 最低分 From tb_Score WHERE Math &gt;=60</div></pre></td></tr></table></figure>
<p>COUNT/COUNT(*):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT (*)  AS 及格人数 From tb_Score </div><div class="line">WHERE Math&gt;=60</div></pre></td></tr></table></figure>
<h2 id="分组汇总"><a href="#分组汇总" class="headerlink" title="分组汇总"></a>分组汇总</h2><p>GROUP BY:<br>指定 GROUP BY 时，如果 SELECT 子句中包含聚合函数, 则计算每组的汇总值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT math,AVG(Math) as 平均成绩</div><div class="line">FROM tb_Score</div><div class="line">GROUP BY math</div></pre></td></tr></table></figure>
<p>选择列表中任一非聚合表达式内的所有列都应包含在 GROUP BY 列表中，或者 GROUP。<br>BY 表达式必须与选择列表表达式完全匹配。否则列无法对应。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT number,math</div><div class="line">FROM tb_Score</div><div class="line">GROUP BY number,math</div></pre></td></tr></table></figure>
<p>多列分组:<br>用于两个或多个元素在两个或多个列值相同的情况。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT Number AS 学员编号,courseId AS 内部测试, </div><div class="line">AVG(Score) AS 内部测试平均成绩 ge</div><div class="line">FROM studentScores</div><div class="line">GROUP BY Number,courseId</div><div class="line">--转化为平均成绩</div></pre></td></tr></table></figure>
<p><font color="red">HAVING</font>:<br>输出两个或多个元素在两个或多个列值相同,例如成绩出现多次的分组的平均成绩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT Number AS 学员编号, courseId AS 内部测试, </div><div class="line">AVG(Score) AS 内部测试平均成绩</div><div class="line">FROM studentScores</div><div class="line">GROUP BY Number,courseId</div><div class="line">HAVING COUNT(Score)&gt;1</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select * from	</div><div class="line">(SELECT Number AS 学员编号, courseId AS 内部测试,</div><div class="line">AVG(Score) AS 内部测试平均成绩 </div><div class="line">FROM studentScores</div><div class="line">GROUP BY Number,courseId					</div><div class="line">HAVING COUNT(Score)&gt;1) A</div><div class="line"><span class="built_in">where</span> 学员编号=12</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((select count (*) a from </div><div class="line">(SELECT distinct Number from studentScores) A )</div><div class="line">&lt;&gt;(select count (Number) b </div><div class="line">from studentScores ))</div><div class="line">begin</div><div class="line"><span class="built_in">print</span> <span class="string">'有重复'</span></div><div class="line">end</div><div class="line"><span class="keyword">else</span></div><div class="line">begin</div><div class="line"><span class="built_in">print</span> <span class="string">'无重复'</span></div><div class="line">end</div></pre></td></tr></table></figure>
<p>对比:<br>WHERE子句从数据源中去掉不符合其搜索条件的数据。<br>GROUP BY子句搜集数据行到各个组中，统计函数为各个组计算统计值。<br>HAVING子句去掉不符合其组搜索条件的各组数据行。</p>
<h2 id="多表联结查询"><a href="#多表联结查询" class="headerlink" title="多表联结查询"></a>多表联结查询</h2><p>分类：<br>1.内联结(INNER JOIN)<br>2.外联结<br>①.左外联结(LEFT JOIN)<br>②.右外联结(RIGHT JOIN)<br>③.完整外联结(FULL JOIN)<br>3.交叉联结(CROSS JOIN)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT S.SName,C.CourseID,C.Score </div><div class="line">From Score AS C</div><div class="line">INNER JOIN Students AS S</div><div class="line">ON C.StudentID = S.SCode</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT S.SName,C.CourseID,C.Score </div><div class="line">From Students AS S</div><div class="line">INNER JOIN Score AS C</div><div class="line">ON C.StudentID = S.SCode</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT Students.SName, Score.CourseID, Score.Score</div><div class="line">FROM Students,Score --FROM 表A表B</div><div class="line">WHERE Students.SCode = Score.StudentID</div></pre></td></tr></table></figure>
<p>//上面三个结果相同</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT S.SName,C.CourseID,C.Score </div><div class="line">From Students AS S</div><div class="line">INNER JOIN Score AS C</div><div class="line">ON C.StudentID &lt;&gt; S.SCode</div></pre></td></tr></table></figure>
<p>三表联结:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT </div><div class="line">--表A,B,C内要显示的列</div><div class="line">S.SName AS 姓名,C.Score AS 成绩   --,CS.CourseName AS 课程</div><div class="line">FROM Students AS S </div><div class="line">INNER JOIN Score AS C ON (S.SCode = C.StudentID)</div><div class="line">INNER JOIN Course AS CS ON (CS.CourseID = C.CourseID)</div></pre></td></tr></table></figure>
<p>左外联结(LEFT JOIN /LEFT OUTER JOIN):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT S.SName --,C.CourseID,C.Score </div><div class="line">From Students AS S</div><div class="line">LEFT JOIN Score AS C</div><div class="line">ON C.StudentID = S.SCode</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT C.CourseID,C.Score --,S.SName</div><div class="line">From Score AS C</div><div class="line">LEFT JOIN Students AS S</div><div class="line">ON C.StudentID = S.SCode</div></pre></td></tr></table></figure>
<p>//上面两个结果相同</p>
<h2 id="T-SQL"><a href="#T-SQL" class="headerlink" title="T-SQL"></a>T-SQL</h2><p>局部变量：<br>局部变量必须以标记@作为前缀，如@age。<br>局部变量的使用也是先声明，再赋值。<br>全局变量：<br>全局变量必须以标记@@作为前缀，如@@version。<br>全局变量由系统定义和维护，我们只能读取，不能修改全局变量的值。<br>声明局部变量：DECLARE @变量名 数据类型</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DECLARE @name varchar(8)</div><div class="line"></div><div class="line">DECLARE @seat int</div></pre></td></tr></table></figure>
<p>赋值:<br>SET @变量名 = 值<br>或 SELECT @变量名 = 值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SET @name=<span class="string">'张三'</span>     --必须确保筛选出的记录只有1条</div><div class="line"></div><div class="line">SELECT @name=stuName FROM stuInfo </div><div class="line">WHERE stuNo=<span class="string">'s25302'</span></div></pre></td></tr></table></figure>
<p><strong>Eg：编写T-SQL查找李文才的左右同桌。</strong><br>/<em>–查找李文才的信息–</em>/</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DECLARE @name varchar(8)  --学员姓名</div><div class="line">SET @name=<span class="string">'李文才'</span>        --使用SET赋值</div><div class="line">SELECT * FROM stuInfo WHERE stuName = @name</div><div class="line">/*--查找李文才的左右同桌--*/</div><div class="line">DECLARE @seat int  --座位号</div><div class="line">SELECT @seat=stuSeat FROM stuInfo  --使用SELECT赋值</div><div class="line">   WHERE stuName=@name</div><div class="line">SELECT * FROM stuInfo </div><div class="line">   WHERE (stuSeat = @seat+1) OR (stuSeat = @seat-1)</div><div class="line">GO</div></pre></td></tr></table></figure>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INSERT INTO stuInfo(stuName,stuNo,stuSex,stuAge)   </div><div class="line">VALUES(<span class="string">'武松'</span>,<span class="string">'s25328'</span>,<span class="string">'男'</span>,<span class="string">'23'</span>)</div><div class="line">--如果大于0表示上一条语句执行有错误</div><div class="line"><span class="built_in">print</span> <span class="string">'当前错误号'</span>+convert(varchar(5),@@ERROR)</div><div class="line"><span class="built_in">print</span> <span class="string">'刚才报名的学员，座位号为:'</span>+convert(varchar(5),@@IDENTITY ) </div><div class="line">  Go</div></pre></td></tr></table></figure>
<h3 id="IF-ELSE语句"><a href="#IF-ELSE语句" class="headerlink" title="IF-ELSE语句"></a>IF-ELSE语句</h3><p>ELSE是可选部分,如果有多条语句,才需要BEGIN-END语句块。<br>SQL中的IF-ELSE语句：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">IF (条件)</div><div class="line"> BEGIN</div><div class="line">    语句1</div><div class="line">    语句2</div><div class="line">    …</div><div class="line"> END</div><div class="line">ELSE</div><div class="line"> BEGIN</div><div class="line">    语句;</div><div class="line">    语句;</div><div class="line">    …</div><div class="line"> END</div></pre></td></tr></table></figure>
<h3 id="WHILE循环语句"><a href="#WHILE循环语句" class="headerlink" title="WHILE循环语句"></a>WHILE循环语句</h3><p>BREAK表示退出循环,如果有多条语句才需要BEGIN-END语句块。<br>SQL中的WHILE语句：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WHILE 条件）</div><div class="line"> BEGIN</div><div class="line">    语句1</div><div class="line">    语句2</div><div class="line">    ……</div><div class="line">    BREAK</div><div class="line"> END</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">DECLARE @n int</div><div class="line">WHILE(1=1) --条件永远成立</div><div class="line">  BEGIN</div><div class="line">    SELECT @n=COUNT(*) FROM stuMarks </div><div class="line">            WHERE writtenExam&lt;60    --统计不及格人数</div><div class="line">    IF (@n&gt;0)</div><div class="line">       UPDATE stuMarks     --每人加分</div><div class="line">            SET writtenExam=writtenExam+2 </div><div class="line">    ELSE</div><div class="line">       BREAK    --退出循环</div><div class="line">  END</div><div class="line"><span class="built_in">print</span> <span class="string">'加分后的成绩如下：'</span></div><div class="line">SELECT * FROM stuMarks</div></pre></td></tr></table></figure>
<h3 id="CASE-END多分支语句"><a href="#CASE-END多分支语句" class="headerlink" title="CASE-END多分支语句"></a>CASE-END多分支语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CASE </div><div class="line">  WHEN 条件1 THEN  结果1</div><div class="line">  WHEN 条件2 THEN  结果2</div><div class="line">  ……</div><div class="line">  ELSE 其他结果</div><div class="line">END</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>  <span class="string">'ABCDE五级显示成绩如下：'</span></div><div class="line">SELECT stuNo,</div><div class="line">成绩=CASE  </div><div class="line">      WHEN writtenExam&lt;60 THEN <span class="string">'E'</span></div><div class="line">      WHEN writtenExam BETWEEN 60 AND 69 THEN <span class="string">'D'</span></div><div class="line">      WHEN writtenExam BETWEEN 70 AND 79 THEN <span class="string">'C'</span></div><div class="line">      WHEN writtenExam BETWEEN 80 AND 89 THEN <span class="string">'B'</span></div><div class="line">      ElSE <span class="string">'A'</span></div><div class="line">     END</div><div class="line">FROM stuMarks</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">USE stuDB</div><div class="line">GO</div><div class="line">SELECT 考号=ExamNo,学号=stuNo,笔试=writtenExam,机试=labExam,</div><div class="line">  平均分=(writtenExam+labExam)/2,</div><div class="line">  等级=CASE  </div><div class="line">       WHEN (writtenExam+labExam)/2&lt;60 THEN <span class="string">'不及格'</span></div><div class="line">       WHEN (writtenExam+labExam)/2 BETWEEN 60 AND 69 THEN <span class="string">'差'</span></div><div class="line">       WHEN (writtenExam+labExam)/2 BETWEEN 70 AND 79 THEN <span class="string">'中'</span></div><div class="line">       WHEN (writtenExam+labExam)/2 BETWEEN 80 AND 89 THEN <span class="string">'良'</span></div><div class="line">       ElSE <span class="string">'优'</span></div><div class="line">      END</div><div class="line">FROM stuMarks</div></pre></td></tr></table></figure>
<p>批处理语句：SQLServer规定：如果是建库、建表语句、以及我们后面学习的存储过程和视图等，则必须在语句末尾添加 GO 批处理标志。</p>
<p><strong>Eg:对机试成绩进行反复加分，直到平均分超过分为止。请编写T-SQL语句实现。</strong><br>90分以上：   不加分<br>80－89分：   加分<br>70－79分：   加分<br>60－69分：   加分<br>60分以下：   加分</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM stuMarks  --原始成绩</div><div class="line">DECLARE @labAvg INT</div><div class="line">WHILE(1=1)</div><div class="line"> BEGIN</div><div class="line">    UPDATE stuMarks </div><div class="line">      SET labExam=</div><div class="line">        CASE</div><div class="line">            WHEN labExam&lt;60 THEN labExam+5</div><div class="line">            WHEN labExam between 60 AND 69 THEN labExam+3</div><div class="line">            WHEN labExam between 70 AND 79 THEN labExam+2 </div><div class="line">            WHEN labExam between 80 AND 89 THEN labExam+1</div><div class="line">            ELSE labExam</div><div class="line">        END</div><div class="line">     SELECT @labAvg=AVG(labExam) FROM stuMarks</div><div class="line">     IF @labAvg&gt;=85</div><div class="line">        BREAK</div><div class="line"> END</div><div class="line">SELECT * FROM stuMarks  --加分后的成绩</div></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>假定张三的账户直接转账1000元到李四的账户。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE bank</div><div class="line">(</div><div class="line">    customerName CHAR(10),  --顾客姓名</div><div class="line">    currentMoney MONEY     --当前余额</div><div class="line">)</div><div class="line">GO</div><div class="line"></div><div class="line">ALTER TABLE bank</div><div class="line">   ADD CONSTRAINT CK_currentMoney</div><div class="line">--添加约束：根据银行规定，账户余额不能少于1元，否则视为销户 </div><div class="line">       CHECK(currentMoney&gt;=1)</div><div class="line">GO</div><div class="line"></div><div class="line">INSERT INTO bank(customerName,currentMoney)</div><div class="line">        VALUES(<span class="string">'张三'</span>,1000)</div><div class="line">INSERT INTO bank(customerName,currentMoney)</div><div class="line">        VALUES(<span class="string">'李四'</span>,1)</div></pre></td></tr></table></figure>
<p>haha，后面整理的资料丢失了，只到这了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;15年10月份，大概一年半以前的某个工作日凌晨2点钟开始整理的sql语句。&lt;/p&gt;
    
    </summary>
    
      <category term="sql语句" scheme="http://www.leezp.space/blog/categories/sql%E8%AF%AD%E5%8F%A5/"/>
    
    
      <category term="sql语句" scheme="http://www.leezp.space/blog/tags/sql%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="sqlserver" scheme="http://www.leezp.space/blog/tags/sqlserver/"/>
    
  </entry>
  
  <entry>
    <title>半年工作总结</title>
    <link href="http://www.leezp.space/blog/2017/04/01/%E5%8D%8A%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://www.leezp.space/blog/2017/04/01/半年工作总结/</id>
    <published>2017-04-01T05:04:02.000Z</published>
    <updated>2017-04-06T05:53:48.478Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>时间过得真快，在这家公司已经工作半年多了。是时候做个小结了。</p>
<a id="more"></a>
<p>有时候，不去比较真的不知道自己有多差劲。在一个安逸的环境里，的确会消磨人的一些东西。</p>
<p>生于忧患，死于安乐。</p>
<p>来公司第一天，让选个位子，然后搬一台新电脑到自己位子拆封，组装机子，装一些必要软件，像python环境，RegexBuddy，wireshark，编码-解码器，Xshell，Xftp，Markdown，phpStudy，虚拟机等，在虚拟机里装了pycharm，myeclipse，mysql，chrome…后面就是看Http，正则，git，python…相关的资料学习，再后来开始接手第一个任务，中国菜刀(Chopper)的协议及数据包分析。然后开始在虚拟机搭建回放环境，搭建好了之后熟悉回放环境，熟悉了之后学习wireshark抓包相关知识，要在服务端进行抓包，抓完了数据包根据回放环境的正则进行匹配，回放成我们的框架程序可以接受的模式，将回放的文件放在框架里，写解码程序，处理这些话单。大概就是 调研，写文档-&gt;复现-&gt;抓包-&gt;回放-&gt;写程序-&gt;单元测试 几个步骤。其中复现步骤要求会搭建各种漏洞需要的运行环境，抓包步骤要求你会写一些高级高效的正则去匹配要提取的信息。回放就是利用公司自己搭建的环境将数据包翻译成框架可以理解的格式。写程序嘛就是程序员都会干的事。另外，公司比较注重安全性，拷贝东西不可以用U盘，我们用的介质是可擦写光盘。</p>
<p>日子就这样一天天的过去。学习了很多，但好像有更多的东西不会做。</p>
<p>一些java面试题：</p>
<p>Q：写一个简单的方式实现去字符串内部的空格，两个或两个以上的只保留一个。例如”S t  r in g”转换成 “S t r in g”。<br>A：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str2 = str.replaceAll(<span class="string">"\\s&#123;2,&#125;"</span>, <span class="string">" "</span>);</div></pre></td></tr></table></figure>
<p>Q：ArrayList可变长度如何实现的？<br>A：看ArrayList源码知，ArrayList首先在内存中定义一个长度为10的数组，如果实际要用的长度大于10，就把数组的长度 *1.5+1，给一个新长度，不够用再增加。</p>
<p>Q：ArrayList和LinkedList区别，HashMap和HashTable区别<br>A：ArrayList和LinkedList区别：<br>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>2.对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。<br>3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 </p>
<p>参考资料<a href="http://pengcqu.iteye.com/blog/502676" target="_blank" rel="external">Java中ArrayList和LinkedList区别</a></p>
<p>HashMap和HashTable区别：<br>由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。<br>Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java 5或以上的话，请使用ConcurrentHashMap吧。</p>
<p>参考资料<a href="http://www.importnew.com/7010.html" target="_blank" rel="external">HashMap和Hashtable的区别</a><br><a href="http://www.cnblogs.com/langtianya/archive/2013/03/19/2970273.html" target="_blank" rel="external">HashMap和Hashtable的区别</a></p>
<p>Q：IOC和DI的区别<br>A：<br>IOC控制反转：说的是创建对象实例的控制权从代码控制剥离到IOC容器控制，实际就是你在xml文件控制，侧重于原理。<br>DI依赖注入：说的是创建对象实例时，为这个对象注入属性值或其它对象实例，侧重于实现。</p>
<p>它们是spring核心思想的不同方面的描述。</p>
<p>Q：Spring如何实现IOC，Spring的好处<br>A：<br>1.解析配置文件，获得对象信息<br>2.合理的创建它们</p>
<p>使用Spring降低耦合度。</p>
<p>Q：Struts2和SpringMVC有什么区别，SpringMVC相比Struts2有哪些优势<br>A：<br>1.入口：springmvc的入口是servlet，而struts2是filter<br>2.性能：spring会稍微比struts快。spring mvc是基于方法的设计，而sturts是基于类，每次发一次请求都会实例一个action，每个action都会被注入属性，struts2实际上是通过setter getter方法与request打交道的 ，而 springmvc 不用 setter getter 方法。<br>struts2中，一个Action对象对应一个request上下文。<br>3.实现restful:<br>springmvc是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上 springmvc就容易实现restful url 。<br>struts2 是类级别的拦截，一个类对应一个 request 上下文，因为 struts2 action 的一个方法可以对应一个 url，而其类属性却被所有方法共享。<br>4.数据共享：<br>struts是在接受参数的时候，可以用属性来接受参数，这就说明参数是让多个方法共享的。<br>springmvc的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架方法之间不共享变量<br>5.处理ajax请求：<br>只需一个注解 @ResponseBody，然后直接返回响应文本即可<br>6.interceptor实现机制：<br>struts有自己的interceptor机制，springmvc用的是独立的AOP方式。这样导致struts的配置文件量还是比springmvc大</p>
<p>参考资料<a href="http://blog.csdn.net/tch918/article/details/38305395" target="_blank" rel="external">同是流行MVC框架，比较Struts2和SpringMVC的区别</a><br><a href="http://blog.csdn.net/s1234567_89/article/details/41893643" target="_blank" rel="external">springmvc和struts2的区别</a><br><a href="http://blog.csdn.net/chenleixing/article/details/44570681" target="_blank" rel="external">SpringMVC与Struts2区别与比较总结</a></p>
<p>Q：网络传输分哪几层<br>A：<br>七层结构：<br> 应用层<br> 表示层<br> 会话层</p>
<p> 传输层<br> 网络层<br> 数据链路层<br> 物理层</p>
<p>Q：常见的网络协议有哪些？TCP和UDP区别<br>A：<br>TCP/IP、HTTP、FTP、等。</p>
<p>TCP是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来。<br>UDP是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！ UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p>
<pre><code>          TCP           UDP 
是否连接   面向连接       面向非连接
传输可靠性 可靠           不可靠 
应用场合   传输大量数据    少量数据
速度       慢            快
</code></pre><p>Q：主流设计模式：<br>单例模式(singleton)、简单工厂(StaticFactory Method)、工厂方法(Factory Method)和抽象工厂(Abstract Factory)、代理模式(Proxy)、命令模式(Command)、策略模式(Strategy)、门面模式(Facade)、桥接模式(Bridge)、观察者模式(Observer)等。</p>
<p>Q：写一个最优的单例模式(singleton)</p>
<p>作用：<br>单例模式（Singleton）：保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>优点：<br>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p>
<p>单例模式一般分为五种：懒汉，恶汉，双重校验锁，枚举和静态内部类。<br>静态内部类：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//延迟加载，减少内存开销</div><div class="line">//线程安全（java中class加载时互斥的）</div><div class="line">public class Singleton &#123;  </div><div class="line">   </div><div class="line">    //私有的构造函数  </div><div class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    //由于SingletonHolder是私有的，除了getInstance()之外没有办法访问它，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，因此它是懒汉式的</div><div class="line">    private static class SingletonHolder &#123;  </div><div class="line">       private static Singleton instance = new Singleton();  </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;  </div><div class="line">       <span class="built_in">return</span> SingletonHolder.instance;  </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    protected void <span class="function"><span class="title">method</span></span>() &#123;  </div><div class="line">       System.out.println(<span class="string">"SingletonInner"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Singleton.getInstance().method();</div></pre></td></tr></table></figure>
<p>参考资料<a href="http://blog.csdn.net/yangkai_hudong/article/details/50628172" target="_blank" rel="external">JAVA单例模式的各种写法分析</a></p>
<p>Q：线程相关</p>
<p>参考资料<a href="http://www.importnew.com/12773.html" target="_blank" rel="external">Java线程面试题 Top 50</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得真快，在这家公司已经工作半年多了。是时候做个小结了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.leezp.space/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.leezp.space/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建php环境并使用phpstorm调试php代码</title>
    <link href="http://www.leezp.space/blog/2017/01/11/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAphp%E7%8E%AF%E5%A2%83%E5%B9%B6%E4%BD%BF%E7%94%A8phpstorm%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.leezp.space/blog/2017/01/11/快速搭建php环境并使用phpstorm调试php代码/</id>
    <published>2017-01-11T11:30:02.000Z</published>
    <updated>2017-04-13T09:09:56.683Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>教你从零基础升级成会完美调试php的大神！</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近由于工作的关系调研一些php的webshell，为了更好的理解一些语句的作用，我想到了用调试来解决，但是搜索了全网也没有找到一份同时具备适合于新手、可配置性高、实用且完整的教程，于是决定自己写一份，把自己探索研究的过程记录下来。我本人经过几天的认真研究总结出的这些方法的确使代码调试达到了eclipse、Visual Studio相当的十分流畅的用户体验，代码发布达到了eclipse相当的简洁高效的用户体验，总结起来就是用了我的这套配置方法以后，感觉很流畅。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>操作系统：win7 64bit<br>Php版本是：5.6.27<br>PhpStorm版本是：PhpStorm 10.0.1<br>Apache版本：2.4.17<br>我用的是Chrome浏览器，版本：55.0.2883.87 m</p>
<p>如果只发布项目不进行调试，使用phpStudy集成环境来发布php项目也是不错的选择，特别适合新手学习使用。</p>
<h3 id="安装Php"><a href="#安装Php" class="headerlink" title="安装Php"></a>安装Php</h3><p>这里的Php相当于Php代码的编译环境。跟教程里的其他配置操作的难度相比，这部分可以忽略不计，对纯小白来说可能稍微有一点难度，请自行百度，安装好以后配置好环境变量。本教程将留更大篇幅给后面有难度的章节。</p>
<h3 id="安装PhpStorm"><a href="#安装PhpStorm" class="headerlink" title="安装PhpStorm"></a>安装PhpStorm</h3><p>PhpStorm是Php代码运行环境和调试工具。安装方法请自行百度。</p>
<h3 id="安装Apache服务器"><a href="#安装Apache服务器" class="headerlink" title="安装Apache服务器"></a>安装Apache服务器</h3><p>Apache服务器是适合搭载Php项目的服务器，也是世界上使用最广泛的服务器。百度下载Apache服务器到本地文件夹。</p>
<h3 id="安装Xdebug"><a href="#安装Xdebug" class="headerlink" title="安装Xdebug"></a>安装Xdebug</h3><p>Xdebug是对Php代码进行调试所需要的插件。把它放置在<strong>php安装的文件夹下的ext</strong>文件夹里。<br>我的Xdebug的安装路径为：<code>D:\D\software\php\php-5.6.27-Win32-VC11-x64\ext</code>。<strong>注意要安装与自己Php对应版本的Xdebug</strong>，我安装的php_xdebug-2.5.0-5.6-vc11-x86_64.dll，<strong>2.5.0是xdebug的版本，5.6是我本地安装的php的版本</strong>。如果你要安装和我相同版本的xdebug(<a href="http://pan.baidu.com/s/1i4Mw0ct" target="_blank" rel="external">php_xdebug-2.5.0-5.6-vc11-x86_64.dll</a>)，可以点击进入我的百度云下载。</p>
<p>打开php的安装目录，找到php.ini配置文件。将下面这段话复制到php.ini 文件任意位置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[xdebug]</div><div class="line">xdebug.profiler_output_dir=<span class="string">"D:\D\workspace\xdebug_output\xdebug"</span></div><div class="line">;输出目录自己定义</div><div class="line">xdebug.trace_output_dir=<span class="string">"D:\D\workspace\xdebug_output\xdebug"</span></div><div class="line">;输出目录自己定义</div><div class="line">zend_extension=<span class="string">"D:\D\software\php\php-5.6.27-Win32-VC11-x64\ext\php_xdebug-2.5.0-5.6-vc11-x86_64.dll"</span></div><div class="line">;zend_extension为Xdebug在你电脑里安装的物理地址</div><div class="line">xdebug.remote_enable=on</div><div class="line">xdebug.profiler_enable=off  </div><div class="line">;一般不要打开性能监控，会生成很大的缓存文件，几个g到几十g都有</div><div class="line">xdebug.idekey=<span class="string">"PHPSTORM"</span></div></pre></td></tr></table></figure>
<p>检查Xdebug是否安装成功：<br>用记事本写一个php文件，1.php。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">phpinfo();</div></pre></td></tr></table></figure>
<p>作用是打印php的信息。放置到Apache服务器的htdocs目录下。<br><img src="/blog/images/img/170111/apache_4.png" alt=""><br>启动Apache服务器（不懂的在正文第一节中有介绍启动方法），在浏览器中输入<code>localhost/1.php</code>，在弹出的php信息页面Ctrl+F搜索是否有Xdebug。如果找不到说明Xdebug没有安装成功。<br>如果显示下面的信息，说明xdebug已经安装成功。<br><img src="/blog/images/img/170111/xdebug_3.png" alt=""><br><br><br>对于按照上面每一步操作下来，仍然没有显示Xdebug的解决办法：</p>
<p>打开Apache服务器的配置文件httpd.conf（不懂的在正文第一节中有介绍配置文件位置）,Ctrl+F搜索PHPIniDir，将后面的地址改成php.ini（php的配置文件）的地址。<br>这样做是因为Apache服务器对PHP.Ini加载有个默认路径，如果和你的安装路径不一致，就读取不了php.ini，我的Apache2.4.17默认：PHPIniDir “D:/php”,改成自己的 php.ini 文件路径，<strong>重启Apache服务器</strong>，就可以了，这个时候发现Xdebug也加载出来了。<br><img src="/blog/images/img/170111/xdebug_4.png" alt=""><br><img src="/blog/images/img/170111/xdebug_5.png" alt=""></p>
<h3 id="安装xdebug-helper"><a href="#安装xdebug-helper" class="headerlink" title="安装xdebug helper"></a>安装xdebug helper</h3><p>xdebug helper是一款浏览器插件，跟phpStorm配合用于调试你的php代码。<br>如果你也使用的Chrome浏览器，<a href="http://pan.baidu.com/s/1gf5LNzX" target="_blank" rel="external">xdebug helper</a>可以点击进入我的百度云下载。<br>安装方法为  Chrome浏览器-&gt;设置-&gt;扩展程序 ,将下载好的插件拖动进去即可。<br><img src="/blog/images/img/170111/xdebug_1.png" alt=""><br>安装好以后在Chrome浏览器的右上角，会出现一个小虫子的图标。<br><img src="/blog/images/img/170111/xdebug_2.png" alt=""></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>到这里我默认你已经安装好了上面的几个工具。</p>
<h3 id="检查Apache默认端口是否被占用"><a href="#检查Apache默认端口是否被占用" class="headerlink" title="检查Apache默认端口是否被占用"></a>检查Apache默认端口是否被占用</h3><p>Apache服务器的默认端口号是80，跟IIS服务器的默认端口号相同。因为我常用IIS发布一些.NET的项目，所以IIS服务器的端口号我十分不愿意修改，这里我选择修改Apache的默认端口号，把它改成8081（电脑上没装IIS服务器的可以忽略这个问题，检测方法：浏览器地址栏输入<code>localhost</code>,看看会不会显示IIS服务器的起始页，会有IIS字样）。</p>
<p>找到Apache服务器的所在文件夹。<br><img src="/blog/images/img/170111/apache_1.png" alt=""><br>用文本编辑器打开/conf/httpd.conf，Ctrl+F搜索“Listen”，紧接着Listen的数字就是端口号，默认状态下为“Listen 80/8080”，改成8081。</p>
<p>切换到Apache目录下的bin文件夹下（例如我的是D:\Apache2.4.17-x64\bin）。<br><img src="/blog/images/img/170111/apache_2.png" alt=""><br>双击打开httpd.exe即可启动，启动后弹出一个黑色的命令框。<br><img src="/blog/images/img/170111/apache_3.png" alt=""><br>在浏览器中输入<code>localhost:8081/</code>检查是否启动Apache服务器，成功启动后会看到Apache服务器的欢迎页。</p>
<h3 id="配置phpStorm"><a href="#配置phpStorm" class="headerlink" title="配置phpStorm"></a>配置phpStorm</h3><p>打开自己的phpStorm。</p>
<p>1.新建一个php文件test.php。<br><img src="/blog/images/img/170111/phpStorm_4.png" alt=""><br>不需要知道我写的这个文件的意思，感兴趣的同学可以继续进行研究，这个就说来话长了。</p>
<p>将项目拷贝到apache服务器htdocs目录下，启动phpStorm时打开的文件路径为Apache服务器下项目的路径</p>
<p>File-&gt; Settings-&gt; Build,Execution,Deployment-&gt; Debugger，设置端口号Port为8081。<br><img src="/blog/images/img/170111/phpStorm_5.png" alt=""></p>
<p>2.发布项目。</p>
<p>File-&gt; Settings-&gt; Build,Execution,Deployment-&gt; Deployment，点击左上角加号，新增一个发布的项目。Type下拉框选择In place，Name文本框对边填写一个名字。我填的是Test。<br><img src="/blog/images/img/170111/phpStorm_6.png" alt=""><br>点击Ok，在这个界面配置Web server root URL，地址是用浏览器访问的地址，一般写成<code><a href="http://服务器IP地址:服务器端口号" target="_blank" rel="external">http://服务器IP地址:服务器端口号</a></code>，这里我写为<code><a href="http://localhost:8081" target="_blank" rel="external">http://localhost:8081</a></code>，也可以写成<code><a href="http://localhost:8081/Test" target="_blank" rel="external">http://localhost:8081/Test</a></code>，这里的Test为刚刚发布项目时取的名字。保存更改。<br><img src="/blog/images/img/170111/phpStorm_7.png" alt=""></p>
<p>3.打开File-&gt; Settings-&gt; Languages &amp; Frameworks-&gt; PHP-&gt; Servers，点击Import，导入一个部署好的项目。<br><img src="/blog/images/img/170111/phpStorm_1.png" alt=""><br>在下拉框里选择刚刚发布的项目Test。<br><img src="/blog/images/img/170111/phpStorm_9.png" alt=""><br>点击确定，保存修改。<br><img src="/blog/images/img/170111/phpStorm_10.png" alt=""><br><img src="/blog/images/img/170111/phpStorm_11.png" alt=""></p>
<p>4.点菜单栏的Run&gt;Edit Configurations… 在弹出的窗口中添加一个调试配置：<br>点击左上角加号，选择PHP Web Application,在右侧的Configuration里点击“更多”按钮。<br><img src="/blog/images/img/170111/phpStorm_8.png" alt=""><br>弹出了刚刚配置好的Servers,点击确定保存修改。<br><img src="/blog/images/img/170111/phpStorm_12.png" alt=""><br>在Name里随便取个名字，我取的是Test。<br><img src="/blog/images/img/170111/phpStorm_13.png" alt=""></p>
<p>5.进入File-&gt; Settings-&gt; Languages &amp; Frameworks-&gt; PHP -&gt;Debug，找到Xdebug选项卡，port填9000(<strong>Debug port要和php.ini里面的 xdebug.remote_port相一致！默认是9000</strong>)。<br><img src="/blog/images/img/170111/phpStorm_2.png" alt=""></p>
<p>6.进入File-&gt; Settings-&gt;Languages &amp; Frameworks -&gt;PHP -&gt;Debug -&gt;DBGp Proxy 填写：<br>IDE key: phpStorm<br>host: localhost<br>port: 8081<br><img src="/blog/images/img/170111/phpStorm_3.png" alt=""></p>
<h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><p>1.File-&gt; Settings-&gt; Build,Execution,Deployment-&gt; Deployment下的 Web server root URL 下将启动后的默认url改为”http://” +你的 ip后，发现总是默认启动80端口，原来还要加上服务器的端口号（我设置的8081），这样才会找到正确的路径。</p>
<p>2.更改完Apache的配置后一定要重启服务器。</p>
<h2 id="高阶配置"><a href="#高阶配置" class="headerlink" title="高阶配置"></a>高阶配置</h2><p>更改默认的网站目录为PHPStorm的工作目录。</p>
<p>由于默认的网站目录在Apache服务器目录下的htdocs里，可是我的phpStrom用的工作目录(WorkSpace)却不是这个,在phpstorm里点击Chrome浏览器图标默认打开的url不是服务器下的，所以会出错，影响浏览php页面的心情。</p>
<p>怎样才能不再浏览器里输入Apache下的工作路径而直接在phpStorm里点击Chrome浏览器图标访问自己编写的项目呢？</p>
<p>解决方法<br>1.将此php项目的工作目录赋值到Apache服务器的htdocs目录下，这样省去了粘贴项目到htdocs目录下的繁琐，但不是最佳解决方案。</p>
<p>2.在Apache的配置文件httpd.conf 里面修改Apache的默认工作目录<br>在Apache配置文件里搜索”DocumentRoot”，将DocumentRoot和Directory改为你PHPStrom的工作目录即可，注意两个值一定要相同,<strong>重启Apache服务器</strong>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentRoot <span class="string">"D:/D/workspace/phpStorm10.0.1_WorkSpace"</span></div><div class="line">&lt;Directory <span class="string">"D:/D/workspace/phpStorm10.0.1_WorkSpace"</span>&gt;</div></pre></td></tr></table></figure>
<p>上面的步骤实际上是手动完成了 相当于Eclipse在 IDE中自动配置发布的过程。<br>按照这个步骤配置好以后就达到了相当于WebStorm里点击浏览器直接查看网页的功能，但这里配置的更完美，在phpStorm里直接点开Chrome浏览器图标以后在浏览器的地址栏里面显示的是服务器下的路径，究竟有多完美，自行体会。</p>
<h2 id="php-debug"><a href="#php-debug" class="headerlink" title="php debug"></a>php debug</h2><p>说到这里又非常有趣了。</p>
<p>1.检查谷歌浏览器扩展插件是否下载了xdebug插件。<br>2.检查本地php下安装对应php版本的xdebug.dll文件。<br>3.启动Apache服务器。<br>4.phpstorm里打开调试的监听器<br><img src="/blog/images/img/170111/phpStorm_14.png" alt=""><br><img src="/blog/images/img/170111/phpStorm_15.png" alt=""><br>5.加断点<br>6.点击phpStorm里的Chrome浏览器图标，像run 项目一样，就自动进入debug模式了。<br><img src="/blog/images/img/170111/phpStorm_16.png" alt=""><br>7.不想debug？ 关掉phpstorm里debug监听器即可，这时候点击 浏览器图标就只是run了。</p>
<p><br><br>配置好之后调试php就一个字，爽！！！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博客是笔者良心之作。教程里有特别多的细节和注意点，应用好这些注意点可以极大方便你的php开发，调试。让你拥有不弱于VS/Eclipse的用户体验！！！如果各位看官觉得有帮助请动动手指转载一下，本人将不胜感激。<br><br><br><strong>参考文献</strong><br><a href="http://www.cnblogs.com/derrck/p/5195946.html" target="_blank" rel="external">PHP 设置调试工具XDebug PHPStorm IDE</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="http://www.xiami.com/play?ids=/song/playlist/id/1795434955"></iframe>

<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教你从零基础升级成会完美调试php的大神！&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://www.leezp.space/blog/categories/php/"/>
    
    
      <category term="干货" scheme="http://www.leezp.space/blog/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="php" scheme="http://www.leezp.space/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>离线搭建Docker环境</title>
    <link href="http://www.leezp.space/blog/2016/12/31/%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BAdocker%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.leezp.space/blog/2016/12/31/离线搭建docker环境/</id>
    <published>2016-12-31T06:01:20.000Z</published>
    <updated>2017-02-23T06:21:53.453Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>最近由于工作的原因，需要在内网用docker环境搭建靶场来复现一些漏洞的attack。</p>
<p>特此简单记录自己docker的学习过程。</p>
<a id="more"></a>
<p><a href="https://dashboard.daocloud.io/" target="_blank" rel="external">Daocloud官网</a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>操作系统：虚拟机 ubuntu 16.04 LTS  </p>
<p>我收集的<a href="http://pan.baidu.com/s/1jIQFmuU" target="_blank" rel="external">Docker资料包下载</a></p>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<p>Docker是一个由GO语言写的程序运行的“容器”（Linux containers， LXCs）。</p>
<p>Docker是为开发者和系统管理员设计的，用来发布和运行分布式应用程序的一个开放性平台。</p>
<p>Docker相对于VM虚拟机的优势十分明显，那就是轻量和高性能和便捷性。</p>
<h3 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h3><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在docker的网站上提到了docker的典型场景：<br>1.Automating the packaging and deployment of applications（使应用的打包与部署自动化）<br>2.Creation of lightweight, private PAAS environments（创建轻量、私密的PAAS环境）<br>3.Automated testing and continuous integration/deployment（使连续的集成/部署、测试自动化）<br>4.Deploying and scaling web apps, databases and backend services（部署、衡量网页app、数据库和后台服务）</p>
<h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><p>Docker并不是全能的，设计之初也不是KVM之类虚拟化手段的替代品，简单总结几点：<br>1.Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用<br>2.LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的<br>3.隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库<br>4.网络管理相对简单，主要是基于namespace隔离<br>5.cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费)<br>6.docker对disk的管理比较有限<br>7.container随着用户进程的停止而销毁，container中的log等用户数据不便收集。</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>本教程只针对 ubuntu 16.04 LTS,我是在虚拟机上面安装的。</p>
<p>将下载好的资料包拷贝到ubuntu的文件系统中去。<br><img src="/blog/images/img/161231/docker_1.png" alt=""><br>在当前目录空白处点击右键，选择Opern in Terminal。<br><img src="/blog/images/img/161231/docker_2.png" alt=""><br>安装vim。<br>在命令行输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dpkg -i vim-common_2%3a7.4.1689-3ubuntu1.2_amd64.deb</div></pre></td></tr></table></figure>
<p>如果报错 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg: error: requested operation requires superuser privilege</div></pre></td></tr></table></figure>
<p>在前面加上sudo意为用管理员权限操作，重新输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i vim-common_2%3a7.4.1689-3ubuntu1.2_amd64.deb</div></pre></td></tr></table></figure>
<p>依次安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i vim-tiny_2%3a7.4.1689-3ubuntu1.2_amd64.deb </div><div class="line">$ sudo dpkg -i vim-runtime_2%3a7.4.1689-3ubuntu1.2_all.deb </div><div class="line">$ sudo dpkg -i vim_2%3a7.4.1689-3ubuntu1.2_amd64.deb</div></pre></td></tr></table></figure>
<p>安装AUFS文件系统。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i aufs-tools_1%3a3.2+20130722-1.1ubuntu1_amd64.deb </div><div class="line">```</div></pre></td></tr></table></figure>
<p>安装cgroup工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">$ sudo dpkg -i cgroupfs-mount_1.2_all.deb</div></pre></td></tr></table></figure></p>
<p>想详细了解cgroup的同学可以看看下面两个链接：<br><a href="http://blog.chinaunix.net/uid-20940095-id-3294134.html" target="_blank" rel="external">cgroup介绍、安装和配置文件解析</a><br><a href="http://files.cnblogs.com/files/lisperl/cgroups%E4%BB%8B%E7%BB%8D.pdf" target="_blank" rel="external">cgroups介绍.pdf</a></p>
<p>安装liberror-perl（可用来以后配置git）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i liberror-perl_0.17-1.2_all.deb</div></pre></td></tr></table></figure>
<p>安装docker-engine（Docker 引擎）</p>
<p>The Docker Engine is a lightweight container runtime and robust tooling that builds and runs your container. Docker allows you to package up application code and dependencies together in an isolated container that share the OS kernel on the host system. The in-host daemon communicates with the Docker Client to execute commands to build, ship and run containers.<br>Docker引擎是一个轻量级容器运行时和强大的工具，构建和运行您的容器。Docker允许将应用程序代码和依赖关系打包在一个隔离的容器中，这些容器共享主机系统上的操作系统内核。主机内守护程序与Docker客户端进行通信，以执行命令来构建，运送和运行容器。</p>
<p>Docker Engine runs on both Linux and Windows operating systems on any infrastructure to create the operating environment for your applications. From a single container on a single host to a multi-container application networked across a cluster of hosts, Docker Engine delivers powerful tooling with a very simple user interface.<br>Docker Engine在任何基础架构上的Linux和Windows操作系统上运行，为应用程序创建操作环境。从单个主机上的单个容器到跨群集主机联网的多容器应用程序，Docker Engine提供了具有非常简单的用户界面的强大的工具。</p>
<p>摘自<a href="https://www.docker.com/products/docker-engine" target="_blank" rel="external">https://www.docker.com</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i docker-engine_1.12.5-0~ubuntu-xenial_amd64.deb </div><div class="line">```</div></pre></td></tr></table></figure>
<p>到这里Docker容器已经安装好了。</p>
<p>查看Docker版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">$ docker -v</div></pre></td></tr></table></figure></p>
<p>如果返回<code>Docker version 1.12.5, build 7392c3b</code>,证明前面的操作顺利。</p>
<p>查看Docker镜像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker images</div></pre></td></tr></table></figure>
<p>如果报错<code>Cannot connect to the Docker daemon. Is the docker daemon running on this host?</code>,在前面加上sudo意为用管理员权限操作，重新输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker images</div></pre></td></tr></table></figure>
<p>观察到返回：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div></pre></td></tr></table></figure>
<p>都是空即为没有镜像的意思，下面我们来导入一个镜像。<br>资料里的bwapp.tar.gz是一个demo，它是一个漏洞环境的镜像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker load &lt; bwapp.tar.gz</div></pre></td></tr></table></figure>
<p>稍微等一小会儿。<br>查看Docker镜像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker images</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">&lt;none&gt;              &lt;none&gt;              41e984bb619b        17 months ago       465.9 MB</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改镜像的标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">$ sudo docker tag 41e9 bwapp:latest </div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>查看Docker镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">$ sudo docker images</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">bwapp               latest              41e984bb619b        17 months ago       465.9 MB</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>查看docker镜像所占用的端口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker inspect 41e9</div></pre></td></tr></table></figure>
<p>如图查看docker镜像所占端口。<br><img src="/blog/images/img/161231/docker_3.png" alt=""><br>启动镜像bwapp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run <span class="_">-d</span> -p 0.0.0.0:8000:80 bwapp </div><div class="line">```</div></pre></td></tr></table></figure>
<p>前面的”0.0.0.0：”是为了方便局域网中其他ip访问，可以省略。省略后”0.0.0.0:”仅虚拟机的宿主机（物理机）可以访问。8000是物理机中的端口号，80是虚拟机中docker镜像占用的端口号。</p>
<p>返回一长串code即为启动成功。<code>3d23ce867614b04ae7fb7e438fb5676b73e6f9fbc42f232d994a39cbdf6d1621</code></p>
<p>检查docker占用的线程号确认docker镜像是否启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```bash</div><div class="line">$ sudo docker ps -l</div></pre></td></tr></table></figure></p>
<p>我的运行结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                                      NAMES</div><div class="line">3d23ce867614        bwapp               <span class="string">"/run.sh"</span>           About a minute ago   Up About a minute   80/tcp, 3306/tcp, 0.0.0.0:8000-&gt;80/tcp   sick_brown</div></pre></td></tr></table></figure>
<p>到这里docker镜像已启动且已做好端口映射。可以在物理机的浏览器中根据虚拟机的ip+刚才给物理机设置的端口号8000即<a href="http://192.168.183.131:8000来访问。" target="_blank" rel="external">http://192.168.183.131:8000来访问。</a></p>
<p><strong>注意：第一次在浏览器中访问要在ip和端口号后面输入”/install.php初始化一下”</strong>。<br><img src="/blog/images/img/161231/docker_4.png" alt=""><br><strong>bwapp是仅我上传的一个demo镜像，用作方便docker的讲解，不属于docker的插件。</strong></p>
<h2 id="让你的Docker连上服务器仓库"><a href="#让你的Docker连上服务器仓库" class="headerlink" title="让你的Docker连上服务器仓库"></a>让你的Docker连上服务器仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/docker/</div><div class="line">$ ls</div><div class="line">$ touch daemon.json  // 将这句话拷贝到daemon.json中： &#123;<span class="string">"insecure-registries"</span>: [<span class="string">"192.168.1.105:5000"</span>]&#125;   // 192.168.1.105为你的服务器在局域网的ip。</div><div class="line">$ service docker restart   //重启</div></pre></td></tr></table></figure>
<p>如果提示没权限，输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su</div></pre></td></tr></table></figure>
<p>接着输入root用户的密码即可保持root权限操作。</p>
<p>如果忘记root用户密码，用以下命令重置root用户密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo passwd root</div></pre></td></tr></table></figure>
<h3 id="拉取服务器仓库中的镜像"><a href="#拉取服务器仓库中的镜像" class="headerlink" title="拉取服务器仓库中的镜像"></a>拉取服务器仓库中的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -XGET http://192.168.1.150:5000/v2/_catalog     //search 仓库中的镜像    // 添加服务器仓库的ip</div><div class="line">$ docker pull 192.168.1.150:5000/test_bwapp            //拉取一个服务器的镜像</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因本人水平有限，故此文只作为自己学习过程中的记录。并不是什么教程，如有纰漏，还望指正，定当不胜感激。</p>
<p><strong>参考文献</strong><br><a href="http://baike.baidu.com/link?url=YoBgEBly2Y7u8oV6gq_3yKSI0v6R9ydR9D67Kkbki7uOb2GwPZ16XgwtYpwlK39Y0hkctDszrlt2QXYWYryjKq" target="_blank" rel="external">百度百科</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于工作的原因，需要在内网用docker环境搭建靶场来复现一些漏洞的attack。&lt;/p&gt;
&lt;p&gt;特此简单记录自己docker的学习过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.leezp.space/blog/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.leezp.space/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>mybatis学习笔记</title>
    <link href="http://www.leezp.space/blog/2016/10/15/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.leezp.space/blog/2016/10/15/mybatis学习笔记/</id>
    <published>2016-10-15T06:06:08.000Z</published>
    <updated>2017-04-27T09:11:32.757Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>mybatis笔记整理。</p>
<a id="more"></a>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>框架是一系列jar包，本质是对JDK功能的扩展。<br>框架是一组程序的集合，包含了一系列的最佳实践，作用是解决某一个领域的问题。<br>最佳实践：实际上是无数程序员经历过无数次尝试之后，总结出来的处理特定问题的特定方法，如果把程序员的自由发挥看作是一条通往成功的途径，最佳实践就是其中的最短路径，能极大的解放生产力。<br>最佳实践三要素：可读性，可维护性，可拓展性。</p>
<h3 id="Web开发中的最佳实践-分层开发模式"><a href="#Web开发中的最佳实践-分层开发模式" class="headerlink" title="Web开发中的最佳实践(分层开发模式)"></a>Web开发中的最佳实践(分层开发模式)</h3><p>JavaEE开发根据职责的纵向划分为：表现层，业务层，持久层。<br>表现层（Predentation Layer）：web/mvc：负责处理与界面交互的相关操作，控制界面跳转（Struts2）<br>业务层（Business Layer）:service：负责复杂的业务逻辑计算和判断（Spring）<br>持久层（Persistent Layer）:dao：负责将业务逻辑数据进行持久化存储（Hibernate/MyBatis）</p>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>对象关系映射（Object Relational Mapping,简称ORM/OR Mapping）。<br>是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。<br>简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将java程序中的对象自动持久化到关系数据库中。<br>避免直接使用SQL语句对关系型数据库中的数据进行操作。<br>减少代码编写量，提高产品质量。<br>ORM主要解决对象–关系的映射。</p>
<p>面向对象概念    面向关系概念<br>类             表<br>对象           表的行（记录）<br>属性                表的列（字段）</p>
<h3 id="ORM的实现思想"><a href="#ORM的实现思想" class="headerlink" title="ORM的实现思想"></a>ORM的实现思想</h3><p>将关系数据库中表中的记录映射成为对象，以对象的形式展现。程序员可以把对数据库的操作转化为对对象的操作，因此ORM的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作。</p>
<p>ORM采用元数据来描述对象–关系映射细节。<br>元数据通常采用XML格式，并且存放在专门的对象–关系映射文件中。</p>
<p>目前流行的ORM框架：<br>1.JPA:本身是一种ORM规范，不是ORM框架，由各大ORM框架提供实现。<br>2.Hibernate:目前最流行的ORM框架，设计灵巧，性能优秀，文档丰富。<br>3.Mybatis:提供的持久层框架包括SQL Maps和Data Access Objects(DAO)，允许开发人员直接编写SQL等。</p>
<h3 id="mybatis优势"><a href="#mybatis优势" class="headerlink" title="mybatis优势"></a>mybatis优势</h3><p>mybatis支持普通的SQL查询，存储过程和高级映射的优秀持久层框架。<br>mybatis清除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。<br>mybatis使用简单的XML或注解用于配置和映射，将接口和java的POJOs(Plain Old Java Objects，普通的java对象)映射成数据库中的记录。</p>
<h2 id="使用mybatis"><a href="#使用mybatis" class="headerlink" title="使用mybatis"></a>使用mybatis</h2><p>1.提供Product对象，IProductDAO，ProductDAOImpl(未实现)，ProductDAOTest。<br>2.使用框架第一步：拷贝jar包。<br>①：mysql驱动<br>②：mybatis核心包：mybatis-3.2.6.jar<br>③：mybatis依赖jar：mybatis目录\lib中所有jar（使用了log4j.properties就可以不用commons-logging-1.1.1.jar）。<br>3.建立mybatis主配置文件。<br>4.建立对象映射配置文件。<br>5.在主配置文件中关联映射文件。<br>6.在对象映射配置文件中写sql。<br>7.加载mybatis主配置文件。</p>
<p>sqlSessionFactory使用步骤（Hibernate/Mybatis）：<br>1.从配置文件（通常是XML配置文件中）得到SessionFactory(相当于DataSource)。<br>2.由SessionFactory产生session(相当于connection，和web中的HttpSession无关)。<br>3.在session中完成对数据的增删改查和事务提交等。<br>4.在用完后关闭session。</p>
<p><strong>sqlSessionFactory一旦被创建，应该在你的应用程序执行期间都存在，没有理由来处理或重新创建它。因此SqlSessionFactory的最佳范围是应用范围，有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。然而这两种方法都不认为是最佳实践。可以考虑依赖注入容器，比如Spring或Google Guice，这样的框架允许你创建支持程序来管理单例sqlSessionFactory的生命周期。</strong></p>
<p>SqlSession:<br>每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能被共享，也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段甚至是实例字段中。也绝不能将SqlSession实例的引用放在任何类型的管理范围中，比如Servlet架构中的HttpSession。如果你现在正用任意的Web框架，要考虑SqlSession放在一个和Http请求对象相似的范围内。换句话说，基于收到的HTTP请求，你可以打开了一个SqlSession，然后返回响应，就可以关闭它了。关闭Session很重要，你应该确保使用finally块来关闭它。</p>
<p><a href="http://pan.baidu.com/s/1pLJhcIv" target="_blank" rel="external">源代码1</a><br><a href="http://pan.baidu.com/s/1misiSK4" target="_blank" rel="external">数据库文件</a></p>
<h3 id="log4j简介"><a href="#log4j简介" class="headerlink" title="log4j简介"></a>log4j简介</h3><p>Log4j有三个主要的组件：Loggers(记录器)，Appenders(输出源)和Layouts(布局)。可简单理解为日志类别，日志要输出的地方和日志以何种形式输出，综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。</p>
<h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><p>1.抽取MybatisUtil。<br>2.添加db.properties属性文件。<br>3.在mybatis主配置文件(MyBatis-config.xml)配置类型别名typeAliases。<br>4.列名和属性名不同resultMap。</p>
<p><a href="http://pan.baidu.com/s/1eRTY6Xk" target="_blank" rel="external">源代码2</a><br><a href="http://pan.baidu.com/s/1hsaGfru" target="_blank" rel="external">源代码3</a></p>
<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>1.建立高级查询表单对象:XxxQuery/XxxQueryObject(Xxx表示对象名称)。ProductQueryObject(商品的高级查询对象)，封装了商品高级查询表单的数据。该类存放于query包中，query包和dao包同级。<br>2.在IProductDAO中，定义高级查询方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Product&gt; query(ProductQueryObject qo);</div></pre></td></tr></table></figure>
<p>3.在ProductDAOImpl中提供高级查询方法的实现。</p>
<p><a href="http://pan.baidu.com/s/1eSDZLNO" target="_blank" rel="external">Mybatis-query1</a></p>
<p><strong>上述查询方法的缺点</strong><br>1.从责任分离上考虑，DAO是不应该做SQL拼接的(DAO是负责做CRUD的，因为查询对象(ProductQueryObject)拥有查询信息，应该把拼接sql责任交给它)。</p>
<p><a href="http://pan.baidu.com/s/1bG94SI" target="_blank" rel="external">Mybatis-query2</a></p>
<p>2.使用了where 1=1,降低性能。</p>
<p><a href="http://pan.baidu.com/s/1eR6XVB8" target="_blank" rel="external">Mybatis-query3</a></p>
<p>3.拼sql依旧麻烦。</p>
<p><a href="http://pan.baidu.com/s/1bJrw8u" target="_blank" rel="external">Mybatis-query4</a></p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>逻辑分页(假分页):一次性把内存中符合条件的数据全部查询出来，存放在内存，在翻页的时候，直接从内存中去截取。<br>优点：翻页很快<br>缺点：若数据量大，可能造成内存溢出。</p>
<p>物理分页(真分页):<br>每次翻页都从数据库中去截取数据。<br>优点：不会造成内存溢出<br>缺点：翻页较慢</p>
<p>通过SQL查询出来的数据：<br>1.查询当前的结果集<br>2.查询结果总数</p>
<p><a href="http://pan.baidu.com/s/1miJTkgC" target="_blank" rel="external">Mybatis-query5</a><br><a href="http://pan.baidu.com/s/1skGKUex" target="_blank" rel="external">Mybatis-query6</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis笔记整理。&lt;/p&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://www.leezp.space/blog/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://www.leezp.space/blog/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>jdbc复习笔记</title>
    <link href="http://www.leezp.space/blog/2016/10/07/jdbc%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.leezp.space/blog/2016/10/07/jdbc复习笔记/</id>
    <published>2016-10-07T05:02:01.000Z</published>
    <updated>2017-04-21T02:45:17.872Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>jdbc复习笔记。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="http://pan.baidu.com/s/1i5R0pYP" target="_blank" rel="external">commons-dbcp-1.4-bin.zip</a><br><a href="http://pan.baidu.com/s/1qXRBNnI" target="_blank" rel="external">commons-dbcp-1.4-src.zip</a><br><a href="http://pan.baidu.com/s/1i5gdd45" target="_blank" rel="external">commons-pool-1.5.6.jar</a><br><a href="http://pan.baidu.com/s/1c1Twb1Q" target="_blank" rel="external">c3p0-0.9.1.2.jar</a><br><a href="http://pan.baidu.com/s/1eSDZnSu" target="_blank" rel="external">c3p0-0.9.1.2.src.zip</a></p>
<h2 id="持久化和JDBC概述"><a href="#持久化和JDBC概述" class="headerlink" title="持久化和JDBC概述"></a>持久化和JDBC概述</h2><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>持久化（persistence），把数据保存到可掉电式存储设备中以供之后使用。<br>大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘中加以“固化”，而持久化的实现过程大多通过各种关系型数据库来完成。<br>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p>
<p>在Java中，数据库存取技术只能通过JDBC访问数据库：<br>JDBC访问数据库的形式主要有两种：<br>1).直接使用JDBC的API去访问数据库服务器（MySQL/Oracle）。<br>2).间接使用JDBC的API去访问数据库服务器。<br>第三方O/R Mapping工具，如Hibernate,Mybatis等（底层依然是JDBC）。<br>JDBC是java访问数据库的基石，其他技术都是对JDBC的封装。</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>JDBC是一种用于执行SQL语句的java API，可以为多种关系型数据库提供统一访问，它由一组用java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。<br>JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。JDBC的目标是使java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，这样就使得程序员无需对特定的数据库系统有过多了解，加快开发过程。<br><img src="/blog/images/img/161007/1.png" alt=""><br>java.sql包装是JDBC的API。<br><strong>在开发中使用到的关于JDBC的类/接口全部引入的是java.sql/javax.sql包中的，不要使用各大数据库提供的API。</strong></p>
<h4 id="获取JDBC的连接对象"><a href="#获取JDBC的连接对象" class="headerlink" title="获取JDBC的连接对象"></a>获取JDBC的连接对象</h4><p>1.加载注册驱动<br>Class.forName(“驱动实现类的全限定名”);<br>MySQL:Class.forName(“com.mysql.jdbc.Driver”);<br><strong>为啥写上这一句话，就会把驱动进行加载注册？</strong><br>步骤1：把com.mysql.jdbc.Driver这份字节码加载进JVM—-&gt;创建Class对象。<br>步骤2：当一份字节码被加载进JVM，就会执行字节码中的静态代码块。<br>见com.mysql.jdbc.Driver源码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static &#123;</div><div class="line">		try &#123;</div><div class="line">			java.sql.DriverManager.registerDriver(new Driver());</div><div class="line">		&#125; catch (SQLException E) &#123;</div><div class="line">			throw new RuntimeException(<span class="string">"Can't register driver!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>步骤3：静态代码块中，就是使用DriverManager.registerDriver(new Driver())注册驱动的。</p>
<p>2.使用DriverManager获取连接<br>Connection conn=DriverManager.getConnection(String url,String user,String password);</p>
<p><strong>跟据官方API，从JDBC4.0（jdk1.6）开始，数据库连接驱动包里必须包含注册驱动那句话，所以省略它不会报错。建议仍然手动注册，兼容java5。</strong></p>
<h2 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h2><h3 id="Connection接口"><a href="#Connection接口" class="headerlink" title="Connection接口"></a>Connection接口</h3><p>表示JDBC的连接对象。</p>
<h3 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h3><p>用于执行静态SQL(写死的SQL)语句。<br>常用方法：<br> int executeUpdate(String sql)<br> ResultSet executeQuery(String sql)<br> close()</p>
<h4 id="PreparedStatement和Statement区别"><a href="#PreparedStatement和Statement区别" class="headerlink" title="PreparedStatement和Statement区别"></a>PreparedStatement和Statement区别</h4><p>PreparedStatement比Statement优势：<br>1.代码可读性/维护性更高。<br>2.PreparedStatement是预编译语句对象，PreparedStatement的执行性能更高。<br><img src="/blog/images/img/161007/2.png" alt=""><br>3.安全性更高，防止SQL注入问题。</p>
<h3 id="ResultSet接口"><a href="#ResultSet接口" class="headerlink" title="ResultSet接口"></a>ResultSet接口</h3><p>表示查询的结果集(查询结果的封装对象)，是通过执行查询语句得到的。<br>常用方法：<br> boolean next()<br> Xxx getXxx(int columnIndex) : 获取当前行的第几列的数据，从1开始(不建议)。<br> <strong>Xxx getXxx(String columnName)</strong> : 获取当前行的执行列名对应列的数据，可以使用别名，注意：Xxx是数据类型，比如String，long，int，boolean等。<br> Object getObject(int/String columnIndex) : 获取某一列的数据，统统使用Object来接收。<br> close()</p>
<p>ResultSet对象具有指向其当前数据行的光标。<br>最初，光标被置于第一行之前，next方法将光标移动到下一行。<br>因为该方法在ResultSet对象没有下一行时返回false，所以可以在while循环中使用它来迭代结果集。</p>
<p>从ResultSet中取出数据，实质上是取出当前指针指向的当前行的数据。</p>
<p>其实，在表中，一行数据就是一个对象。可以使用一个对象来封装表中的一行数据。比如：使用Product对象，可以封装一行商品数据。若要封装多行，可以使用List<product>搞定。</product></p>
<h2 id="JDBC事务的细节"><a href="#JDBC事务的细节" class="headerlink" title="JDBC事务的细节"></a>JDBC事务的细节</h2><p>1.在JDBC中事务是默认自动提交的。在执行DML语句的时候就已经提交事务了。<br>2.事务只对DML语句有效，对于DDL(查询)没效果，查询不会涉及到修改数据库。<br>3.回滚事务在释放资源，释放锁机制。（InnoDB：行锁；MyISAM：表锁）<br>4.在Mysql中，MyISAM不支持外键，不支持事务；InnoDB都支持。</p>
<p>在Spring中有专门的事务管理器（TransactionManager）。</p>
<h2 id="批量操作-batch"><a href="#批量操作-batch" class="headerlink" title="批量操作(batch)"></a>批量操作(batch)</h2><p>当需要成批插入或者更新记录时，可以采用java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。<br>JDBC的批量处理语句包括下面两个方法：<br>addBatch(String) – 添加需要处理的SQL语句或是参数。<br>executeBatch() – 执行批量处理语句。<br>通常我们会遇到两种批量执行SQL语句的情况：<br>多条SQL语句的批量处理。Statement<br>一个SQL语句的批量传参。PreparedStatement</p>
<p>Mysql不支持PreparedStatement的性能优化，也不支持批量操作性能优化。<br><strong>Statement</strong>:<br>Statement批处理，一次性可以执行多条sql语句，需要编译多次。<br>应用场景：系统初始化（创建表，创建数据等）。<br>批量处理sql语句， int[] st.executeBatch()<br>清除缓存， st.clearBatch()<br><strong>PreparedStatement</strong>:<br>PreparedStatement批处理，执行一条sql语句，编译一次，执行sql语句的参数不同。<br>应用场景：表数据初始化。<br>添加批量参数， ps.addBatch()  —添加实际参数，执行之前，需要执行 ps.setXxx()设置实际参数执行批处理， int[] ps.executeBatch()<br>清除缓存： ps.clearBatch()<br>清除参数： ps.clearParameter()</p>
<h2 id="大数据类型（BLOB和TEXT）"><a href="#大数据类型（BLOB和TEXT）" class="headerlink" title="大数据类型（BLOB和TEXT）"></a>大数据类型（BLOB和TEXT）</h2><h3 id="BLOB"><a href="#BLOB" class="headerlink" title="BLOB"></a>BLOB</h3><p>TINYBLOB，BLOB，MEDIUMBLOB，LONGBLOB都是二进制类型，唯一的不同就是容量不同。<br><img src="/blog/images/img/161007/3.PNG" alt=""><br>可以把二进制的数据保存到数据库，比如可以把一个音频，视频，图片存到数据库中。<br>注意：在开发中往往把二进制文件的保存路径存储到数据库中，而不是把数据存储到数据库。</p>
<h3 id="TEXT"><a href="#TEXT" class="headerlink" title="TEXT"></a>TEXT</h3><p>用于保存文字比较多（博客/小说）。<br><img src="/blog/images/img/161007/4.png" alt=""><br>TINYTEXT，TEXT，MEDIUMTEXT，LONGTEXT，对应着java中的String，在java代码中没有变化。</p>
<h2 id="获取自动生成的主键"><a href="#获取自动生成的主键" class="headerlink" title="获取自动生成的主键"></a>获取自动生成的主键</h2><p>Statement:<br>int executeUpdate(String sql): 执行DML/SQL语句<br>int executeUpdate(String sql,int autoGeneratedKeys):<br>  参数： autoGeneratedKeys:是否需要返回自动生成的主键<br>   Statement.RETURN_GENERATED_KEYS:要返回<br>   Statement.NO_GENERATED_KEYS:不返回<br>ResultSet getGeneratedKeys() :获取自动生成的主键</p>
<p>PreparedStatement:<br>conn.prepareStatement(String sql,int autoGeneratedKeys);<br>ResultSet getGeneratedKeys() :获取自动生成的主键</p>
<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>目的：重复利用Connection资源。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在java中，使用javax.sql.DataSource来表示连接池对象。<br>DataSource:数据源，其实就是连接池，Connection Pool。</p>
<p>为什么必须使用数据库连接池：<br>普通的JDBC数据库连接使用DriverManager来获取，每次向数据库建立连接的时候都要将Connection加载到内存中，再验证用户名和密码。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接，这样的方式将会消耗大量的资源和时间，数据库的连接资源并没有得到很好的重复利用，若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。<br>对于每一次数据库连接，使用完后都得断开，否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄露，最终将导致重启数据库。<br>这种开发不能控制被创建的连接对象数，系统资源会被毫无顾忌的分配出去，如连接过多，也可能导致内存泄露，服务器崩溃。<br>连接池的技术比较多，SUN公司仅仅是提供了DataSource的接口，不提供任何实现。由各大服务器厂商提供DataSource的实现（Tomcat,WebLogic）。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>eg:<br> 初始化连接数=5<br>   设置事先先在连接池存储个5个Connection对象。<br> 设置最大连接数=10<br>   设置在连接池中最多有10个Connection对象。<br> 最小连接数=2<br>   设置在连接池中最少有两个Connection对象。<br> 超时时间=5min<br>   设置一个客户如果5分钟没有动作，则会被自动释放。<br> 客户的最大等待时间=2min<br>   设置客户最多有两分钟时间去获取Connection对象，若超过2分钟，还没获取到，则系统提示，稍后再试…</p>
<h3 id="使用连接池和不使用连接池在代码上的区别"><a href="#使用连接池和不使用连接池在代码上的区别" class="headerlink" title="使用连接池和不使用连接池在代码上的区别"></a>使用连接池和不使用连接池在代码上的区别</h3><p>不使用连接池：使用DriverManager来获取Connection对象。<br>Connection conn=DriverManager.getConnection(url,username,password);<br>使用连接池：直接找连接池（DataSource对象），取出Connection即可。<br>在创建DataSource对象时，设置连接数据库的url,user,password。<br>Connection conn=DataSource对象.getConnection();<br>接下来的代码和以前相同。</p>
<p>释放连接：<br>代码：Connection对象.close();<br>不使用连接池：直接和数据库服务器建立连接关系，而断开也是和数据库服务器断开连接。<br>使用连接池：直接和连接池建立连接关系，而断开也是把Connection对象还给连接池，供其他客户使用。没有真正的和数据库断开。如此一来，一个Connection对象就得到了充分的利用。</p>
<h3 id="常见的连接池技术"><a href="#常见的连接池技术" class="headerlink" title="常见的连接池技术"></a>常见的连接池技术</h3><p>dbcp:Spring推荐的连接池技术<br>c3p0:Hibernate推荐的连接池技术</p>
<h4 id="dbcp"><a href="#dbcp" class="headerlink" title="dbcp"></a>dbcp</h4><p>准备：<br>1.拷贝jar包。commons-dbcp-1.4.jar，commons-pool-1.5.6.jar。<br>2.阅读文档。解压commons-dbcp-1.4-src.zip，查看commons-dbcp-1.4-src -&gt; doc -&gt; BasicDataSourceExample.java，里面有连接池的使用案例。<br>步骤：<br>1.创建DataSource对象。<br>2.从DataSource对象中获取Connection对象。<br>3.接下来使用Connection就和以前相同。</p>
<p>注意：dbcp.properties中的key必须是BasicDataSource对象里的属性（setter）。否则无法把对应的配置信息，设置到DBCP连接池中。<br>dbcp.properties:<br> driverClassName=<br> url=<br> username=<br> password=<br> initialSize=<br> //连接池的最大值<br> maxActive=<br> //连接池的最大空闲数<br> maxIdle=</p>
<h4 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h4><p>准备：<br>1.拷贝jar包。c3p0-0.9.1.2.jar。<br>2.阅读文档。解压c3p0-0.9.1.2.src.zip，查看c3p0-0.9.1.2.src -&gt; src -&gt; doc -&gt; index.html -&gt; Quickstart，里面有连接池的使用案例。<br>步骤：<br>1.创建DataSource对象。<br>2.从DataSource对象中获取Connection对象。<br>3.接下来使用Connection就和以前相同。</p>
<p><strong>注意</strong>：<br>1.文件名称必须叫作c3p0.properties。<br>2.c3p0.properties必须放在CLASSPATH的根路径下。<br>3.c3p0.properties文件中的key必须以”c3p0.”作为前缀。<br>4.c3p0.properties文件中的key必须是ComboPooledDataSource类的属性名。</p>
<p><a href="http://pan.baidu.com/s/1miPs2BQ" target="_blank" rel="external">源代码1</a><br><a href="http://pan.baidu.com/s/1hsBn10S" target="_blank" rel="external">源代码2</a><br><a href="http://pan.baidu.com/s/1i5IDcdJ" target="_blank" rel="external">数据库文件</a></p>
<p><strong>参考文献</strong><br><a href="http://www.cnblogs.com/zmc/p/6188040.html" target="_blank" rel="external">c3p0三种配置方式</a><br><a href="http://blog.csdn.net/xwq911/article/details/49150043" target="_blank" rel="external">Connection实例是线程安全的吗</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jdbc复习笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="jdbc" scheme="http://www.leezp.space/blog/categories/jdbc/"/>
    
    
      <category term="jdbc" scheme="http://www.leezp.space/blog/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建Maven环境并创建web项目</title>
    <link href="http://www.leezp.space/blog/2016/10/04/maven%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.leezp.space/blog/2016/10/04/maven环境快速搭建/</id>
    <published>2016-10-04T02:10:10.000Z</published>
    <updated>2017-03-24T05:56:16.733Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>Maven是一个项目管理工具，它能够很方便的帮你管理项目报告，生成站点，管理JAR文件，等等。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>登录<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven官网</a>下载Maven。<br>我安装的Maven版本是apache-maven-3.3.9。<br>值得注意的是，Maven需要在java环境运行，因此你的电脑应该装有jdk。</p>
<h2 id="配置Maven环境"><a href="#配置Maven环境" class="headerlink" title="配置Maven环境"></a>配置Maven环境</h2><p>将下载文件解压，然后设置maven环境。<br>如果你配置过jdk的话，这里对你应该不难。如我的maven环境为：D:\apache-maven-3.3.9<br>我的电脑—-属性—-高级—-环境变量—-系统环境变量—-新建<br>变量名：maven_HOME<br>变量值：D:\apache-maven-3.3.9<br>找到path<br>在环境变量值尾部加入：;%maven_HOME%\bin;—前面注意分号<br>打开命令提示符（开始—运行—cmd）,检查我们的java环境和maven环境是否有误。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -v</div></pre></td></tr></table></figure>
<p><img src="/blog/images/img/161004/maven.png" alt=""></p>
<h2 id="修改仓库位置"><a href="#修改仓库位置" class="headerlink" title="修改仓库位置"></a>修改仓库位置</h2><p>maven里面有一个repository的概念，仓库用于存放我们项目所依赖的所有jar包,当我们的项目依赖于某个jar时，maven会去repository里面去找。repository分两种，一种是远程的，一种是本地的。如果有几个project都用到junit，我们可以把junit放在repository里面，几个project可以公用，节约存储空间而且方便管理，这个repository的位置可以在pom.xml里面设置。<br>本地的默认的路径是安装用户的目录下的 .m2\repository文件夹，下面来修改我们的仓库地址。<br>我的仓库路径：D:_MavenRepository—-这个路径是我自己创建，你可以将路径创建在任何位置。<br>我们打开…\apache-maven-3.3.9\conf\目录下的setting.xml文件，找到localRepository标签，此时是被注释掉的，我们解除注释，然后配置一个路径设置成我们创建的仓库路径。<br><img src="/blog/images/img/161004/maven_2.png" alt=""><br>打开命令提示符，初始化Maven仓库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn <span class="built_in">help</span>:system</div></pre></td></tr></table></figure>
<p>如果运行的过程中没有错误，打开我们仓库（D:_MavenRepository）会发现里面多了一些文件。这些文件就是我们从maven的中央仓库下载到本地仓库的。<br><img src="/blog/images/img/161004/maven_3.png" alt=""><br>上面的这个命令会打印出所有的java系统属性和环境变量。这些信息对我们日常的编程工作很有帮助。</p>
<h2 id="创建一个Maven项目"><a href="#创建一个Maven项目" class="headerlink" title="创建一个Maven项目"></a>创建一个Maven项目</h2><h3 id="用命令行创建Maven项目"><a href="#用命令行创建Maven项目" class="headerlink" title="用命令行创建Maven项目"></a>用命令行创建Maven项目</h3><p>创建一个存放Maven项目的文件夹，我这里是在D盘创建的，命名为_MavenPrj。<br>切换到Maven目录下（注意：<strong>跳过这步操作会将项目建立在默认的C/Users/CurrentUser/ 目录下</strong>，就很尴尬了。）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> _MavenPrj</div></pre></td></tr></table></figure>
<p>通过命令行方式创建一个普通项目：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn archetype:generate -DgroupId=com.lee.test -DartifactId=<span class="built_in">test</span>Maven -DpackageName=com.lee.test -Dversion=1.0</div></pre></td></tr></table></figure>
<p>1)archetype:generate， 这是一个maven的plugin，用来从一个archetype创建一个project。<br>2)-DgroupId和-DartifactId用来放在pom.xml文件里面，作为当前创建的project的描述信息。</p>
<p>因为是第一次构建项目，所有依赖的jar包都要从maven的中央仓库下载，所以需要时间等待。等以后我们的本地仓库中积累了我们常用的jar包后，我们的开发将变得非常规范和方便。<br>中间如果有输入提示信息，直接回车使用默认值就可以了。<br><img src="/blog/images/img/161004/maven_4.PNG" alt=""><br><img src="/blog/images/img/161004/maven_5.png" alt=""><br><img src="/blog/images/img/161004/maven_6.png" alt=""><br>这条命令执行完后，会在你的当前目录下生成一个名为testMaven的目录：<br><img src="/blog/images/img/161004/maven_7.png" alt=""></p>
<h4 id="创建项目时卡顿的解决办法"><a href="#创建项目时卡顿的解决办法" class="headerlink" title="创建项目时卡顿的解决办法"></a>创建项目时卡顿的解决办法</h4><p>如果你在执行命令行时卡在<code>Generating project in Interactive mode</code>这一步，是因为maven在从远程拉取信息，使用 -DarchetypeCatalog=internal 参数让它不要从远程服务器上取catalog。添加这句话之后,就不会卡死了。就会进入交互阶段,一步步询问。每一步如果有默认选项直接按enter即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn archetype:generate -DarchetypeCatalog=internal</div></pre></td></tr></table></figure>
<p>按照交互提示依次输入groupId、artifactId、version、package如下图。<br><img src="/blog/images/img/161004/maven_12.png" alt=""><br>也可以使用下面的命令跳过填写groupId、artifactId、version、package阶段，直接生成项目。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate -DgroupId=com.lee.test -DartifactId=Demo -Dpackage=com.lee.test -Dversion=1.0-SNAPSHOT -DarchetypeCatalog=internal</div></pre></td></tr></table></figure>
<h4 id="了解pom-xml文件"><a href="#了解pom-xml文件" class="headerlink" title="了解pom.xml文件"></a>了解pom.xml文件</h4><p>另外maven还生成了一个重要的文件pom.xml，maven就是通过这个文件来来管理整个project，可以理解位类似于eclipse的.project文件。默认生成的pom.xml文件的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">  &lt;groupId&gt;com.lee.test&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;<span class="built_in">test</span>Maven&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">  &lt;name&gt;<span class="built_in">test</span>Maven&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">  &lt;/properties&gt;</div><div class="line"></div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">      &lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>Ø project：pom.xml文件中的顶层元素；<br>Ø modelVersion：指明POM使用的对象模型的版本。这个值很少改动。<br>Ø groupId：指明创建项目的组织或者小组的唯一标识。GroupId是项目的关键标识，典型的，此标识以组织的完全限定名来定义。比如，org.apache.maven.plugins是所有Maven插件项目指定的groupId。<br>Ø artifactId：指明此项目产生的主要产品的基本名称。项目的主要产品通常为一个JAR文件。第二，像源代码包通常使用artifactId作为最后名称的一部分。典型的产品名称使用这个格式： <artifactid>- <version>. <extension>(比如：myapp-1.0.jar)。<br>Ø version：项目产品的版本号。Maven帮助你管理版本，可以经常看到SNAPSHOT这个版本，表明项目处于开发阶段。<br>Ø packaging：这个project的打包的类型，一般是war、jar等值。<br>Ø name：项目的显示名称，通常用于maven产生的文档中。<br>Ø url：指定项目站点，通常用于maven产生的文档中。<br>Ø description：描述此项目，通常用于maven产生的文档中。</extension></version></artifactid></p>
<p>对于一个项目中只有下面的一部分是是我们需要关注的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;groupId&gt;com.lee.test&lt;/groupId&gt;</div><div class="line"></div><div class="line">&lt;artifactId&gt;<span class="built_in">test</span>Maven&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;version&gt;1.0&lt;/version&gt;</div></pre></td></tr></table></figure>
<h4 id="编译项目代码"><a href="#编译项目代码" class="headerlink" title="编译项目代码"></a>编译项目代码</h4><p>我们的项目已经创建完成。但我们点开目录发现，它并不是我们eclipse所需要的项目目录格式。我们需要把它构建成我们eclipse可以导入的项目。</p>
<p>在命令提示符下切换到我们的创建的项目目录（D:_MavenPrj\testMaven）下，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn clean compile</div></pre></td></tr></table></figure>
<p>Clean 告诉maven清理输出目录target/，compile告诉maven编译项目主代码。<br><img src="/blog/images/img/161004/maven_8.png" alt=""><br>编译完后maven会创建一个target目录去保存编译结果。 我们需要编译成一个什么样的内容，以及要输出到什么地方等等，都是可以在pom.xml文件里面配置的，但是因为我们目前并没有指定这些内容，所以maven会使用默认值。<br>不要急，我们又需要一段时间来下载相关jar包。第一次用maven要学会淡定。</p>
<p>项目是编译完了，但项目的目录结构还不是我们想要的eclipse的项目结构，是不能导入到eclipse中的。所以，还需要执行一个命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn eclipse:eclipse</div></pre></td></tr></table></figure>
<p>命令执行完成后就得到我们需要的项目目录了。<br><img src="/blog/images/img/161004/maven_9.png" alt=""></p>
<h3 id="用Eclipse创建Maven项目"><a href="#用Eclipse创建Maven项目" class="headerlink" title="用Eclipse创建Maven项目"></a>用Eclipse创建Maven项目</h3><p>第一次使用要先配置Eclipse中的Maven仓库位置。</p>
<p>打开我们的eclipse。<br>查看eclipse指向的maven仓库路径：Window-&gt; Perferences-&gt; java-&gt; Build Path-&gt; Classpath Variables，观察M2_REPO的值，如果不是你自定义的本地仓库的路径，那么需要对其进行配置。<br><img src="/blog/images/img/161004/maven_10.png" alt=""><br>配置方法：Window-&gt; Perferences-&gt; Maven-&gt; installations-&gt; 然后点击Add，添加自己安装的maven，找到自己安装的maven文件的根目录，并点击Apply -&gt; OK。<br><img src="/blog/images/img/161004/maven_11.png" alt=""></p>
<p>下面来用Eclipse创建一个Maven的webapp项目。</p>
<p>开启Eclipse，右键new -&gt; other，如下图找到Maven Project。<br><img src="/blog/images/img/161004/maven_13.png" alt=""><br>选择Maven Project，显示创建maven项目的窗口，勾选如下图所示，Create a simple project。<br><img src="/blog/images/img/161004/maven_14.png" alt=""><br>输入Maven项目的基本信息，如下图所示。<br><img src="/blog/images/img/161004/maven_15.png" alt=""><br>完成maven项目的创建，生成相应的maven项目结构，如下图。<br><img src="/blog/images/img/161004/maven_16.png" alt=""><br>这时还要对项目属性进行一些设置。<br>选择项目，右键选择Properties，进入属性页面，点击Project Facets，如下图。<br><img src="/blog/images/img/161004/maven_17.png" alt=""><br>因为我的jdk版本是1.7，所以我选择java版本为1.7。<br><strong>点击 Dynamic Web Module 前的复选框，将它去掉，点击Apply</strong>。<br><img src="/blog/images/img/161004/maven_18.png" alt=""><br>选择Dynamic Web Module 的版本为3.0(跟jdk1.7对应)。<br><strong>在这个页面再次勾选 Dynamic Web Module 前的复选框</strong>，会看到最下面出现了 Further configuration available… 的超链接。<br><img src="/blog/images/img/161004/maven_19.png" alt=""><br>点击 Further configuration available…，如下图。<br><img src="/blog/images/img/161004/maven_20.png" alt=""><br>配置src/main/webapp，并勾选生成web.xml的选项，如下图。<br><img src="/blog/images/img/161004/maven_21.png" alt=""><br>点击OK,如下所示，webapp目录结构显示出来了：<br><img src="/blog/images/img/161004/maven_22.png" alt=""><br>此时还需要检查src/main/webapp为“/”项目的根目录，如果不是，需要配置，如下图。<br><img src="/blog/images/img/161004/maven_23.png" alt=""><br>在webapp文件夹下新建一个jsp页面，index.jsp。写一句话 hello world!<br><img src="/blog/images/img/161004/maven_24.png" alt=""><br>Run As -&gt; Run on Server，运行服务器。<br><img src="/blog/images/img/161004/maven_25.png" alt=""><br>大功告成！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Maven搭建的过程，总的来说并不难，一步一步下来即可。我相信一定有人有比我更好更方便的搭建方式，本文仅抛砖引玉，欢迎交流学习。</p>
<iframe src="https://music.daoapp.io/iframe?song=417833356&qnarrow=1&qssl=1&max_width=84px&autoplay=1" width="84px" height="84px" frameborder="0" marginwidth="0" marginheight="0"></iframe>

<p><strong>参考文献</strong><br><a href="http://shmilyaw-hotmail-com.iteye.com/blog/2166228" target="_blank" rel="external">Maven学习总结:基本概念</a><br><a href="http://www.cnblogs.com/fnng/archive/2011/12/02/2272610.html" target="_blank" rel="external">maven环境快速搭建</a><br><a href="http://www.cnblogs.com/weidiao/p/5838299.html" target="_blank" rel="external">Maven使用archetype迅速生成项目骨架</a><br><a href="http://blog.csdn.net/ya_1249463314/article/details/61617590" target="_blank" rel="external">eclipse创建maven web项目时，index.jsp报错</a><br><a href="http://www.cnblogs.com/candle806/p/3439469.html" target="_blank" rel="external">Eclipse+Maven创建webapp项目&lt;一&gt;</a><br><a href="http://www.imooc.com/learn/443" target="_blank" rel="external">项目管理利器——maven</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven是一个项目管理工具，它能够很方便的帮你管理项目报告，生成站点，管理JAR文件，等等。&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.leezp.space/blog/categories/maven/"/>
    
    
      <category term="Maven" scheme="http://www.leezp.space/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>ssh整合示例</title>
    <link href="http://www.leezp.space/blog/2016/09/24/ssh%E6%95%B4%E5%90%88%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.leezp.space/blog/2016/09/24/ssh整合示例/</id>
    <published>2016-09-24T06:01:15.000Z</published>
    <updated>2017-03-20T07:51:45.286Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>ssh整合的一个demo。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="http://pan.baidu.com/s/1eRExe5W" target="_blank" rel="external">spring4-required</a><br><a href="http://pan.baidu.com/s/1misg1rM" target="_blank" rel="external">struts2.3.15.3-blank</a><br><a href="http://pan.baidu.com/s/1miqe6so" target="_blank" rel="external">hibernate-release-4.2.4.Final</a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="加入Spring"><a href="#加入Spring" class="headerlink" title="加入Spring"></a>加入Spring</h3><h4 id="加入jar包"><a href="#加入jar包" class="headerlink" title="加入jar包"></a>加入jar包</h4><p><a href="http://pan.baidu.com/s/1eRExe5W" target="_blank" rel="external">spring4-required</a></p>
<h4 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h4><p>在web.xml文件中 alt+ / 选择 ContextLoaderListener。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.0"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- needed <span class="keyword">for</span> ContextLoaderListener --&gt;</div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;location&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line"></div><div class="line">	&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>修改web.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.0"</span>&gt;</div><div class="line"></div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line"></div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h4 id="加入Spring的配置文件"><a href="#加入Spring的配置文件" class="headerlink" title="加入Spring的配置文件"></a>加入Spring的配置文件</h4><p>new -&gt; Source Folder新建一个源码包conf。<br>在conf源码包下新建applicationContext.xml配置文件。</p>
<h3 id="加入Hibernate"><a href="#加入Hibernate" class="headerlink" title="加入Hibernate"></a>加入Hibernate</h3><p>1).同时建立持久化类，和其对应的 .hbm.xml文件，生成对应的数据表。<br>2).Spring整合Hibernate。<br>3).步骤：<br>①.加入jar包<br>加入hibernate-release-4.2.4.Final-&gt;lib-&gt;required文件夹下的全部8个jar包。<br>②.在类路径下加入hibernate.cfg.xml文件，在其中配置hibernate的基本属性。<br>新建hibernate.cfg.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">		<span class="string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></div><div class="line">		<span class="string">"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"</span>&gt;</div><div class="line">&lt;hibernate-configuration&gt;</div><div class="line">	&lt;session-factory&gt;</div><div class="line">    	&lt;!-- 配置 hibernate的基本属性 --&gt;</div><div class="line"></div><div class="line">		&lt;!-- 方言 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/property&gt;</div><div class="line">		&lt;!-- 是否显示及格式化SQL --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.show_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.format_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</div><div class="line">		&lt;!-- 生成数据表的策略 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/property&gt;</div><div class="line">		&lt;!-- 二级缓存相关 --&gt;</div><div class="line">	&lt;/session-factory&gt;</div><div class="line">&lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure>
<p>③.建立持久化类，和其对应的 .hbm.xml文件<br>在src下新建包com.leezp.ssh.entities。<br>在该包下新建Department.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.entities;</div><div class="line"></div><div class="line">public class Department &#123;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	private String departmentName;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getDepartmentName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> departmentName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>DepartmentName(String departmentName) &#123;</div><div class="line">		this.departmentName = departmentName;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建Employee.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.entities;</div><div class="line"></div><div class="line">import java.sql.Date;</div><div class="line"></div><div class="line">public class Employee &#123;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line">	// 不能被修改</div><div class="line">	private String lastName;</div><div class="line"></div><div class="line">	private String email;</div><div class="line">	// 从前端传入的是String类型，所以需要注意转换</div><div class="line">	private Date birth;</div><div class="line">	// 不能被修改</div><div class="line">	private Date createTime;</div><div class="line">	// 单向多对一的关联关系</div><div class="line">	private Department department;</div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getLastName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> lastName;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>LastName(String lastName) &#123;</div><div class="line">		this.lastName = lastName;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getEmail</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> email;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Email(String email) &#123;</div><div class="line">		this.email = email;</div><div class="line">	&#125;</div><div class="line">	public Date <span class="function"><span class="title">getBirth</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> birth;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Birth(Date birth) &#123;</div><div class="line">		this.birth = birth;</div><div class="line">	&#125;</div><div class="line">	public Date <span class="function"><span class="title">getCreateTime</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> createTime;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>CreateTime(Date createTime) &#123;</div><div class="line">		this.createTime = createTime;</div><div class="line">	&#125;</div><div class="line">	public Department <span class="function"><span class="title">getDepartment</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> department;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Department(Department department) &#123;</div><div class="line">		this.department = department;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建 Hibernate XML Mapping file(hbm.xml)。<br>Hibernate会帮助我们根据entities自动生成内容。<br>查看Employee.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2017-3-14 15:46:11 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=<span class="string">"com.leezp.ssh.entities.Employee"</span> table=<span class="string">"EMPLOYEE"</span>&gt;</div><div class="line">        &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">            &lt;generator class=<span class="string">"assigned"</span> /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=<span class="string">"lastName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"LASTNAME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"email"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"EMAIL"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"birth"</span> <span class="built_in">type</span>=<span class="string">"java.sql.Date"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"BIRTH"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"createTime"</span> <span class="built_in">type</span>=<span class="string">"java.sql.Date"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"CREATETIME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;many-to-one name=<span class="string">"department"</span> class=<span class="string">"com.leezp.ssh.entities.Department"</span> fetch=<span class="string">"join"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"DEPARTMENT"</span> /&gt;</div><div class="line">        &lt;/many-to-one&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>查看Department.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2017-3-14 15:46:11 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=<span class="string">"com.leezp.ssh.entities.Department"</span> table=<span class="string">"DEPARTMENT"</span>&gt;</div><div class="line">        &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">            &lt;generator class=<span class="string">"assigned"</span> /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=<span class="string">"departmentName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"DEPARTMENTNAME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>修改Department.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2017-3-14 15:46:11 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=<span class="string">"com.leezp.ssh.entities.Department"</span> table=<span class="string">"SSH_DEPARTMENT"</span>&gt;</div><div class="line">        &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">            &lt;generator class=<span class="string">"native"</span> /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=<span class="string">"departmentName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"DEPARTMENT_NAME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>修改Employee.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2017-3-14 15:46:11 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">	&lt;class name=<span class="string">"com.leezp.ssh.entities.Employee"</span> table=<span class="string">"SSH_EMPLOYEE"</span>&gt;</div><div class="line">		&lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">			&lt;generator class=<span class="string">"native"</span> /&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line">		&lt;property name=<span class="string">"lastName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"LAST_NAME"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"email"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"EMAIL"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"birth"</span> <span class="built_in">type</span>=<span class="string">"java.sql.Date"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"BIRTH"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"createTime"</span> <span class="built_in">type</span>=<span class="string">"java.sql.Date"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"CREATE_TIME"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 映射单向多对一的关联关系 --&gt;</div><div class="line">		&lt;many-to-one name=<span class="string">"department"</span> class=<span class="string">"com.leezp.ssh.entities.Department"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"DEPARTMENT_ID"</span> /&gt;</div><div class="line">		&lt;/many-to-one&gt;</div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>④.和Spring进行整合<br>i.加入c3p0和MySQL的驱动。<br>c3p0-0.9.1.2.jar<br>mysql-connector-java-5.1.22-bin.jar<br>ii.在Spring的配置文件中配置:数据源，SessionFactory。</p>
<p>在conf源码包下面新建db.properties属性文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jdbc.user=root</div><div class="line">jdbc.password=root</div><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/ssh_demo</div><div class="line"></div><div class="line">jdbc.initPoolSize=5</div><div class="line">jdbc.maxPoolSize=10</div></pre></td></tr></table></figure>
<p>修改Spring配置文件applicationContext.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置C3P0数据源 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置SessionFactory --&gt;</div><div class="line">	&lt;bean id=<span class="string">"sessionFactory"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 路径给Spring用的情况可以加classpath:，指的是编译后的class路径。/WEB-INF/classes/，编译后的class文件，资源文件，依赖文件等都会放在这个路径下。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 注意将复制的com.leezp.ssh.entities中的<span class="string">"."</span>换成<span class="string">"/"</span>并在最后加上<span class="string">"/*.hbm.xml"</span> --&gt;</div><div class="line">		&lt;property name=<span class="string">"mappingLocations"</span> value=<span class="string">"classpath:com/leezp/ssh/entities/*.hbm.xml"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在mysql新建一个空的数据库ssh_demo。<strong>启动项目，会看到生成对应的数据表</strong>。<br><img src="/blog/images/img/160924/ssh.png" alt=""><br>在数据库里向ssh_department表添加数据。<br><img src="/blog/images/img/160924/ssh_2.png" alt=""><br>修改Spring配置文件applicationContext.xml配置<strong>声明式事务</strong>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置C3P0数据源 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置SessionFactory --&gt;</div><div class="line">	&lt;bean id=<span class="string">"sessionFactory"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 路径给Spring用的情况可以加classpath:，指的是编译后的class路径。/WEB-INF/classes/，编译后的class文件，资源文件，依赖文件等都会放在这个路径下。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 注意将复制的com.leezp.ssh.entities中的<span class="string">"."</span>换成<span class="string">"/"</span>并在最后加上<span class="string">"/*.hbm.xml"</span> --&gt;</div><div class="line">		&lt;property name=<span class="string">"mappingLocations"</span> value=<span class="string">"classpath:com/leezp/ssh/entities/*.hbm.xml"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Spring的声明式事务 --&gt;</div><div class="line">	&lt;!-- 1.配置hibernate的事务管理器 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"transactionManager"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 2.配置事务属性 --&gt;</div><div class="line">	&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;!-- 配置get开头的 <span class="built_in">read</span>-only=<span class="string">"true --&gt;</span></div><div class="line">			&lt;tx:method name="get*<span class="string">" read-only="</span><span class="literal">true</span><span class="string">" /&gt;</span></div><div class="line">			&lt;!-- 配置默认值 --&gt;</div><div class="line">			&lt;tx:method name="*<span class="string">" /&gt;</span></div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;!-- 3.配置事务切入点 --&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;!-- com.leezp.ssh.service包下的所有类的所有方法所有参数 --&gt;</div><div class="line">		&lt;aop:pointcut expression="execution(* com.leezp.ssh.service.*.*(..))<span class="string">"</span></div><div class="line">			id="txPointCut<span class="string">" /&gt;</span></div><div class="line">		&lt;!-- 4.把事务属性和事务切入点关联起来 --&gt;</div><div class="line">		&lt;aop:advisor advice-ref="txAdvice<span class="string">" pointcut-ref="</span>txPointCut<span class="string">" /&gt;</span></div><div class="line">	&lt;/aop:config&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.ssh.service。</p>
<p><a href="http://pan.baidu.com/s/1c2BZ5Ji" target="_blank" rel="external">获取源代码</a></p>
<h3 id="加入Struts2"><a href="#加入Struts2" class="headerlink" title="加入Struts2"></a>加入Struts2</h3><h4 id="加入jar包-1"><a href="#加入jar包-1" class="headerlink" title="加入jar包"></a>加入jar包</h4><p>asm-3.3.jar<br>asm-commons-3.3.jar<br>asm-tree-3.3.jar<br>commons-fileupload-1.3.jar<br>commons-io-2.0.1.jar<br>commons-lang3-3.1.jar<br>commons-logging-1.1.3.jar<br>freemarker-2.3.19.jar<br>javassist-3.11.0.GA.jar<br>log4j-1.2.17.jar<br>ognl-3.0.6.jar<br>struts2-core-2.3.15.3.jar<br>xwork-core-2.3.15.3.jar<br>若有重复的jar包，则需要删除版本较低的。javassist-3.11.0.GA.jar<br><img src="/blog/images/img/160924/ssh_3.jpg" alt=""></p>
<h4 id="在web-xml文件中配置Struts2的Filter"><a href="#在web-xml文件中配置Struts2的Filter" class="headerlink" title="在web.xml文件中配置Struts2的Filter"></a>在web.xml文件中配置Struts2的Filter</h4><p>复制<a href="http://pan.baidu.com/s/1pL8Vl7X" target="_blank" rel="external">struts2官方示例web.xml</a>中的如下代码到项目的web.xml文件中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;filter-mapping&gt;</div><div class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<h4 id="加入Struts2的配置文件"><a href="#加入Struts2的配置文件" class="headerlink" title="加入Struts2的配置文件"></a>加入Struts2的配置文件</h4><p>复制<a href="http://pan.baidu.com/s/1pLAXfjd" target="_blank" rel="external">struts2官方配置文件struts.xml</a>到conf源码包下。</p>
<p>修改struts.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;!DOCTYPE struts PUBLIC</div><div class="line">	<span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></div><div class="line">	<span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;struts&gt;</div><div class="line"></div><div class="line">	&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">	&lt;constant name=<span class="string">"struts.devMode"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 这是利用Struts2里面的自动匹配特性。*代表通配符，可以匹配任何一个字符串,[1]表示匹配的参数。 --&gt;</div><div class="line">	&lt;!-- 举个例子来说，如果你在xml文件中做了这个配置，那么当你页面里面有一个form &lt;form action=<span class="string">"/emp-add"</span> method=<span class="string">"post"</span>&gt; </div><div class="line">		那么，*匹配到的就是“add”,同时method=<span class="string">"&#123;1&#125;"</span>，实际上就是method=<span class="string">"add"</span>。 --&gt;</div><div class="line">	&lt;!-- 假设有两个参数，如果在xml里面的配置是 &lt;action name=<span class="string">"emp-*-*"</span> class=<span class="string">"&#123;1&#125;Action"</span> method=<span class="string">"&#123;2&#125;"</span>&gt; </div><div class="line">		那么第一个星号对应的是&#123;1&#125;,第二个星号对应的是&#123;2&#125; --&gt;</div><div class="line">	&lt;!-- 例如，页面里面有&lt;form action=<span class="string">"/emp-employee-add"</span> method=<span class="string">"post"</span>&gt; 那么实际上的意思就是 </div><div class="line">		class=<span class="string">"employeeAction"</span> method=<span class="string">"add"</span> --&gt;</div><div class="line">	&lt;!-- **这样做的好处就是我们不必为增、删、改、查方法写四个&lt;action&gt;配置。** --&gt;</div><div class="line">	&lt;!-- 通配符还可以用来节省xml文件中的代码量 --&gt;</div><div class="line">	&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</div><div class="line"></div><div class="line">	&lt;/package&gt;</div><div class="line"></div><div class="line">&lt;/struts&gt;</div></pre></td></tr></table></figure>
<h4 id="Struts2整合Spring"><a href="#Struts2整合Spring" class="headerlink" title="Struts2整合Spring"></a>Struts2整合Spring</h4><p>①.加入Struts2的Spring插件的jar包。<br>struts2-spring-plugin-2.3.15.3.jar<br>②.在Spring的配置文件中正常配置Action，注意Action的scope为prototype。</p>
<p>在conf源码包下新建applicationContext-beans.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在src下新建包com.leezp.ssh.actions。</p>
<p>在该包下新建EmployeeAction.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">public class EmployeeAction &#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改applicationContext-beans.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"employeeAction"</span> class=<span class="string">"com.leezp.ssh.actions.EmployeeAction"</span></div><div class="line">		scope=<span class="string">"prototype"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>③.在Struts2的配置文件中配置Action时，class属性指向该Action在IOC中的id。</p>
<p>修改struts.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;!DOCTYPE struts PUBLIC</div><div class="line">	<span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></div><div class="line">	<span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;struts&gt;</div><div class="line"></div><div class="line">	&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">	&lt;constant name=<span class="string">"struts.devMode"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</div><div class="line"></div><div class="line">		&lt;action name=<span class="string">"emp-*"</span> class=<span class="string">"employeeAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;&lt;/action&gt;</div><div class="line"></div><div class="line">	&lt;/package&gt;</div><div class="line"></div><div class="line">&lt;/struts&gt;</div></pre></td></tr></table></figure>
<p>向数据库中的表ssh_employee添加两条用于测试的数据。<br><img src="/blog/images/img/160924/ssh_4.png" alt=""><br>新建一个web页面index.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></div><div class="line">	pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;a href=<span class="string">"emp-list"</span>&gt;List All Employees&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>修改前面建好的EmployeeAction.java。为它添加与index.jsp里”emp-list”对应的list()方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">import com.opensymphony.xwork2.ActionSupport;</div><div class="line"></div><div class="line">public class EmployeeAction extends ActionSupport &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">list</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加包com.leezp.ssh.dao。在该包下新建EmployeeDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line"></div><div class="line">import com.leezp.ssh.entities.Employee;</div><div class="line"></div><div class="line">public class EmployeeDao &#123;</div><div class="line"></div><div class="line">	private SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>SessionFactory(SessionFactory sessionFactory) &#123;</div><div class="line">		this.sessionFactory = sessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Session <span class="function"><span class="title">getSession</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> this.sessionFactory.getCurrentSession();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Employee&gt; <span class="function"><span class="title">getAll</span></span>() &#123;</div><div class="line">		// 迫切左外连接</div><div class="line">		// Query query =</div><div class="line">		// getSession.createQuery(<span class="string">" from Employee e left outer join fetch e.department o"</span>);</div><div class="line">		// Iterator iter = query.list().iterator();</div><div class="line">		// 说明：</div><div class="line">		// 关键字：left join fetch</div><div class="line">		// 返回结果为Employee类型，再通过Employee对象导航到department对象</div><div class="line">		String hql = <span class="string">" from Employee e left outer join fetch e.department "</span>;</div><div class="line">		<span class="built_in">return</span> getSession().createQuery(hql).list();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在包com.leezp.ssh.service下新建EmployeeService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.service;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.leezp.ssh.dao.EmployeeDao;</div><div class="line">import com.leezp.ssh.entities.Employee;</div><div class="line"></div><div class="line">public class EmployeeService &#123;</div><div class="line"></div><div class="line">	private EmployeeDao employeeDao;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>EmployeeDao(EmployeeDao employeeDao) &#123;</div><div class="line">		this.employeeDao = employeeDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Employee&gt; <span class="function"><span class="title">getAll</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> employeeDao.getAll();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改EmployeeAction.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.apache.struts2.interceptor.RequestAware;</div><div class="line"></div><div class="line">import com.leezp.ssh.service.EmployeeService;</div><div class="line">import com.opensymphony.xwork2.ActionSupport;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实现RequestAware请求域</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class EmployeeAction extends ActionSupport implements RequestAware &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	private EmployeeService employeeService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>EmployeeService(EmployeeService employeeService) &#123;</div><div class="line">		this.employeeService = employeeService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">list</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"employees"</span>, employeeService.getAll());</div><div class="line">		<span class="built_in">return</span> <span class="string">"list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Map&lt;String, Object&gt; request;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>Request(Map&lt;String, Object&gt; arg0) &#123;</div><div class="line">		this.request = arg0;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在applicationContext.xml中配置bean。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"employeeDao"</span> class=<span class="string">"com.leezp.ssh.dao.EmployeeDao"</span>&gt;</div><div class="line">		&lt;!-- 这里的ref指向的sessionFactory在另一个配置文件 --&gt;</div><div class="line">		&lt;!-- ref指向不同配置文件时，需要在web.xml的&lt;context-param&gt;中修改配置为 &lt;param-value&gt;classpath:applicationContext*.xml&lt;/param-value&gt; --&gt;</div><div class="line">		&lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"employeeService"</span> class=<span class="string">"com.leezp.ssh.service.EmployeeService"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"employeeDao"</span> ref=<span class="string">"employeeDao"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"employeeAction"</span> class=<span class="string">"com.leezp.ssh.actions.EmployeeAction"</span></div><div class="line">		scope=<span class="string">"prototype"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"employeeService"</span> ref=<span class="string">"employeeService"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>修改web.xml中的&lt;param-value&gt;标签为<code>&lt;param-value&gt;classpath:applicationContext*.xml&lt;/param-value&gt;</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.0"</span>&gt;</div><div class="line"></div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;classpath:applicationContext*.xml&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line"></div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Struts2的Filter --&gt;</div><div class="line">	&lt;filter&gt;</div><div class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">        &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line"></div><div class="line">    &lt;filter-mapping&gt;</div><div class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/filter-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>修改struts.xml配置文件，添加一个结果集的返回页面emp-list.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;!DOCTYPE struts PUBLIC</div><div class="line">	<span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></div><div class="line">	<span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;struts&gt;</div><div class="line"></div><div class="line">	&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">	&lt;constant name=<span class="string">"struts.devMode"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</div><div class="line"></div><div class="line">		&lt;!-- 这是利用Struts2里面的自动匹配特性。*代表通配符，可以匹配任何一个字符串,[1]表示匹配的参数。 --&gt;</div><div class="line">		&lt;!-- 举个例子来说，如果你在xml文件中做了这个配置，那么当你页面里面有一个form &lt;form action=<span class="string">"/emp-add"</span> method=<span class="string">"post"</span>&gt; </div><div class="line">			那么，*匹配到的就是“add”,同时method=<span class="string">"&#123;1&#125;"</span>，实际上就是method=<span class="string">"add"</span>。 --&gt;</div><div class="line">		&lt;!-- 假设有两个参数，如果在xml里面的配置是 &lt;action name=<span class="string">"emp-*-*"</span> class=<span class="string">"&#123;1&#125;Action"</span> method=<span class="string">"&#123;2&#125;"</span>&gt; </div><div class="line">			那么第一个星号对应的是&#123;1&#125;,第二个星号对应的是&#123;2&#125; --&gt;</div><div class="line">		&lt;!-- 例如，页面里面有&lt;form action=<span class="string">"/emp-employee-add"</span> method=<span class="string">"post"</span>&gt; 那么实际上的意思就是 </div><div class="line">			class=<span class="string">"employeeAction"</span> method=<span class="string">"add"</span> --&gt;</div><div class="line">		&lt;!-- **这样做的好处就是我们不必为增、删、改、查方法写四个&lt;action&gt;配置。** --&gt;</div><div class="line">		&lt;!-- 通配符还可以用来节省xml文件中的代码量 --&gt;</div><div class="line">		&lt;action name=<span class="string">"emp-*"</span> class=<span class="string">"employeeAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;</div><div class="line">			&lt;result name=<span class="string">"list"</span>&gt;/WEB-INF/views/emp-list.jsp&lt;/result&gt;</div><div class="line">		&lt;/action&gt;</div><div class="line"></div><div class="line">	&lt;/package&gt;</div><div class="line"></div><div class="line">&lt;/struts&gt;</div></pre></td></tr></table></figure>
<p>在WEB-INF目录下新建views文件夹。<br><strong>配置Eclipse中新建的web页面的默认编码</strong>：<br>Window-&gt;Preferences-&gt;输入encoding，选择JSP Files，在右侧的Encoding下拉框选择UTF-8，点击保存。<br><img src="/blog/images/img/160924/ssh_5.png" alt=""><br>在views文件夹下新建web页面emp-list.jsp，这时看到它的默认编码已经变成了UTF-8。<br><img src="/blog/images/img/160924/ssh_6.png" alt=""><br>在emp-list.jsp中导入struts2的标签&lt;%@ taglib prefix=”s” uri=”/struts-tags”%&gt;并和前台页面显示绑定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Employee List Page&lt;/h4&gt;</div><div class="line"></div><div class="line">	&lt;s:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"#request.employees==null || #request.employees.size()==0 "</span>&gt;</div><div class="line">	没有任何员工信息</div><div class="line">	&lt;/s:<span class="keyword">if</span>&gt;</div><div class="line">	&lt;s:<span class="keyword">else</span>&gt;</div><div class="line">		&lt;table border=<span class="string">"1"</span> cellpadding=<span class="string">"10"</span> cellspacing=<span class="string">"0"</span>&gt;</div><div class="line">			&lt;tr&gt;</div><div class="line">				&lt;td&gt;ID&lt;/td&gt;</div><div class="line">				&lt;td&gt;LASTNAME&lt;/td&gt;</div><div class="line">				&lt;td&gt;EMAIL&lt;/td&gt;</div><div class="line">				&lt;td&gt;BIRTH&lt;/td&gt;</div><div class="line">				&lt;td&gt;CREATETIME&lt;/td&gt;</div><div class="line">				&lt;td&gt;DEPT&lt;/td&gt;</div><div class="line">			&lt;/tr&gt;</div><div class="line">			&lt;s:iterator value=<span class="string">"#request.employees"</span>&gt;</div><div class="line">				&lt;tr&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;id &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;lastName &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;email &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;birth &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;createTime &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;department.departmentName &#125;</span>&lt;/td&gt;</div><div class="line">				&lt;/tr&gt;</div><div class="line">			&lt;/s:iterator&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/s:<span class="keyword">else</span>&gt;</div><div class="line">	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>开启服务器运行项目。<br><img src="/blog/images/img/160924/ssh_7.png" alt=""></p>
<p><a href="http://pan.baidu.com/s/1bo4tQFl" target="_blank" rel="external">获取源代码</a></p>
<h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><h4 id="获取所有的员工信息"><a href="#获取所有的员工信息" class="headerlink" title="获取所有的员工信息"></a>获取所有的员工信息</h4><p>若在Dao中只查询Employee的信息，而且Employee和Department还是使用的懒加载，页面上如果需要显示员工信息，此时会出现懒加载异常，代理对象不能被初始化<code>org.hibernate.LazyInitializationException: could not initialize proxy - no Session</code>。<br>eg:<br>EmployeeDao.java没有查询department。<br><img src="/blog/images/img/160924/ssh_8.png" alt=""><br>同时修改Employee.hbm.xml文件禁止懒加载。<br><img src="/blog/images/img/160924/ssh_9.png" alt=""><br>解决方法：<br>①.关闭懒加载 lazy=”false”，不推荐使用，因为查询了很多不需要的数据，影响性能。<a href="http://pan.baidu.com/s/1geJeMwb" target="_blank" rel="external">获取源代码</a><br>②.获取Employee时使用迫切左外连接同时初始化其关联的Department对象。<br>③.使用OpenSessionInViewFilter:页面加载时开启Session，页面加载完关Session，<strong>见文末参考文献《懒加载异常的解决办法》</strong>。</p>
<h4 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h4><p>在emp-list.jsp页面里添加“删除”功能的超链接。<br><img src="/blog/images/img/160924/ssh_10.jpg" alt=""><br>在EmployeeAction.java里添加id属性和delete方法。<br><img src="/blog/images/img/160924/ssh_11.png" alt=""><br>在EmployeeDao.java里添加delete()方法的数据库操作语句。<br><img src="/blog/images/img/160924/ssh_12.png" alt=""><br>在业务层EmployeeService.java里添加调用employeeDao。<br><img src="/blog/images/img/160924/ssh_13.png" alt=""><br>修改EmployeeAction.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.apache.struts2.interceptor.RequestAware;</div><div class="line"></div><div class="line">import com.leezp.ssh.service.EmployeeService;</div><div class="line">import com.opensymphony.xwork2.ActionSupport;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实现RequestAware请求域</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class EmployeeAction extends ActionSupport implements RequestAware &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	private EmployeeService employeeService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>EmployeeService(EmployeeService employeeService) &#123;</div><div class="line">		this.employeeService = employeeService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">list</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"employees"</span>, employeeService.getAll());</div><div class="line">		<span class="built_in">return</span> <span class="string">"list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">delete</span></span>() &#123;</div><div class="line">		employeeService.delete(id);</div><div class="line">		<span class="built_in">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Map&lt;String, Object&gt; request;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>Request(Map&lt;String, Object&gt; arg0) &#123;</div><div class="line">		this.request = arg0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候要在struts.xml里配置返回的数据如何绑定web页面。<br><img src="/blog/images/img/160924/ssh_14.png" alt=""><br><strong>注意：name后参数应该小写</strong>，应该改成如下图。<br><img src="/blog/images/img/160924/ssh_16.jpg" alt=""><br>启动服务器运行项目。<br><img src="/blog/images/img/160924/ssh_15.png" alt=""><br>点击“删除”超链接可以删除一行数据。</p>
<p><a href="http://pan.baidu.com/s/1boE3oo3" target="_blank" rel="external">获取源代码</a></p>
<h4 id="删除时弹出“确定删除吗？”提示信息并使用ajax异步删除"><a href="#删除时弹出“确定删除吗？”提示信息并使用ajax异步删除" class="headerlink" title="删除时弹出“确定删除吗？”提示信息并使用ajax异步删除"></a>删除时弹出“确定删除吗？”提示信息并使用ajax异步删除</h4><p>在WebContent文件夹下新建文件夹scripts。将<a href="http://pan.baidu.com/s/1dE5BI4h" target="_blank" rel="external">jquery-1.9.1.min.js</a>添加到scripts文件夹下。</p>
<p>修改emp-list.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;!-- 开发时推荐写绝对路径--&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"scripts/jquery-1.9.1.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	$(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">		//1.点击delete时，弹出 确定是要删除xx的信息吗？若确定，执行删除，若不确定，则取消</div><div class="line">		$(<span class="string">".delete"</span>).click(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			var lastName = $(this).next(<span class="string">":input"</span>).val();</div><div class="line">			//var lastName = $(this).next(<span class="string">":hidden"</span>).val();//等价于上面一句</div><div class="line">			var flag = confirm(<span class="string">"确定要删除"</span> + lastName + <span class="string">"的信息吗?"</span>);</div><div class="line">			<span class="keyword">if</span> (flag) &#123;</div><div class="line">				var <span class="variable">$tr</span> = $(this).parent().parent();//,$(this)取出当前对象并转换为jQuery对象</div><div class="line">				//删除，使用Ajax的方式</div><div class="line">				//获取url</div><div class="line">				var url = this.href;</div><div class="line">				//获取删除时间</div><div class="line">				var args = &#123;</div><div class="line">					<span class="string">"time"</span> : new Date()</div><div class="line">				&#125;;</div><div class="line"></div><div class="line">				$.post(url, args, <span class="keyword">function</span>(data) &#123;</div><div class="line">					//若data的返回值为1，则提示删除成功，且把当前行删除</div><div class="line">					<span class="keyword">if</span> (data == <span class="string">"1"</span>) &#123;</div><div class="line">						alert(<span class="string">"删除成功！"</span>);</div><div class="line">						<span class="variable">$tr</span>.remove();//删除页面显示的整行</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						//若data的返回值不是1，提示删除失败</div><div class="line">						alert(<span class="string">"删除失败！"</span>);</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			//取消超链接的默认行为</div><div class="line">			<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;);</div><div class="line">	&#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Employee List Page&lt;/h4&gt;</div><div class="line"></div><div class="line">	&lt;s:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"#request.employees==null || #request.employees.size()==0 "</span>&gt;</div><div class="line">	没有任何员工信息</div><div class="line">	&lt;/s:<span class="keyword">if</span>&gt;</div><div class="line">	&lt;s:<span class="keyword">else</span>&gt;</div><div class="line">		&lt;table border=<span class="string">"1"</span> cellpadding=<span class="string">"10"</span> cellspacing=<span class="string">"0"</span>&gt;</div><div class="line">			&lt;tr&gt;</div><div class="line">				&lt;td&gt;ID&lt;/td&gt;</div><div class="line">				&lt;td&gt;LASTNAME&lt;/td&gt;</div><div class="line">				&lt;td&gt;EMAIL&lt;/td&gt;</div><div class="line">				&lt;td&gt;BIRTH&lt;/td&gt;</div><div class="line">				&lt;td&gt;CREATETIME&lt;/td&gt;</div><div class="line">				&lt;td&gt;DEPT&lt;/td&gt;</div><div class="line">				&lt;td&gt;DELETE&lt;/td&gt;</div><div class="line">			&lt;/tr&gt;</div><div class="line">			&lt;s:iterator value=<span class="string">"#request.employees"</span>&gt;</div><div class="line">				&lt;tr&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;id &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;lastName &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;email &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;birth &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;createTime &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;<span class="variable">$&#123;department.departmentName &#125;</span>&lt;/td&gt;</div><div class="line">					&lt;td&gt;&lt;a href=<span class="string">"emp-delete?id=<span class="variable">$&#123;id &#125;</span>"</span> class=<span class="string">"delete"</span>&gt;Delete&lt;/a&gt; &lt;input</div><div class="line">						<span class="built_in">type</span>=<span class="string">"hidden"</span> value=<span class="string">"<span class="variable">$&#123;lastName &#125;</span>"</span>&gt;&lt;/td&gt;</div><div class="line">					&lt;!-- 设置一个隐藏域 --&gt;</div><div class="line">				&lt;/tr&gt;</div><div class="line">			&lt;/s:iterator&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/s:<span class="keyword">else</span>&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>修改EmployeeAction.java。<br><img src="/blog/images/img/160924/ssh_17.png" alt=""><br>修改struts.xml配置文件。<br><img src="/blog/images/img/160924/ssh_18.png" alt=""></p>
<p><a href="http://pan.baidu.com/s/1misM03I" target="_blank" rel="external">获取源代码</a></p>
<h4 id="建立添加员工页面并绑定部门信息下拉框"><a href="#建立添加员工页面并绑定部门信息下拉框" class="headerlink" title="建立添加员工页面并绑定部门信息下拉框"></a>建立添加员工页面并绑定部门信息下拉框</h4><p>①.显示表单页面：需要先查询所有的部门信息<br>②.使用Struts2的ModelDriven和Preparable拦截器<br>③.时间是一个字符串，需要转为一个Date类型的对象</p>
<p>在index.jsp添加一个新增员工的链接。<br><img src="/blog/images/img/160924/ssh_19.png" alt=""><br>向EmployeeAction.java类中新增一个input()方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public String <span class="function"><span class="title">input</span></span>()&#123;	</div><div class="line">	<span class="built_in">return</span> INPUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在com.leezp.ssh.dao包下面新建一个Dao,DepartmentDao.java。<br>因为EmployeeDao.java和DepartmentDao.java都需要使用相同的代码操作SessionFactory，所以这里将处理SessionFactory的代码提取出来。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>SessionFactory(SessionFactory sessionFactory) &#123;</div><div class="line">		this.sessionFactory = sessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Session <span class="function"><span class="title">getSession</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> this.sessionFactory.getCurrentSession();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>再com.leezp.ssh.dao包下新建一个BaseDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.dao;</div><div class="line"></div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line"></div><div class="line">public class BaseDao &#123;</div><div class="line">	</div><div class="line">	private SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>SessionFactory(SessionFactory sessionFactory) &#123;</div><div class="line">		this.sessionFactory = sessionFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Session <span class="function"><span class="title">getSession</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> this.sessionFactory.getCurrentSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使EmployeeDao.java继承BaseDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line"></div><div class="line">import com.leezp.ssh.entities.Employee;</div><div class="line"></div><div class="line">public class EmployeeDao extends BaseDao &#123;</div><div class="line"></div><div class="line">	public void delete(Integer id) &#123;</div><div class="line">		// 注意大小写与entities里面一致</div><div class="line">		String hql = <span class="string">" delete from Employee e where e.id=? "</span>;</div><div class="line">		getSession().createQuery(hql).setInteger(0, id).executeUpdate();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Employee&gt; <span class="function"><span class="title">getAll</span></span>() &#123;</div><div class="line">		// 迫切左外连接</div><div class="line">		// Query query =</div><div class="line">		// getSession.createQuery(<span class="string">" from Employee e left outer join fetch e.department o"</span>);</div><div class="line">		// Iterator iter = query.list().iterator();</div><div class="line">		// 说明：</div><div class="line">		// 关键字：left join fetch</div><div class="line">		// 返回结果为Employee类型，再通过Employee对象导航到department对象</div><div class="line">		// String hql = <span class="string">" from Employee e "</span>;</div><div class="line">		String hql = <span class="string">" from Employee e left outer join fetch e.department "</span>;</div><div class="line">		<span class="built_in">return</span> getSession().createQuery(hql).list();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改DepartmentDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.dao;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.leezp.ssh.entities.Department;</div><div class="line"></div><div class="line">public class DepartmentDao extends BaseDao &#123;</div><div class="line"></div><div class="line">	public List&lt;Department&gt; <span class="function"><span class="title">getAll</span></span>() &#123;</div><div class="line">		String hql = <span class="string">" from Department "</span>;</div><div class="line">		<span class="built_in">return</span> getSession().createQuery(hql).list();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在com.leezp.ssh.service包下新建DepartmentService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.service;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.leezp.ssh.dao.DepartmentDao;</div><div class="line">import com.leezp.ssh.entities.Department;</div><div class="line"></div><div class="line">public class DepartmentService &#123;</div><div class="line"></div><div class="line">	private DepartmentDao departmentDao;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>DepartmentDao(DepartmentDao departmentDao) &#123;</div><div class="line">		this.departmentDao = departmentDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Department&gt; <span class="function"><span class="title">getAll</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> departmentDao.getAll();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在IOC容器里配置刚才添加的bean,在applicationContext-beans.xml配置文件里配置bean添加如下图所示代码。<br><img src="/blog/images/img/160924/ssh_22.png" alt=""><br>修改EmployeeAction.java里调用DepartmentService。<br><img src="/blog/images/img/160924/ssh_20.png" alt=""><br>修改struts.xml配置文件添加如下图所示代码。<br><img src="/blog/images/img/160924/ssh_21.png" alt=""><br>在views文件夹下新建emp-input.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Employee Input Page&lt;/h4&gt;</div><div class="line"></div><div class="line">	&lt;s:form action=<span class="string">"emp-save"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">		&lt;!-- label属性为在页面显示的值 --&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"lastName"</span> label=<span class="string">"LastName"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"email"</span> label=<span class="string">"Email"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"birth"</span> label=<span class="string">"Birth"</span>&gt;&lt;/s:textfield&gt;</div><div class="line"></div><div class="line">		&lt;!-- struts2的下拉框有listKey和listValue两个属性 --&gt;</div><div class="line">		&lt;s:select list=<span class="string">"#request.departments"</span> listKey=<span class="string">"id"</span></div><div class="line">			listValue=<span class="string">"departmentName"</span> name=<span class="string">"department.id"</span> label=<span class="string">"Department"</span>&gt;&lt;/s:select&gt;</div><div class="line">		&lt;s:submit&gt;&lt;/s:submit&gt;</div><div class="line">	&lt;/s:form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1hrApr2s" target="_blank" rel="external">获取源代码</a></p>
<h4 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h4><p>首先在EmployeeAction.java里面实现ModelDriven和Preparable接口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.apache.struts2.interceptor.RequestAware;</div><div class="line"></div><div class="line">import com.leezp.ssh.entities.Employee;</div><div class="line">import com.leezp.ssh.service.DepartmentService;</div><div class="line">import com.leezp.ssh.service.EmployeeService;</div><div class="line">import com.opensymphony.xwork2.ActionSupport;</div><div class="line">import com.opensymphony.xwork2.ModelDriven;</div><div class="line">import com.opensymphony.xwork2.Preparable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实现RequestAware请求域</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class EmployeeAction extends ActionSupport implements RequestAware,</div><div class="line">		ModelDriven&lt;Employee&gt;, Preparable &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	private EmployeeService employeeService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>EmployeeService(EmployeeService employeeService) &#123;</div><div class="line">		this.employeeService = employeeService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private DepartmentService departmentService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>DepartmentService(DepartmentService departmentService) &#123;</div><div class="line">		this.departmentService = departmentService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">input</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"departments"</span>, departmentService.getAll());</div><div class="line">		<span class="built_in">return</span> INPUT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">list</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"employees"</span>, employeeService.getAll());</div><div class="line">		<span class="built_in">return</span> <span class="string">"list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private InputStream inputStream;</div><div class="line"></div><div class="line">	public InputStream <span class="function"><span class="title">getInputStream</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> inputStream;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">delete</span></span>() &#123;</div><div class="line">		try &#123;</div><div class="line">			employeeService.delete(id);</div><div class="line">			inputStream = new ByteArrayInputStream(<span class="string">"1"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">		&#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			try &#123;</div><div class="line">				inputStream = new ByteArrayInputStream(<span class="string">"0"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">			&#125; catch (UnsupportedEncodingException e1) &#123;</div><div class="line">				e1.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		// <span class="built_in">return</span> SUCCESS;</div><div class="line">		// 使用ajax异步，删除后不再需要刷新页面，所以注释掉上一句。</div><div class="line">		<span class="built_in">return</span> <span class="string">"delete"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Map&lt;String, Object&gt; request;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>Request(Map&lt;String, Object&gt; arg0) &#123;</div><div class="line">		this.request = arg0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// struts2执行Save()方法之前会先执行prepareSave()方法</div><div class="line">	public void <span class="function"><span class="title">prepareSave</span></span>() &#123;</div><div class="line">		model = new Employee();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 保存员工信息的方法</div><div class="line">	public String <span class="function"><span class="title">save</span></span>() &#123;</div><div class="line">		// System.out.println(model);// 打印model查看</div><div class="line">		model.setCreateTime(new Date());</div><div class="line">		employeeService.saveOrUpdate(model);</div><div class="line">		<span class="built_in">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void prepare() throws Exception &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 定义一个model来接受表单提交的值</div><div class="line">	private Employee model;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Employee <span class="function"><span class="title">getModel</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> model;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改struts.xml配置拦截器。<br><img src="/blog/images/img/160924/ssh_23.png" alt=""><br>因为表单提交和回显涉及到要把String日期和Date相互转换，所以在src下新建包com.leezp.ssh.converters。在该包下新建SSHDateConverter.java转换类。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.converters;</div><div class="line"></div><div class="line">import java.sql.Date;</div><div class="line">import java.text.DateFormat;</div><div class="line">import java.text.ParseException;</div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.apache.struts2.util.StrutsTypeConverter;</div><div class="line"></div><div class="line">public class SSHDateConverter extends StrutsTypeConverter &#123;</div><div class="line"></div><div class="line">	private DateFormat dateFormat;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		dateFormat = new SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object convertFromString(Map context, String[] values, Class toClass) &#123;</div><div class="line">		<span class="keyword">if</span> (toClass == Date.class) &#123;</div><div class="line">			try &#123;</div><div class="line">				dateFormat.parse(values[0]);</div><div class="line">			&#125; catch (ParseException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> null;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String convertToString(Map context, Object o) &#123;</div><div class="line">		<span class="keyword">if</span> (o instanceof Date) &#123;</div><div class="line">			<span class="built_in">return</span> dateFormat.format((Date) o);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> null;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在conf源码包下新建xwork-conversion.properties属性文件配置日期转换类。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 复制 SSHDateConverter的全类名</span></div><div class="line">java.util.Date=com.leezp.ssh.converters.SSHDateConverter</div></pre></td></tr></table></figure>
<p><strong>配置自定义的类型转换器的两种方法：</strong><br>在应用程序里使用一个自定义的类型转换器之前，必须先对它进行配置，这种配置既可以基于字段，也可以基于类型。<br>1.基于字段配置:可以为某个Model(该Model类也可能是Action)的各个属性分别配置一个自定义的转换器。<br>①.创建一个属性文件：ModelClassName-conversion.properties,该文件需和相对应的Model类放在同一个目录下。<br>②.编辑属性文件:<br>field1=customConverter1<br>field2=customConverter2<br>…</p>
<p>2.基于类型配置<br>①.在WEB-INF/classes/目录下创建xwork-conversion.properties文件。<br>②.在xwork-conversion.properties文件里把每一个需要进行类型转换的类与一个类型转换器关联起来。<br>fullyQualifiedClassName=CustomConvertor1</p>
<p>修改EmployeeDao.java添加保存的方法。<br><img src="/blog/images/img/160924/ssh_24.png" alt=""><br>修改EmployeeService.java添加保存的方法。<br><img src="/blog/images/img/160924/ssh_25.png" alt=""></p>
<p><a href="http://pan.baidu.com/s/1o8hngvg" target="_blank" rel="external">获取源代码</a></p>
<h5 id="添加员工的流程"><a href="#添加员工的流程" class="headerlink" title="添加员工的流程"></a>添加员工的流程</h5><p>访问index.jsp，点击添加员工的超链接&lt;a href=”emp-input”&gt;Add New Employee&lt;/a&gt;，经过struts.xml配置文件解析，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;action name=<span class="string">"emp-*"</span> class=<span class="string">"employeeAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;</div><div class="line">	&lt;result name=<span class="string">"input"</span>&gt;/WEB-INF/views/emp-input.jsp</div><div class="line">	&lt;/result&gt;</div><div class="line">&lt;/action&gt;</div></pre></td></tr></table></figure>
<p>进入EmployeeAction.java的input()方法处理页面请求，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public String <span class="function"><span class="title">input</span></span>() &#123;</div><div class="line">	request.put(<span class="string">"departments"</span>, departmentService.getAll());</div><div class="line">	<span class="built_in">return</span> INPUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取department的list返回到 emp-input.jsp从而绑定下拉框。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:form action=<span class="string">"emp-save"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">&lt;/s:form&gt;</div></pre></td></tr></table></figure>
<p><strong>把crud方法放在一个action类中，就必定会涉及到一些数据准备的事情，所以用Preparable接口就再合适不过了，实现这个接口的prepare()方法，这个方法会在action类的所有方法执行前执行，另外我们也可以按照它的规则来写一些其它形式的prepare方法，例如aciton中有一个方法叫input(),那么我们可以实现一个prepareInput方法，这样在input()执行前，会执行prepareInput()方法。</strong></p>
<p>保存操作的流程（ModelDriven和Preparable 拦截器）：<br>prepareSave()-&gt;getModel()将上一步创建的值放到栈顶-&gt;由Preparable拦截器将表单的值赋给栈顶对象对应的属性 -&gt;  Save()<br>可以在struts-default.xml中查看拦截器执行顺序，<br>prepare-&gt;modelDriven-&gt;params(表单参数值赋给栈顶对象对应的属性)-&gt;setParameters -&gt;prepareX() </p>
<h4 id="ajax检验添加时的用户名是否可用"><a href="#ajax检验添加时的用户名是否可用" class="headerlink" title="ajax检验添加时的用户名是否可用"></a>ajax检验添加时的用户名是否可用</h4><p>修改emp-input.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"scripts/jquery-1.9.1.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	$(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">		$(<span class="string">":input[name=lastName]"</span>).change(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			var val = $(this).val();</div><div class="line">			val = $.trim(val);</div><div class="line">			var <span class="variable">$this</span> = $(this);</div><div class="line">			<span class="keyword">if</span> (val != <span class="string">""</span>) &#123;</div><div class="line">				var url = <span class="string">"emp-validateLastName"</span>;</div><div class="line">				var args = &#123;</div><div class="line">					<span class="string">"lastName"</span> : val,</div><div class="line">					<span class="string">"time"</span> : new Date()</div><div class="line">				&#125;;</div><div class="line">				<span class="variable">$this</span>.nextAll(<span class="string">"font"</span>).remove();//清空节点后内容，防止文字累加</div><div class="line">				$.post(url, args, <span class="keyword">function</span>(data) &#123;</div><div class="line">					//可用</div><div class="line">					<span class="keyword">if</span> (data == <span class="string">"1"</span>) &#123;</div><div class="line">						<span class="variable">$this</span>.after(<span class="string">"&lt;font color='green'&gt;LastName可用!&lt;/font&gt;"</span>);</div><div class="line">					&#125;</div><div class="line">					//不可用</div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">"0"</span>) &#123;</div><div class="line">						<span class="variable">$this</span>.after(<span class="string">"&lt;font color='red'&gt;LastName不可用!&lt;/font&gt;"</span>);</div><div class="line">					&#125;//服务器错误</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						alert(<span class="string">"服务器错误!"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				alert(<span class="string">"lastName 不能为空！"</span>);</div><div class="line">				this.focus();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Employee Input Page&lt;/h4&gt;</div><div class="line"></div><div class="line">	&lt;s:form action=<span class="string">"emp-save"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">		&lt;!-- label属性为在页面显示的值 --&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"lastName"</span> label=<span class="string">"LastName"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"email"</span> label=<span class="string">"Email"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"birth"</span> label=<span class="string">"Birth"</span>&gt;&lt;/s:textfield&gt;</div><div class="line"></div><div class="line">		&lt;!-- struts2的下拉框有listKey和listValue两个属性 --&gt;</div><div class="line">		&lt;!-- department.id为属性department的属性 --&gt;</div><div class="line">		&lt;s:select list=<span class="string">"#request.departments"</span> listKey=<span class="string">"id"</span></div><div class="line">			listValue=<span class="string">"departmentName"</span> name=<span class="string">"department.id"</span> label=<span class="string">"Department"</span>&gt;</div><div class="line">		&lt;/s:select&gt;</div><div class="line">		&lt;s:submit&gt;</div><div class="line">		&lt;/s:submit&gt;</div><div class="line">	&lt;/s:form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在EmployeeDao.java添加查询用户名重复的方法。<br><img src="/blog/images/img/160924/ssh_26.png" alt=""><br>在EmployeeService.java添加调用它的方法。<br><img src="/blog/images/img/160924/ssh_27.png" alt=""><br>修改EmployeeAction.java。<br><img src="/blog/images/img/160924/ssh_28.png" alt=""><br>修改struts.xml。<br><img src="/blog/images/img/160924/ssh_29.png" alt=""></p>
<p><a href="http://pan.baidu.com/s/1kUB5j7L" target="_blank" rel="external">获取源代码</a></p>
<h4 id="员工信息的修改"><a href="#员工信息的修改" class="headerlink" title="员工信息的修改"></a>员工信息的修改</h4><p>修改input.jsp页面，添加了修改链接等。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"scripts/jquery-1.9.1.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	$(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">		$(<span class="string">":input[name=lastName]"</span>).change(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			var val = $(this).val();</div><div class="line">			val = $.trim(val);</div><div class="line">			var <span class="variable">$this</span> = $(this);</div><div class="line">			<span class="keyword">if</span> (val != <span class="string">""</span>) &#123;</div><div class="line">				var url = <span class="string">"emp-validateLastName"</span>;</div><div class="line">				var args = &#123;</div><div class="line">					<span class="string">"lastName"</span> : val,</div><div class="line">					<span class="string">"time"</span> : new Date()</div><div class="line">				&#125;;</div><div class="line">				<span class="variable">$this</span>.nextAll(<span class="string">"font"</span>).remove();//清空节点后内容，防止文字累加</div><div class="line">				$.post(url, args, <span class="keyword">function</span>(data) &#123;</div><div class="line">					//可用</div><div class="line">					<span class="keyword">if</span> (data == <span class="string">"1"</span>) &#123;</div><div class="line">						<span class="variable">$this</span>.after(<span class="string">"&lt;font color='green'&gt;LastName可用!&lt;/font&gt;"</span>);</div><div class="line">					&#125;</div><div class="line">					//不可用</div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">"0"</span>) &#123;</div><div class="line">						<span class="variable">$this</span>.after(<span class="string">"&lt;font color='red'&gt;LastName不可用!&lt;/font&gt;"</span>);</div><div class="line">					&#125;//服务器错误</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						alert(<span class="string">"服务器错误!"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				alert(<span class="string">"lastName 不能为空！"</span>);</div><div class="line">				this.focus();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Employee Input Page&lt;/h4&gt;</div><div class="line"></div><div class="line">	&lt;s:form action=<span class="string">"emp-save"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">		&lt;!-- Edit --&gt;</div><div class="line">		&lt;s:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"id !=null"</span>&gt;</div><div class="line">			&lt;s:textfield name=<span class="string">"lastName"</span> label=<span class="string">"LastName"</span> disabled=<span class="string">"true"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">			&lt;s:hidden name=<span class="string">"id"</span>&gt;&lt;/s:hidden&gt;</div><div class="line">			&lt;%-- </div><div class="line">			&lt;!--通过添加隐藏域的方式把未提交的字段值提交到服务器--&gt;</div><div class="line">			&lt;s:hidden name=<span class="string">"lastName"</span>/&gt;</div><div class="line">			&lt;s:hidden name=<span class="string">"createTime"</span>/&gt;</div><div class="line">			缺点：每个属性都要再另写一行</div><div class="line">			优点：不需要使用查一遍数据库的方式获取数据</div><div class="line">			--%&gt;</div><div class="line">		&lt;/s:<span class="keyword">if</span>&gt;</div><div class="line">		&lt;!-- Add --&gt;</div><div class="line">		&lt;s:<span class="keyword">else</span>&gt;</div><div class="line">			&lt;s:textfield name=<span class="string">"lastName"</span> label=<span class="string">"LastName"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;/s:<span class="keyword">else</span>&gt;</div><div class="line"></div><div class="line">		&lt;!-- label属性为在页面显示的值 --&gt;</div><div class="line"></div><div class="line">		&lt;s:textfield name=<span class="string">"email"</span> label=<span class="string">"Email"</span>&gt;&lt;/s:textfield&gt;</div><div class="line">		&lt;s:textfield name=<span class="string">"birth"</span> label=<span class="string">"Birth"</span>&gt;&lt;/s:textfield&gt;</div><div class="line"></div><div class="line">		&lt;!-- struts2的下拉框有listKey和listValue两个属性 --&gt;</div><div class="line">		&lt;!-- department.id为属性department的属性 --&gt;</div><div class="line">		&lt;s:select list=<span class="string">"#request.departments"</span> listKey=<span class="string">"id"</span></div><div class="line">			listValue=<span class="string">"departmentName"</span> name=<span class="string">"department.id"</span> label=<span class="string">"Department"</span>&gt;</div><div class="line">		&lt;/s:select&gt;</div><div class="line">		&lt;s:submit&gt;</div><div class="line">		&lt;/s:submit&gt;</div><div class="line">	&lt;/s:form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在EmployeeDao.java里添加获取员工信息的get()方法。<br><img src="/blog/images/img/160924/ssh_30.png" alt=""><br>修改EmployeeService.java。<br><img src="/blog/images/img/160924/ssh_31.png" alt=""><br>修改EmployeeAction.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">package com.leezp.ssh.actions;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import org.apache.struts2.interceptor.RequestAware;</div><div class="line"></div><div class="line">import com.leezp.ssh.entities.Employee;</div><div class="line">import com.leezp.ssh.service.DepartmentService;</div><div class="line">import com.leezp.ssh.service.EmployeeService;</div><div class="line">import com.opensymphony.xwork2.ActionSupport;</div><div class="line">import com.opensymphony.xwork2.ModelDriven;</div><div class="line">import com.opensymphony.xwork2.Preparable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实现RequestAware请求域</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class EmployeeAction extends ActionSupport implements RequestAware,</div><div class="line">		ModelDriven&lt;Employee&gt;, Preparable &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	private EmployeeService employeeService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>EmployeeService(EmployeeService employeeService) &#123;</div><div class="line">		this.employeeService = employeeService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private DepartmentService departmentService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>DepartmentService(DepartmentService departmentService) &#123;</div><div class="line">		this.departmentService = departmentService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private String lastName;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>LastName(String lastName) &#123;</div><div class="line">		this.lastName = lastName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// **注意，这个方法validateLastName()里加参数(String lastName),struts.xml会找不到这个方法而报错**</div><div class="line">	public String validateLastName() throws UnsupportedEncodingException &#123;</div><div class="line">		<span class="keyword">if</span> (employeeService.lastNameIsValid(lastName)) &#123;</div><div class="line">			inputStream = new ByteArrayInputStream(<span class="string">"1"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			inputStream = new ByteArrayInputStream(<span class="string">"0"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="string">"ajax-success"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">input</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"departments"</span>, departmentService.getAll());</div><div class="line">		<span class="built_in">return</span> INPUT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">prepareInput</span></span>() &#123;</div><div class="line">		<span class="keyword">if</span> (id != null) &#123;</div><div class="line">			// 回显到页面</div><div class="line">			model = employeeService.get(id);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">list</span></span>() &#123;</div><div class="line">		request.put(<span class="string">"employees"</span>, employeeService.getAll());</div><div class="line">		<span class="built_in">return</span> <span class="string">"list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private InputStream inputStream;</div><div class="line"></div><div class="line">	public InputStream <span class="function"><span class="title">getInputStream</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> inputStream;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">delete</span></span>() &#123;</div><div class="line">		try &#123;</div><div class="line">			employeeService.delete(id);</div><div class="line">			inputStream = new ByteArrayInputStream(<span class="string">"1"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">		&#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			try &#123;</div><div class="line">				inputStream = new ByteArrayInputStream(<span class="string">"0"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">			&#125; catch (UnsupportedEncodingException e1) &#123;</div><div class="line">				e1.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		// <span class="built_in">return</span> SUCCESS;</div><div class="line">		// 使用ajax异步，删除后不再需要刷新页面，所以注释掉上一句。</div><div class="line">		<span class="built_in">return</span> <span class="string">"ajax-success"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private Map&lt;String, Object&gt; request;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>Request(Map&lt;String, Object&gt; arg0) &#123;</div><div class="line">		this.request = arg0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// struts2执行Save()方法之前会先执行prepareSave()方法</div><div class="line">	public void <span class="function"><span class="title">prepareSave</span></span>() &#123;</div><div class="line">		// 根据id来判断为save()方法准备的model是new的还是从数据库获取的！</div><div class="line"></div><div class="line">		// add</div><div class="line">		<span class="keyword">if</span> (id == null) &#123;</div><div class="line">			model = new Employee();</div><div class="line">			// edit //防止 id为空</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			model = employeeService.get(id);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 保存员工信息的方法</div><div class="line">	public String <span class="function"><span class="title">save</span></span>() &#123;</div><div class="line">		// System.out.println(model);// 打印model查看</div><div class="line">		<span class="keyword">if</span> (id == null) &#123;</div><div class="line">			// add</div><div class="line">			model.setCreateTime(new Date());</div><div class="line">		&#125;</div><div class="line">		employeeService.saveOrUpdate(model);</div><div class="line">		<span class="built_in">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void prepare() throws Exception &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 定义一个model来接受表单提交的值</div><div class="line">	private Employee model;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Employee <span class="function"><span class="title">getModel</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> model;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1pLqEEjL" target="_blank" rel="external">获取源代码</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因本人水平有限，本demo还有很多不足之处，还望各位批评指正。</p>
<p><strong>参考文献</strong><br><a href="http://blog.csdn.net/xiazdong/article/details/6895465/" target="_blank" rel="external">JavaBean中DAO设计模式介绍</a><br><a href="http://blog.csdn.net/canduecho/article/details/4149924" target="_blank" rel="external">Hibernate高级查询方法</a><br><a href="http://blog.csdn.net/heart_2015/article/details/51331948" target="_blank" rel="external">Hibernate学习笔记-懒加载Lazy-true</a><br><a href="http://www.cnblogs.com/hannover/p/4109779.html" target="_blank" rel="external">JQuery this和$(this)的区别及获取$(this)子元素对象的方法</a><br><a href="http://blog.csdn.net/u012160235/article/details/20208323" target="_blank" rel="external">Preparable接口和自定义拦截器总结</a><br><a href="http://blog.csdn.net/chenleixing/article/details/44573495" target="_blank" rel="external">Java过滤器与SpringMVC拦截器之间的关系与区别</a><br><a href="http://www.cnblogs.com/MPPC/p/6123088.html" target="_blank" rel="external">ModelDriven拦截器、Preparable 拦截器</a><br><a href="http://peirenlei.iteye.com/blog/411469" target="_blank" rel="external">关于struts2/webwork中prepare接口中的二次绑定</a><br><a href="http://blog.csdn.net/hackerain/article/details/7013800" target="_blank" rel="external">hibernate——Session接口中定义的saveOrUpdate()方法浅析</a><br><a href="http://blog.csdn.net/itmyhome1990/article/details/7104080" target="_blank" rel="external">Hibernate之Query接口的uniqueResult()方法</a><br><a href="http://blog.csdn.net/randomnet/article/details/18728073" target="_blank" rel="external">懒加载异常的解决办法</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssh整合的一个demo。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="ssh" scheme="http://www.leezp.space/blog/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（八）Spring整合Struts2</title>
    <link href="http://www.leezp.space/blog/2016/09/17/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/09/17/一起学习Spring4.0（八）/</id>
    <published>2016-09-17T06:05:01.000Z</published>
    <updated>2017-03-14T06:24:51.392Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>本节讲述Spring整合Struts2。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Struts2官方示例jar包:<a href="http://pan.baidu.com/s/1gfihiZD" target="_blank" rel="external">struts2.3.15.3-blank</a><br><a href="http://pan.baidu.com/s/1pK7YYHd" target="_blank" rel="external">struts-2.3.15.3-lib</a><br><a href="http://pan.baidu.com/s/1pL8Vl7X" target="_blank" rel="external">struts2官方示例web.xml</a><br><a href="http://pan.baidu.com/s/1pLAXfjd" target="_blank" rel="external">struts2官方配置文件struts.xml</a><br><a href="http://pan.baidu.com/s/1jHAQZeY" target="_blank" rel="external">spring4-required jar</a></p>
<h2 id="Spring如何在WEB应用中使用"><a href="#Spring如何在WEB应用中使用" class="headerlink" title="Spring如何在WEB应用中使用"></a>Spring如何在WEB应用中使用</h2><p>1).需要额外导入两个jar包。<br>spring-web-4.0.4.RELEASE.jar<br>spring-webmvc-4.0.4.RELEASE.jar<br>2).Spring的配置文件，和非WEB环境没有什么不同<br>3).需要在web.xml文件中加入如下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 配置Spring配置文件的名称和位置 --&gt;</div><div class="line">&lt;!-- needed <span class="keyword">for</span> ContextLoaderListener --&gt;</div><div class="line">&lt;context-param&gt;</div><div class="line">	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div><div class="line"></div><div class="line">&lt;!-- 启动IOC容器的ServletContextListener --&gt;</div><div class="line">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</div><div class="line">&lt;listener&gt;</div><div class="line">	&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">&lt;/listener&gt;</div></pre></td></tr></table></figure>
<p>4).如何创建IOC容器。<br>①.非WEB应用：在main方法中直接创建。<br>②.WEB应用：在WEB应用被服务器加载时就创建IOC容器：<br>在ServletContextListener#contextInitialized(ServletContextEvent sce)方法中创建IOC容器。<br>③.在WEB应用的其他组件中如何来访问IOC容器：<br>在ServletContextListener#contextInitialized(ServletContextEvent sce)方法中创建IOC容器后，可以把其放在ServletContext(即application 域)的一个属性中。<br>④.实际上，Spring配置文件的名字和位置应该也是可配置的！将其配置到当前WEB应用的初始化参数中较为合适。</p>
<p>点击new-&gt; Other-&gt; Dynamic web project,新建一个Web项目spring-05。<br><img src="/blog/images/img/160917/struts2_1.png" alt=""><br>导入<a href="http://pan.baidu.com/s/1jHAQZeY" target="_blank" rel="external">spring4-required jar包</a>。<br>新建包com.leezp.spring.struts2.beans。在该包下新建Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.beans;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String username;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Username(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">hello</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"My name is "</span> + username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建Spring配置文件applicationContext.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.struts2.beans.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"username"</span> value=<span class="string">"lee"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在项目下新建包com.leezp.spring.struts2.listeners。<br>点击new-&gt; Other-&gt; Listener创建一个监听器。在Class Name项里填写监听器的名字。<br><img src="/blog/images/img/160917/struts2_2.PNG" alt=""><br>点击Next,选择相应监听器。<br><img src="/blog/images/img/160917/struts2_3.png" alt=""><br>点击finish。<br>查看新建的监听器SpringServletContextListener.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.listeners;</div><div class="line"></div><div class="line">import javax.servlet.ServletContextEvent;</div><div class="line">import javax.servlet.ServletContextListener;</div><div class="line">import javax.servlet.annotation.WebListener;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Application Lifecycle Listener implementation class SpringServletContextListener</div><div class="line"> *</div><div class="line"> */</div><div class="line">@WebListener</div><div class="line">public class SpringServletContextListener implements ServletContextListener &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Default constructor. </div><div class="line">     */</div><div class="line">    public <span class="function"><span class="title">SpringServletContextListener</span></span>() &#123;</div><div class="line">        // TODO Auto-generated constructor stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">     * @see ServletContextListener<span class="comment">#contextInitialized(ServletContextEvent)</span></div><div class="line">     */</div><div class="line">    public void contextInitialized(ServletContextEvent arg0) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">     * @see ServletContextListener<span class="comment">#contextDestroyed(ServletContextEvent)</span></div><div class="line">     */</div><div class="line">    public void contextDestroyed(ServletContextEvent arg0) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该监听器的contextInitialized()方法中创建IOC容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.listeners;</div><div class="line"></div><div class="line">import javax.servlet.ServletContext;</div><div class="line">import javax.servlet.ServletContextEvent;</div><div class="line">import javax.servlet.ServletContextListener;</div><div class="line">import javax.servlet.annotation.WebListener;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Application Lifecycle Listener implementation class</div><div class="line"> * SpringServletContextListener</div><div class="line"> * </div><div class="line"> */</div><div class="line">@WebListener</div><div class="line">public class SpringServletContextListener implements ServletContextListener &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Default constructor.</div><div class="line">	 */</div><div class="line">	public <span class="function"><span class="title">SpringServletContextListener</span></span>() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @see ServletContextListener<span class="comment">#contextInitialized(ServletContextEvent)</span></div><div class="line">	 */</div><div class="line">	public void contextInitialized(ServletContextEvent arg0) &#123;</div><div class="line">		// 获取Spring配置文件的名称</div><div class="line">		ServletContext servletContext = arg0.getServletContext();</div><div class="line">		String config = servletContext.getInitParameter(<span class="string">"configLocation"</span>);</div><div class="line">		// 1.创建IOC容器</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(config);</div><div class="line">		// 2.把IOC容器放在ServletContext的一个属性中</div><div class="line">		servletContext.setAttribute(<span class="string">"ApplicationContext"</span>, ctx);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @see ServletContextListener<span class="comment">#contextDestroyed(ServletContextEvent)</span></div><div class="line">	 */</div><div class="line">	public void contextDestroyed(ServletContextEvent arg0) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改配置文件web.xml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</div><div class="line">	id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;</div><div class="line">	&lt;!-- 配置Spring配置文件的名称和位置 --&gt;</div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;configLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;applicationContext.xml&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line">	&lt;!-- 启动IOC容器的 ServletContextListener --&gt;</div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;com.leezp.spring.struts2.listeners.SpringServletContextListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>新建包com.leezp.spring.struts2.servlets。在该包下新建Servlet类TestServlet.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.servlets;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import javax.servlet.ServletContext;</div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.annotation.WebServlet;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.struts2.beans.Person;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Servlet implementation class TestServlet</div><div class="line"> */</div><div class="line">@WebServlet(<span class="string">"/TestServlet"</span>)</div><div class="line">public class TestServlet extends HttpServlet &#123;</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @see HttpServlet<span class="comment">#doGet(HttpServletRequest request, HttpServletResponse</span></div><div class="line">	 *      response)</div><div class="line">	 */</div><div class="line">	protected void <span class="keyword">do</span>Get(HttpServletRequest request,</div><div class="line">			HttpServletResponse response) throws ServletException, IOException &#123;</div><div class="line">		// 1.从application域对象中得到IOC容器的引用</div><div class="line">		ServletContext servletContext = getServletContext();</div><div class="line">		ApplicationContext ctx = (ApplicationContext) servletContext</div><div class="line">				.getAttribute(<span class="string">"ApplicationContext"</span>);</div><div class="line"></div><div class="line">		// 2.从IOC容器中得到需要的bean</div><div class="line">		Person person = ctx.getBean(Person.class);</div><div class="line">		person.hello();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建web页面index.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></div><div class="line">	pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;a href=<span class="string">"TestServlet"</span>&gt;TestServlet&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>运行项目，鼠标单击项目，右击，run as-&gt; run on server-&gt; next…</p>
<p><a href="http://pan.baidu.com/s/1dEBbn4t" target="_blank" rel="external">获取源代码</a></p>
<h2 id="Spring如何整合Struts2"><a href="#Spring如何整合Struts2" class="headerlink" title="Spring如何整合Struts2"></a>Spring如何整合Struts2</h2><p>1).整合目标：使IOC容器来管理Struts2的Action！<br>2).整合方法：<br>①.正常加入Struts2<br>web.xml里加入Struts2的过滤器<br>添加Struts2的配置文件struts.xml。<br>②.在Spring的IOC容器中配置struts2的Action。<br>注意：在IOC容器中配置Struts2的Action时，需要配置scope属性，其值必须为prototype,即struts2的action是非单例的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"personAction"</span> class=<span class="string">"com.leezp.spring.struts2.actions.PersonAction"</span> scope=<span class="string">"prototype"</span>&gt;</div><div class="line">	&lt;property name=<span class="string">"personService"</span> ref=<span class="string">"personService"</span>&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>③.配置Struts2的配置文件<br>action节点的class属性不能再指向全类名，需要指向IOC容器中该bean的id。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;action name=<span class="string">"person-save"</span> class=<span class="string">"personAction"</span>&gt;</div><div class="line">	&lt;result&gt;/success.jsp&lt;/result&gt;</div><div class="line">&lt;/action&gt;</div></pre></td></tr></table></figure>
<p>④.导入jar：<strong>struts2-spring-plugin-2.3.15.3.jar</strong><br>3).整合原理：通过添加struts2-spring-plugin-2.3.15.3.jar以后，Struts2会先从IOC容器中获取Action的实例。<br>具体可以看Struts2的源码，在父类SpringObjectFactory.java的buildBean()方法里做了如下判断。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (appContext.containsBean(beanName)) &#123;</div><div class="line">        o = appContext.getBean(beanName);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Class beanClazz = getClassInstance(beanName);</div><div class="line">        o = buildBean(beanClazz, extraContext);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>新建一个web项目spring-06。导入<a href="http://pan.baidu.com/s/1jHAQZeY" target="_blank" rel="external">spring4-required jar包</a>。<br>新建包com.leezp.spring.struts2.beans。在该包下新建Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.beans;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String username;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Username(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">hello</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"My name is "</span> + username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.struts2.services。在该包下新建PersonService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.services;</div><div class="line"></div><div class="line">public class PersonService &#123;</div><div class="line">	</div><div class="line">	public void <span class="function"><span class="title">save</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"PersonService's save..."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.struts2.actions。在该包下新建PersonAction.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.struts2.actions;</div><div class="line"></div><div class="line">import com.leezp.spring.struts2.services.PersonService;</div><div class="line"></div><div class="line">public class PersonAction &#123;</div><div class="line"></div><div class="line">	private PersonService personService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>PersonService(PersonService personService) &#123;</div><div class="line">		this.personService = personService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">execute</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"execute..."</span>);</div><div class="line">		personService.save();</div><div class="line">		<span class="built_in">return</span> <span class="string">"success"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复制<a href="http://pan.baidu.com/s/1pL8Vl7X" target="_blank" rel="external">struts2官方示例web.xml</a>里的内容到web.xml并修改web.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">	id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.0"</span>&gt;</div><div class="line">	&lt;!-- 配置Spring配置文件的名称和位置 --&gt;</div><div class="line">	&lt;context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div><div class="line">	&lt;!-- 启动IOC容器的 ServletContextListener --&gt;</div><div class="line">	&lt;listener&gt;</div><div class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</div><div class="line">	&lt;/listener&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Struts2的Filter --&gt;</div><div class="line">	&lt;filter&gt;</div><div class="line">		&lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">		&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</div><div class="line">	&lt;/filter&gt;</div><div class="line"></div><div class="line">	&lt;filter-mapping&gt;</div><div class="line">		&lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">	&lt;/filter-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>新建Spring配置文件applicationContext.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.struts2.beans.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"username"</span> value=<span class="string">"spring"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"personService"</span> class=<span class="string">"com.leezp.spring.struts2.services.PersonService"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 注意：在IOC容器中配置Struts2的Action时，需要配置scope属性，其值必须为prototype,即struts2的action是非单例的 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"personAction"</span> class=<span class="string">"com.leezp.spring.struts2.actions.PersonAction"</span></div><div class="line">		scope=<span class="string">"prototype"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"personService"</span> ref=<span class="string">"personService"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>新建struts.xml。复制<a href="http://pan.baidu.com/s/1pLAXfjd" target="_blank" rel="external">struts2官方配置文件struts.xml</a>内容到struts.xml并修改这个文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;!DOCTYPE struts PUBLIC</div><div class="line">	<span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></div><div class="line">	<span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;struts&gt;</div><div class="line"></div><div class="line">	&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">	&lt;constant name=<span class="string">"struts.devMode"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring整合Struts2时，在Struts2中配置的Spring的Action的class需要指向IOC容器中该bean的id，而不再使用全类名(单独配置Struts2时需要使用全类名) --&gt;</div><div class="line">		&lt;action name=<span class="string">"person-save"</span> class=<span class="string">"personAction"</span>&gt;</div><div class="line">			&lt;result&gt;/success.jsp&lt;/result&gt;</div><div class="line">		&lt;/action&gt;</div><div class="line"></div><div class="line">	&lt;/package&gt;</div><div class="line"></div><div class="line">&lt;/struts&gt;</div></pre></td></tr></table></figure>
<p>新建web页面success.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></div><div class="line">	pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;h4&gt;Success Page&lt;/h4&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>新建web页面index.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;a href=<span class="string">"person-save"</span>&gt;Person Save&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在该页面右击，Run As-&gt; Run on Server启动Apache服务器进行测试。点击页面的”Person Save”链接。</p>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">execute...</div><div class="line">PersonService<span class="string">'s save...</span></div></pre></td></tr></table></figure>
<p>新建web页面test.jsp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;%@page import=<span class="string">"com.leezp.spring.struts2.beans.Person"</span>%&gt;</div><div class="line">&lt;%@page</div><div class="line">	import=<span class="string">"org.springframework.web.context.support.WebApplicationContextUtils"</span>%&gt;</div><div class="line">&lt;%@page import=<span class="string">"org.springframework.context.ApplicationContext"</span>%&gt;</div><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;%</div><div class="line">		//1.从application域对象中得到IOC容器的实例</div><div class="line">		//利用Spring提供的工具 WebApplicationContextUtils获取</div><div class="line">		ApplicationContext ctx = WebApplicationContextUtils</div><div class="line">				.getWebApplicationContext(application);</div><div class="line">		//2.从IOC容器中得到bean</div><div class="line">		Person person = ctx.getBean(Person.class);</div><div class="line">		//3.使用bean</div><div class="line">		person.hello();</div><div class="line">	%&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在该页面右击，Run As-&gt; Run on Server启动Apache服务器进行测试。</p>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">My name is spring</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1jIp2BEu" target="_blank" rel="external">获取源代码</a></p>
<p><strong>参考文献</strong><br><a href="http://pan.baidu.com/s/1gfihiZD" target="_blank" rel="external">struts2.3.15.3-blank</a><br><a href="http://pan.baidu.com/s/1pL8Vl7X" target="_blank" rel="external">struts2官方示例web.xml</a><br><a href="http://pan.baidu.com/s/1pLAXfjd" target="_blank" rel="external">struts2官方配置文件struts.xml</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节讲述Spring整合Struts2。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring整合Struts2" scheme="http://www.leezp.space/blog/tags/Spring%E6%95%B4%E5%90%88Struts2/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（七）Spring整合Hibernate</title>
    <link href="http://www.leezp.space/blog/2016/09/11/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/09/11/一起学习Spring4.0（七）/</id>
    <published>2016-09-11T06:00:05.000Z</published>
    <updated>2017-03-13T08:31:07.650Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>本节讲述Spring整合Hibernate。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="http://tools.jboss.org/downloads/overview.html" target="_blank" rel="external">JBoss官网</a><br>Spring jar包：<a href="http://pan.baidu.com/s/1slHEwLR" target="_blank" rel="external">spring-framework-4.0.4.RELEASE</a><br>Hibernate jar包：<a href="http://pan.baidu.com/s/1miM8poG" target="_blank" rel="external">hibernate-release-4.2.4.Final</a></p>
<p>根据自己Eclipse版本下载对应的插件。我的是Eclipse Kepler 4.3.2，与之对应的Hibernate Tools版本是<a href="http://pan.baidu.com/s/1jIfYTxG" target="_blank" rel="external">hibernatetools-Update-4.1.2.Final_2014-03-18_15-46-19-B706</a>。<br>官网上写它的Requirements: Java 6 or Java 7 and Eclipse Kepler 4.3.2。</p>
<p>下载好hibernatetools之后将其解压，在Eclipse目录下新建文件夹MyPlugins，在MyPlugins文件夹下新建Hibernatetools文件夹，这两个文件夹的名字可以任意取，这样命名是便于识别。将解压好的hibernatetools文件夹下的features和plugins两个文件夹复制到Hibernatetools文件夹下。<br><img src="/blog/images/img/160911/hibernate_1.png" alt=""><br>在Eclipse目录下新建links文件夹，在links文件夹下新建hibernatetools.link文件，这个文件的名字可以任意取，这样取是便于识别。在hibernatetools.link文件里写入<code>path=/MyPlugins/Hibernatetools</code>,也可以写绝对路径，都OK的。重启Eclipse，在New-&gt; Other 之后，输入h,看到Hibernate即为安装成功。<br><img src="/blog/images/img/160911/hibernate_2.png" alt=""></p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>1.有IOC容器来生成Hibernate的SessionFactory。<br>2.让Hibernate使用上Spring的声明式事务。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.加入Hibernate<br>①.添加jar包并build path。<br>②.添加Hibernate配置文件：hibernate.cfg.xml。<br>③.编写了持久化类对应的 .hbm.xml文件。<br>2.加入Spring。<br>①.jar包。<br>②.加入Spring的配置文件。<br>3.整合。<br>Spring hibernate 事务的流程：<br>1.在方法开始之前:<br>①.获取Session。<br>②.把Session和当前线程绑定，这样就可以在Dao中使用SessionFactory的getCurrentSession()方法来获取Session了。<br>③.开启事务。<br>2.若方法正常结束，即没有出现异常，则:<br>①.提交事务。<br>②.使用当前线程绑定的Session，解除绑定。<br>③.关闭Session。<br>3.若方法出现异常，则：<br>①.回滚事务。<br>②.使和当前线程绑定的Session解除绑定。<br>③.关闭Session。</p>
<p>新建项目spring-04。<br>新建bin文件夹。将下载的Hibernate jar包解压缩。进入lib-&gt; required文件夹，将全部8个必要jar包复制到bin文件夹下。<br>antlr-2.7.7.jar<br>dom4j-1.6.1.jar<br>hibernate-commons-annotations-4.0.2.Final.jar<br>hibernate-core-4.2.4.Final.jar<br>hibernate-jpa-2.0-api-1.0.1.Final.jar<br>javassist-3.15.0-GA.jar<br>jboss-logging-3.1.0.GA.jar<br>jboss-transaction-api_1.1_spec-1.0.1.Final.jar<br>再添加c3p0-0.9.1.2.jar，mysql-connector-java-5.1.22-bin.jar并build path。<br><img src="/blog/images/img/160911/hibernate_5.png" alt=""><br>在该项目下新建包com.leezp.spring.hibernate.entities。在该包下新建hibernate的配置文件hibernate.cfg.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</div><div class="line">		<span class="string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></div><div class="line">		<span class="string">"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"</span>&gt;</div><div class="line">&lt;hibernate-configuration&gt;</div><div class="line">	&lt;session-factory&gt;</div><div class="line">    	&lt;!-- 配置hibernate的基本属性 --&gt;</div><div class="line">		&lt;!-- 1.数据源需配置到IOC容器中，所以此处不再需要配置数据源。 --&gt;</div><div class="line">		&lt;!-- 2.关联的 .hbm.xml 也在IOC容器配置SessionFactory实例时再进行配置。 --&gt;</div><div class="line">		&lt;!-- 3.配置hibernate的基本属性：方言，SQL显示及格式化，生成数据表的策略及二级缓存等。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/property&gt;</div><div class="line">		&lt;!-- 是否显示所生成 SQL 语句 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.show_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</div><div class="line">		&lt;!-- 是否格式化生成的 SQL 语句，增加可读性，不然全挤在一行 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.format_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</div><div class="line">		&lt;!--hibernate.hbm2ddl.auto 用于 自动创建|更新|验证数据库表结构。 create | update | validate </div><div class="line">			| create-drop --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;!-- create： 每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 --&gt;</div><div class="line">		&lt;!-- create-drop ： 每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 --&gt;</div><div class="line">		&lt;!-- update： 最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 </div><div class="line">			model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 </div><div class="line">			应用第一次运行起来后才会。 --&gt;</div><div class="line">		&lt;!-- validate ： 每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。 --&gt;</div><div class="line"></div><div class="line"></div><div class="line">		&lt;!-- 配置hibernate 二级缓存相关的属性 --&gt;</div><div class="line">	&lt;/session-factory&gt;</div><div class="line">&lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure>
<p>在该包下新建Account.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.entities;</div><div class="line"></div><div class="line">public class Account &#123;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	private String username;</div><div class="line"></div><div class="line">	private int balance;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getUsername</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Username(String username) &#123;</div><div class="line">		this.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int <span class="function"><span class="title">getBalance</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Balance(int balance) &#123;</div><div class="line">		this.balance = balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建Book.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.entities;</div><div class="line"></div><div class="line">public class Book &#123;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line">	private String bookName;</div><div class="line">	private String isbn;</div><div class="line">	private int price;</div><div class="line">	private int stock;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getBookName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> bookName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>BookName(String bookName) &#123;</div><div class="line">		this.bookName = bookName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getIsbn</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> isbn;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Isbn(String isbn) &#123;</div><div class="line">		this.isbn = isbn;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int <span class="function"><span class="title">getPrice</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Price(int price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int <span class="function"><span class="title">getStock</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> stock;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Stock(int stock) &#123;</div><div class="line">		this.stock = stock;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>鼠标单击包，右键new-&gt; Other…-&gt; Hibernate XML Mapping file(hbm.xml)，如下图。<br><img src="/blog/images/img/160911/hibernate_3.png" alt=""><br>点击Next,点Finish。发现包下多了两个文件，这是Hibernate Tools为我们自动生成的hibernate Mapping文件。<br><img src="/blog/images/img/160911/hibernate_4.png" alt=""><br>打开Book.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2016-9-11 10:14:02 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=<span class="string">"com.leezp.spring.hibernate.entities.Account"</span> table=<span class="string">"ACCOUNT"</span>&gt;</div><div class="line">        &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">            &lt;generator class=<span class="string">"assigned"</span> /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=<span class="string">"username"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"USERNAME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"balance"</span> <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"BALANCE"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>打开Account.hbm.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2016-9-11 10:14:02 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">    &lt;class name=<span class="string">"com.leezp.spring.hibernate.entities.Account"</span> table=<span class="string">"ACCOUNT"</span>&gt;</div><div class="line">        &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">            &lt;generator class=<span class="string">"assigned"</span> /&gt;</div><div class="line">        &lt;/id&gt;</div><div class="line">        &lt;property name=<span class="string">"username"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"USERNAME"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=<span class="string">"balance"</span> <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">            &lt;column name=<span class="string">"BALANCE"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>修改Account.hbm.xml文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2016-9-11 10:14:02 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">	&lt;class name=<span class="string">"com.leezp.spring.hibernate.entities.Account"</span> table=<span class="string">"SH_ACCOUNT"</span>&gt;</div><div class="line">		&lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">			&lt;!-- 生成主键的方式,如有疑问见最后的参考文献：Hibernate 的&lt;generator class=<span class="string">"native"</span>&gt;&lt;/generator&gt;的不同属性含义 --&gt;</div><div class="line">			&lt;generator class=<span class="string">"native"</span> /&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"username"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"USERNAME"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"balance"</span> <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"BALANCE"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>修改Book.hbm.xml文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="string">"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">&lt;!-- Generated 2016-9-11 10:14:02 by Hibernate Tools 3.4.0.CR1 --&gt;</div><div class="line">&lt;hibernate-mapping&gt;</div><div class="line">	&lt;class name=<span class="string">"com.leezp.spring.hibernate.entities.Book"</span> table=<span class="string">"SH_BOOK"</span>&gt;</div><div class="line">		&lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"ID"</span> /&gt;</div><div class="line">			&lt;generator class=<span class="string">"native"</span> /&gt;</div><div class="line">		&lt;/id&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"bookName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"BOOK_NAME"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"isbn"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"ISBN"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"price"</span> <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"PRICE"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"stock"</span> <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;column name=<span class="string">"STOCK"</span> /&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure>
<p>新建属性文件db.properties。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jdbc.user=root</div><div class="line">jdbc.password=root</div><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/spring_hibernate</div><div class="line"></div><div class="line">jdbc.initPoolSize=5</div><div class="line">jdbc.maxPoolSize=10</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1eSvagIQ" target="_blank" rel="external">spring4-required jar包</a><br>将下载好的spring4-required jar包里的所有jar文件复制到bin文件夹下并且build path。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">新建Spring的配置文件applicationContext.xml。</div><div class="line"></div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 1.配置数据源 --&gt;</div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 2.配置Hibernate 的 SessionFactory实例 :通过Spring 提供的LocalSessionFactoryBean进行配置 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"sessionFactory"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		&lt;!-- 配置数据源属性 --&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 配置hibernate配置文件的位置及名称 --&gt;</div><div class="line">		&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 配置hibernate映射文件的位置及名称，可以使用通配符 --&gt;</div><div class="line">		&lt;property name=<span class="string">"mappingLocations"</span></div><div class="line">			value=<span class="string">"classpath:com/leezp/spring/hibernate/entities/*.hbm.xml"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 3.配置Spring的声明式事务 --&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在mysql中新建数据库spring_hibernate。不创建任何表。<br><img src="/blog/images/img/160911/hibernate_6.png" alt=""><br>新建包com.leezp.spring.hibernate.test。在该包下新建测试类SpringHibernateTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class SpringHibernateTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="built_in">test</span>DataSource() throws SQLException &#123;</div><div class="line">		DataSource dataSource=ctx.getBean(DataSource.class);</div><div class="line">		System.out.println(dataSource.getConnection());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行上面的测试类。在数据库里刷新，发现为我们建立好了数据表。<br><img src="/blog/images/img/160911/hibernate_7.png" alt=""></p>
<p>新建包com.leezp.spring.hibernate.dao。在该包下新建接口BookShopDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.dao;</div><div class="line"></div><div class="line">public interface BookShopDao &#123;</div><div class="line"></div><div class="line">	//根据书号获取书的单价</div><div class="line">	public int findBookPriceByIsbn(String isbn);</div><div class="line">	</div><div class="line">	//更新书的库存，使书号对应的库存 -1</div><div class="line">	public void updateBookStock(String isbn);</div><div class="line">	</div><div class="line">	//更新用户的账户余额：使username的balance - price</div><div class="line">	public void updateUserAccount(String username,int price);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.hibernate.dao.impl。在该包下新建接口BookShopDao.java的实现类BookShopDaoImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.dao.impl;</div><div class="line"></div><div class="line">import org.hibernate.Query;</div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">import com.leezp.spring.hibernate.dao.BookShopDao;</div><div class="line">import com.leezp.spring.hibernate.exception.BookStockException;</div><div class="line">import com.leezp.spring.hibernate.exception.UserAccountException;</div><div class="line"></div><div class="line">@Repository</div><div class="line">public class BookShopDaoImpl implements BookShopDao &#123;</div><div class="line"></div><div class="line">	// 线程安全的</div><div class="line">	@Autowired</div><div class="line">	private SessionFactory sessionFactory;</div><div class="line"></div><div class="line">	// HibernateTemplate 和 HibernateDaoSupport是Spring的API，</div><div class="line">	// 不推荐使用，因为这样会导致Dao和Spring的API进行耦合，可移植性变差，建议原生Hibernate接口。</div><div class="line">	// private HibernateTemplate hibernateTemplate;</div><div class="line">	//</div><div class="line">	// public class BookShopDaoImpl extends HibernateDaoSupport implements</div><div class="line">	// BookShopDao &#123;</div><div class="line"></div><div class="line">	// Hibernate 获取跟当前线程绑定的Session</div><div class="line">	private Session <span class="function"><span class="title">getSession</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> sessionFactory.getCurrentSession();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int findBookPriceByIsbn(String isbn) &#123;</div><div class="line">		String hql = <span class="string">" select b.price from Book b where b.isbn = ? "</span>;</div><div class="line">		// import org.hibernate.Query;</div><div class="line">		Query query = getSession().createQuery(hql).setString(0, isbn);</div><div class="line">		<span class="built_in">return</span> (Integer) query.uniqueResult();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateBookStock(String isbn) &#123;</div><div class="line">		// 验证书的库存是否充足</div><div class="line">		String hql2 = <span class="string">" select b.stock from Book b where b.isbn= ? "</span>;</div><div class="line">		int stock = (int) getSession().createQuery(hql2).setString(0, isbn)</div><div class="line">				.uniqueResult();</div><div class="line">		<span class="keyword">if</span> (stock == 0) &#123;</div><div class="line">			throw new BookStockException(<span class="string">"库存不足！"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String hql = <span class="string">" update Book b set b.stock=b.stock -1 where b.isbn= ? "</span>;</div><div class="line">		getSession().createQuery(hql).setString(0, isbn).executeUpdate();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateUserAccount(String username, int price) &#123;</div><div class="line">		// 验证余额是否足够</div><div class="line">		String hql2 = <span class="string">" select a.balance from Account a where a.username=? "</span>;</div><div class="line">		int balance = (int) getSession().createQuery(hql2)</div><div class="line">				.setString(0, username).uniqueResult();</div><div class="line">		<span class="keyword">if</span> (balance &lt; price) &#123;</div><div class="line">			throw new UserAccountException(<span class="string">"余额不足！"</span>);</div><div class="line">		&#125;</div><div class="line">		String hql = <span class="string">" update Account a set a.balance=a.balance-? where a.username=? "</span>;</div><div class="line">		getSession().createQuery(hql).setInteger(0, price)</div><div class="line">				.setString(1, username).executeUpdate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.hibernate.service。<br>新建接口BookShopService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.service;</div><div class="line"></div><div class="line">public interface BookShopService &#123;</div><div class="line"></div><div class="line">	public void purchase(String username, String isbn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口Cashier.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.service;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public interface Cashier &#123;</div><div class="line"></div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.hibernate.service.impl。<br>在该包下新建接口BookShopService.java的实现类BookShopServiceimpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.service.impl;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.leezp.spring.hibernate.dao.BookShopDao;</div><div class="line">import com.leezp.spring.hibernate.service.BookShopService;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class BookShopServiceImpl implements BookShopService &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private BookShopDao bookShopDao;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Spring hibernate 事务的流程：</div><div class="line">	 * </div><div class="line">	 * 1.在方法开始之前</div><div class="line">	 * </div><div class="line">	 * ①.获取Session</div><div class="line">	 * </div><div class="line">	 * ②.把Session和当前线程绑定，这样就可以在Dao中使用SessionFactory的</div><div class="line">	 * getCurrentSession()方法来获取Session了。</div><div class="line">	 * </div><div class="line">	 * ③.开启事务</div><div class="line">	 * </div><div class="line">	 * 2.若方法正常结束，即没有出现异常，则</div><div class="line">	 * </div><div class="line">	 * ①.提交事务</div><div class="line">	 * </div><div class="line">	 * ②.使用当前线程绑定的Session，解除绑定</div><div class="line">	 * </div><div class="line">	 * ③.关闭Session</div><div class="line">	 * </div><div class="line">	 * 3.若方法出现异常，则：</div><div class="line">	 * </div><div class="line">	 * ①.回滚事务</div><div class="line">	 * </div><div class="line">	 * ②.使和当前线程绑定的Session解除绑定</div><div class="line">	 * </div><div class="line">	 * ③.关闭Session</div><div class="line">	 */</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void purchase(String username, String isbn) &#123;</div><div class="line">		int price = bookShopDao.findBookPriceByIsbn(isbn);</div><div class="line">		bookShopDao.updateBookStock(isbn);</div><div class="line">		bookShopDao.updateUserAccount(username, price);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建接口Cashier.java的实现类CashierImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.service.impl;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.leezp.spring.hibernate.service.BookShopService;</div><div class="line">import com.leezp.spring.hibernate.service.Cashier;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class CashierImpl implements Cashier &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private BookShopService bookShopService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns) &#123;</div><div class="line">		<span class="keyword">for</span> (String isbn : isbns) &#123;</div><div class="line">			bookShopService.purchase(username, isbn);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.hibernate.exception。<br>在该包下新建异常类BookStockException.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.exception;</div><div class="line"></div><div class="line">//继承RuntimeException,Generate Constructors from SuperClass添加构造器</div><div class="line">// Add default serial version ID</div><div class="line">public class BookStockException extends RuntimeException &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	public <span class="function"><span class="title">BookStockException</span></span>() &#123;</div><div class="line">		super();</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message, Throwable cause,</div><div class="line">			boolean <span class="built_in">enable</span>Suppression, boolean writableStackTrace) &#123;</div><div class="line">		super(message, cause, <span class="built_in">enable</span>Suppression, writableStackTrace);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message, Throwable cause) &#123;</div><div class="line">		super(message, cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message) &#123;</div><div class="line">		super(message);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(Throwable cause) &#123;</div><div class="line">		super(cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建异常类UserAccountException.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.exception;</div><div class="line"></div><div class="line">public class UserAccountException extends RuntimeException &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	public <span class="function"><span class="title">UserAccountException</span></span>() &#123;</div><div class="line">		super();</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message, Throwable cause,</div><div class="line">			boolean <span class="built_in">enable</span>Suppression, boolean writableStackTrace) &#123;</div><div class="line">		super(message, cause, <span class="built_in">enable</span>Suppression, writableStackTrace);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message, Throwable cause) &#123;</div><div class="line">		super(message, cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message) &#123;</div><div class="line">		super(message);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(Throwable cause) &#123;</div><div class="line">		super(cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>向Spring配置文件applicationContext.xml中添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用注解要配置自动扫描的包 --&gt;</div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring.hibernate"</span>&gt;&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure>
<p>修改测试类SpringHibernateTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.hibernate.test;</div><div class="line"></div><div class="line">import java.sql.SQLException;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.hibernate.service.BookShopService;</div><div class="line"></div><div class="line">public class SpringHibernateTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private BookShopService bookShopService = null;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		bookShopService = ctx.getBean(BookShopService.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopService</span></span>() &#123;</div><div class="line">		bookShopService.purchase(<span class="string">"aa"</span>, <span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="built_in">test</span>DataSource() throws SQLException &#123;</div><div class="line">		DataSource dataSource = ctx.getBean(DataSource.class);</div><div class="line">		System.out.println(dataSource.getConnection());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1geVVFOJ" target="_blank" rel="external">获取数据库spring_hibernate</a></p>
<p>在测试类SpringHibernateTest.java中运行testBookShopService方法进行测试。</p>
<p><a href="http://pan.baidu.com/s/1i4VRCNV" target="_blank" rel="external">获取源代码</a></p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>Hibernate的配置文件hibernate.cfg.xml不是必须的，可以在Spring配置文件applicationContext.xml里通过配置来取代它。但是不建议这么使用，因为在Spring配置文件中配置Hibernate提示功能不是很好，而且配置Hibernate插件时不如在hibernate配置文件中配置方便。具体操作根据项目需求来定。</p>
<p>修改applicationContext.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 使用注解要配置自动扫描的包 --&gt;</div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring.hibernate"</span>&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- 1.配置数据源 --&gt;</div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 2.配置Hibernate 的 SessionFactory实例 :通过Spring 提供的LocalSessionFactoryBean进行配置 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"sessionFactory"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</div><div class="line">		&lt;!-- 配置数据源属性 --&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 配置hibernate配置文件的位置及名称 --&gt;</div><div class="line">		&lt;!-- &lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- 使用hibernateProperties属性来配置Hibernate原生的属性 --&gt;</div><div class="line">		&lt;property name=<span class="string">"hibernateProperties"</span>&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/prop&gt;</div><div class="line">				&lt;!-- 测试方法：将这里的<span class="literal">true</span>改成<span class="literal">false</span>，若不显示sql语句（之前显示sql语句），证明配置生效 --&gt;</div><div class="line">				&lt;prop key=<span class="string">"hibernate.show_sql"</span>&gt;<span class="literal">false</span>&lt;/prop&gt;</div><div class="line">				&lt;prop key=<span class="string">"hibernate.format_sql"</span>&gt;<span class="literal">true</span>&lt;/prop&gt;</div><div class="line">				&lt;prop key=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 配置hibernate映射文件的位置及名称，可以使用通配符 --&gt;</div><div class="line">		&lt;property name=<span class="string">"mappingLocations"</span></div><div class="line">			value=<span class="string">"classpath:com/leezp/spring/hibernate/entities/*.hbm.xml"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 3.配置Spring的声明式事务 --&gt;</div><div class="line">	&lt;!-- ①.配置事务管理器 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"transactionManager"</span></div><div class="line">		class=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- ②.配置事务属性，需要事务管理器 --&gt;</div><div class="line">	&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;tx:method name=<span class="string">"get"</span> <span class="built_in">read</span>-only=<span class="string">"true"</span> /&gt;</div><div class="line">			&lt;tx:method name=<span class="string">"*"</span> /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line">	&lt;!-- ③.配置事务切点，并把切点和事务属性关联起来 --&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;!-- com.leezp.spring.hibernate.service包下的所有类，所有方法，参数值任意 --&gt;</div><div class="line">		&lt;aop:pointcut</div><div class="line">			expression=<span class="string">"execution(* com.leezp.spring.hibernate.service.*.*(..))"</span></div><div class="line">			id=<span class="string">"txPointCut"</span> /&gt;</div><div class="line">		&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"txPointCut"</span> /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1mhSxG4C" target="_blank" rel="external">获取源代码</a></p>
<p><strong>参考文献</strong><br><a href="http://blog.csdn.net/tuke_tuke/article/details/49717991" target="_blank" rel="external">hibernate中的映射文件xxx.hbm.xml详解总结</a><br><a href="http://sishuok.com/forum/posts/list/6756.html" target="_blank" rel="external">xxx.hbm.xml文件配置详解，适合保存。</a><br><a href="http://blog.csdn.net/zxygww/article/details/45194445" target="_blank" rel="external">Hibernate 的<generator class="native"></generator>的不同属性含义</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节讲述Spring整合Hibernate。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring整合Hibernate" scheme="http://www.leezp.space/blog/tags/Spring%E6%95%B4%E5%90%88Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（六）Spring中的事务管理</title>
    <link href="http://www.leezp.space/blog/2016/09/03/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/09/03/一起学习Spring4.0（六）/</id>
    <published>2016-09-03T06:10:06.000Z</published>
    <updated>2017-03-08T08:00:11.415Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>本节讲述Spring中的事务管理。</p>
<a id="more"></a>
<h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><p>事务就是一系列的动作，它们被当做一个单独的工作单元，这些动作要么全部完成，要么全部不起作用。用来确保数据的完整性和一致性。<br>事务的四个关键属性（ACID）<br>1.原子性（atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成要么完全不起作用。<br>2.一致性（consistency）：一旦所有事务动作完成，事务就被提交，数据和资源就处于一种满足业务规则的一致性状态中。<br>3.隔离性（isolation）：可能有许多事务会同时处理相同的数据，因此每个事物都应该与其他事务隔离开来，防止数据破坏。<br>4.持久性（durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，通常情况下，事务的结果被写到持久化存储器中。</p>
<h2 id="Spring的事务管理机制"><a href="#Spring的事务管理机制" class="headerlink" title="Spring的事务管理机制"></a>Spring的事务管理机制</h2><p>Spring在不同的事务管理API之上定义了一个抽象层。而应用程序开发人员不必了解底层的事务管理API，就可以使用Spring的事务管理机制。<br>Spring既支持编程式事务管理，也支持声明式的事务管理。<br><strong>编程式事务管理：将事务管理代码嵌入到业务方法中来控制事务的提交和回滚</strong>。在编程式管理事务时，必须在每个事务操作中包含额外的事务管理代码。<br><strong>声明式事务管理</strong>：大多数情况下比编程式事务管理更好用。它<strong>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理</strong>。事务管理作为一种横切关注点，可以通过AOP方法模块化。<strong>Spring通过SpringAOP框架支持声明式事务管理</strong>。</p>
<h3 id="Spring中的事务管理器"><a href="#Spring中的事务管理器" class="headerlink" title="Spring中的事务管理器"></a>Spring中的事务管理器</h3><p>Spring从不同的事务管理API中抽象了一整套的事务机制。开发人员不必了解底层的事务API，就可以利用这些事务机制。<strong>有了这些事务机制，事务管理代码就能独立于特定的事务技术了</strong>。<br>Spring的核心事务管理抽象是 org.springframework.transaction <strong>Interface Platform TransactionManager</strong>管理和封装了一组独立于技术的方法。无论使用Spring的哪种事务管理策略（编程式或声明式），事务管理器都是必须的。</p>
<h3 id="Spring中事务管理器的不同实现"><a href="#Spring中事务管理器的不同实现" class="headerlink" title="Spring中事务管理器的不同实现"></a>Spring中事务管理器的不同实现</h3><p>org.springframework.jdbc.datasource<br><strong>Class DataSource TransactionManager</strong>:在应用程序中只需要处理一个数据源，而且通过JDBC存取。</p>
<p>org.springframework.transaction.jta<br><strong>Class JtaTransactionManager</strong>:在JavaEE应用服务器上用JTA（Java Transaction API）进行事务管理。</p>
<p>org.springframework.orm.hibernate3<br><strong>Class Hibernate TransactionManager</strong>:用Hibernate框架存取数据库。</p>
<p>事务管理器以普通的Bean形式声明在SpringIOC容器中。</p>
<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>一共三步。<br>1.在配置文件中配置事务管理器<br>2.在配置文件中配置注解驱动<br>3.在要应用事务的方法前添加@Transaction。</p>
<p>沿用上一节中的项目。在项目下新建包com.leezp.spring.tx。<br>在该包下新建接口BookShopDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">public interface BookShopDao &#123;</div><div class="line"></div><div class="line">	//根据书号获取书的单价</div><div class="line">	public int findBookPriceByIsbn(String isbn);</div><div class="line">	</div><div class="line">	//更新书的库存，使书号对应的库存 -1</div><div class="line">	public void updateBookStock(String isbn);</div><div class="line">	</div><div class="line">	//更新用户的账户余额：使username的balance - price</div><div class="line">	public void updateUserAccount(String username,int price);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建异常类BookStockException.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">//继承RuntimeException,Generate Constructors from SuperClass添加构造器</div><div class="line">// Add default serial version ID</div><div class="line">public class BookStockException extends RuntimeException &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	public <span class="function"><span class="title">BookStockException</span></span>() &#123;</div><div class="line">		super();</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message, Throwable cause,</div><div class="line">			boolean <span class="built_in">enable</span>Suppression, boolean writableStackTrace) &#123;</div><div class="line">		super(message, cause, <span class="built_in">enable</span>Suppression, writableStackTrace);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message, Throwable cause) &#123;</div><div class="line">		super(message, cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(String message) &#123;</div><div class="line">		super(message);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public BookStockException(Throwable cause) &#123;</div><div class="line">		super(cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建异常类UserAccountException.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">public class UserAccountException extends RuntimeException &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">	public <span class="function"><span class="title">UserAccountException</span></span>() &#123;</div><div class="line">		super();</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message, Throwable cause,</div><div class="line">			boolean <span class="built_in">enable</span>Suppression, boolean writableStackTrace) &#123;</div><div class="line">		super(message, cause, <span class="built_in">enable</span>Suppression, writableStackTrace);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message, Throwable cause) &#123;</div><div class="line">		super(message, cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(String message) &#123;</div><div class="line">		super(message);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public UserAccountException(Throwable cause) &#123;</div><div class="line">		super(cause);</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口BookShopDao的实现类BookShopDaoImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.jdbc.core.JdbcTemplate;</div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">@Repository(<span class="string">"bookShopDao"</span>)</div><div class="line">public class BookShopDaoImpl implements BookShopDao &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int findBookPriceByIsbn(String isbn) &#123;</div><div class="line">		String sql = <span class="string">" select price from book where isbn = ? "</span>;</div><div class="line">		<span class="built_in">return</span> jdbcTemplate.queryForObject(sql, Integer.class, isbn);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateBookStock(String isbn) &#123;</div><div class="line">		// 检查书的库存是否足够，若不够，则抛出异常</div><div class="line">		String sql2 = <span class="string">" select stock from book_stock where isbn = ? "</span>;</div><div class="line">		int stock = jdbcTemplate.queryForObject(sql2, Integer.class, isbn);</div><div class="line">		<span class="keyword">if</span> (stock == 0) &#123;</div><div class="line">			// 定义一个异常类</div><div class="line">			throw new BookStockException(<span class="string">"库存不足"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String sql = <span class="string">" update book_stock set stock= stock -1  where isbn = ? "</span>;</div><div class="line">		jdbcTemplate.update(sql, isbn);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateUserAccount(String username, int price) &#123;</div><div class="line">		// 验证余额是否足够，若不足，则抛出异常</div><div class="line">		String sql2 = <span class="string">" select balance from account where username = ? "</span>;</div><div class="line">		int balance = jdbcTemplate</div><div class="line">				.queryForObject(sql2, Integer.class, username);</div><div class="line">		<span class="keyword">if</span> (balance &lt; price) &#123;</div><div class="line">			throw new UserAccountException(<span class="string">"余额不足"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String sql = <span class="string">" update account set balance=balance - ? where username = ? "</span>;</div><div class="line">		jdbcTemplate.update(sql, price, username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口BookShopService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">public interface BookShopService &#123;</div><div class="line"></div><div class="line">	public void purchase(String username, String isbn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口BookShopService的实现类BookShopServiceImpl.java。注意在要应用事务的方法上添加@Transaction。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line">@Service(<span class="string">"bookShopService"</span>)</div><div class="line">public class BookShopServiceImpl implements BookShopService &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private BookShopDao bookShopDao;</div><div class="line"></div><div class="line">	//添加事务注解 @Transactional</div><div class="line">	@Transactional</div><div class="line">	@Override</div><div class="line">	public void purchase(String username, String isbn) &#123;</div><div class="line">		// 1.获取书的单价</div><div class="line">		int price = bookShopDao.findBookPriceByIsbn(isbn);</div><div class="line">		// 2.更新书的库存 -1</div><div class="line">		bookShopDao.updateBookStock(isbn);</div><div class="line">		// 3.更新用户余额</div><div class="line">		bookShopDao.updateUserAccount(username, price);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新配置db.properties属性文件里的连接字符串。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/spring_demo2</div></pre></td></tr></table></figure>
<p>修改applicationContext.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-package=<span class="string">"com.leezp.spring"</span>&gt;&lt;/context:component-scan&gt;</div></pre></td></tr></table></figure>
<p>向该配置文件中添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 配置事务管理器 --&gt;</div><div class="line">&lt;bean id=<span class="string">"transactionManager"</span></div><div class="line">	class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">	&lt;!-- 添加数据源 --&gt;</div><div class="line">	&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- 启用事务注解 --&gt;</div><div class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> /&gt;</div></pre></td></tr></table></figure>
<p>新建测试类（JUnit Test Case）SpringTransactionTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class SpringTransactionTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private BookShopDao bookShopDao = null;</div><div class="line">	private BookShopService bookShopService=null;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		bookShopDao=ctx.getBean(BookShopDao.class);</div><div class="line">		bookShopService=ctx.getBean(BookShopService.class);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopService</span></span>()&#123;</div><div class="line">		bookShopService.purchase(<span class="string">"AA"</span>, <span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoUpdateUserAccount</span></span>()&#123;</div><div class="line">		bookShopDao.updateUserAccount(<span class="string">"AA"</span>, 200);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoUpdateBookStock</span></span>()&#123;</div><div class="line">		bookShopDao.updateBookStock(<span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoFindPriceByIsbn</span></span>() &#123;</div><div class="line">		System.out.println(bookShopDao.findBookPriceByIsbn(<span class="string">"1001"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1boUbEY7" target="_blank" rel="external">获取源代码</a><br><a href="http://pan.baidu.com/s/1kUJCcYV" target="_blank" rel="external">获取数据库文件</a></p>
<h2 id="其他细节"><a href="#其他细节" class="headerlink" title="其他细节"></a>其他细节</h2><p>事务的属性：<br>1.事务的传播行为 propagation<br>2.事务的隔离级别 isolation<br>3.对哪些异常不回滚 noRollbackFor/rollbackFor<br>4.事务的过期时间 timeout</p>
<h3 id="事务传播属性"><a href="#事务传播属性" class="headerlink" title="事务传播属性"></a>事务传播属性</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>
<p>事务的传播行为可以由传播属性指定。Spring定义了7种传播行为。</p>
<h4 id="Spring支持的事务传播行为"><a href="#Spring支持的事务传播行为" class="headerlink" title="Spring支持的事务传播行为"></a>Spring支持的事务传播行为</h4><p><strong>REQUIRED</strong>(默认)：如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行。</p>
<p><strong>REQUIRES_NEW</strong>：当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起。</p>
<p>SUPPORTS：如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中。</p>
<p>NOT_SUPPORTED：当前的方法不应该运行在事务中，如果有运行的事务，将它挂起。</p>
<p>MANDATORY：当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常。</p>
<p>NEVER：当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常。</p>
<p>NESTED：如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行。</p>
<p>事务的传播属性可以在@Transactional注解的propagation属性中定义。eg:@Transactional(propagation=Propagation.REQUIRED)</p>
<p>在项目中新建接口Cashier.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public interface Cashier &#123;</div><div class="line"></div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口Cashier的实现类CashierImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line">import org.springframework.transaction.annotation.Propagation;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 事务的传播行为（事务之间的调用）</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">@Service(<span class="string">"cashier"</span>)</div><div class="line">public class CashierImpl implements Cashier &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private BookShopService bookShopService;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 当bookService的purchase()方法被另一个事务方法checkout()调用时，</div><div class="line">	 * </div><div class="line">	 * 它默认会在**已有**的事务内运行，这个默认的传播行为就是REQUIRED。</div><div class="line">	 * </div><div class="line">	 * 因此在checkout()方法的开始和终止边界内只有一个事务，</div><div class="line">	 * </div><div class="line">	 * 这个事务只在checkout()方法结束的时候被提交，</div><div class="line">	 * </div><div class="line">	 * 因为用户余额只够买第一本书的，所以最终结果用户一本书都买不了。</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	// 使用propagation 指定事务的传播行为，即当前的事务方法被另一个事务方法调用时，如何使用事务</div><div class="line">	// 默认取值REQUIRED,即使用调用方法的事务</div><div class="line">	// REQUIRES_NEW:使用自己的事务，调用事务的方法的事务被挂起</div><div class="line">	@Transactional(propagation = Propagation.REQUIRED)</div><div class="line">	@Override</div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns) &#123;</div><div class="line">		<span class="keyword">for</span> (String isbn : isbns) &#123;</div><div class="line">			bookShopService.purchase(username, isbn);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改SpringTransactionTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class SpringTransactionTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private BookShopDao bookShopDao = null;</div><div class="line">	private BookShopService bookShopService = null;</div><div class="line">	private Cashier cashier = null;</div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		bookShopDao = ctx.getBean(BookShopDao.class);</div><div class="line">		bookShopService = ctx.getBean(BookShopService.class);</div><div class="line">		cashier = ctx.getBean(Cashier.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testTransactionlPropagation</span></span>() &#123;</div><div class="line">		cashier.checkout(<span class="string">"AA"</span>, Arrays.asList(<span class="string">"1001"</span>, <span class="string">"1002"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopService</span></span>() &#123;</div><div class="line">		bookShopService.purchase(<span class="string">"AA"</span>, <span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoUpdateUserAccount</span></span>() &#123;</div><div class="line">		bookShopDao.updateUserAccount(<span class="string">"AA"</span>, 200);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoUpdateBookStock</span></span>() &#123;</div><div class="line">		bookShopDao.updateBookStock(<span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopDaoFindPriceByIsbn</span></span>() &#123;</div><div class="line">		System.out.println(bookShopDao.findBookPriceByIsbn(<span class="string">"1001"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1pLTT9G3" target="_blank" rel="external">获取源代码</a></p>
<h3 id="并发事务所导致的问题"><a href="#并发事务所导致的问题" class="headerlink" title="并发事务所导致的问题"></a>并发事务所导致的问题</h3><p>当同一个应用程序或者不同应用程序中的多个事务在同一个数据集上并发执行时，可能会出现许多意外的问题。</p>
<p>并发事务所导致的问题可以分为下面三种类型：<br>1.脏读：对于两个事务T1,T2,T1读取了已经被T2更新但还没有被提交的字段。之后，若T2回滚，T1读取的内容就是临时且无效的。<br>2.不可重复读：对于两个事务T1,T2,T1读取了一个字段，然后T2更新了该字段。之后，T1再次读取同一个字段，值就不同了。<br>3.幻读：对于两个事务T1,T2,T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行。之后，如果T1再次读取同一个表，就会多出几行。</p>
<p>事务的隔离级别：<br>使用isolation指定事务的隔离级别，最常用的取值为 READ_COMMITTED：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</p>
<h3 id="超时和只读属性"><a href="#超时和只读属性" class="headerlink" title="超时和只读属性"></a>超时和只读属性</h3><p>由于事务可以在行和表上获得锁，因此长事务会占用资源，并对整体性能产生影响。<br>如果一个事务只读取数据但不做修改，数据库引擎可以对这个事务进行优化。<br><strong>超时事务属性</strong>：事务在强制回滚之前可以保持多久。这样可以防止长期运行的事务占用资源。<br><strong>只读事务属性</strong>：表示这个事务只读取数据但不更新数据，这样可以帮助数据库引擎优化事务。</p>
<p>修改CashierImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line">import org.springframework.transaction.annotation.Isolation;</div><div class="line">import org.springframework.transaction.annotation.Propagation;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 事务的传播行为（事务之间的调用）</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">@Service(<span class="string">"cashier"</span>)</div><div class="line">public class CashierImpl implements Cashier &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private BookShopService bookShopService;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 当bookService的purchase()方法被另一个事务方法checkout()调用时，</div><div class="line">	 * </div><div class="line">	 * 它默认会在**已有**的事务内运行，这个默认的传播行为就是REQUIRED。</div><div class="line">	 * </div><div class="line">	 * 因此在checkout()方法的开始和终止边界内只有一个事务，</div><div class="line">	 * </div><div class="line">	 * 这个事务只在checkout()方法结束的时候被提交，</div><div class="line">	 * </div><div class="line">	 * 因为用户余额只够买第一本书的，所以最终结果用户一本书都买不了。</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	// 1.使用propagation 指定事务的传播行为，即当前的事务方法被另一个事务方法调用时，如何使用事务</div><div class="line">	// 默认取值REQUIRED,即使用调用方法的事务</div><div class="line">	// REQUIRES_NEW:使用自己的事务，调用事务的方法的事务被挂起</div><div class="line">	// 2.使用isolation指定事务的隔离级别，最常用的取值为 READ_COMMITTED</div><div class="line">	// 3.默认情况下Spring的声明式事务对所有的运行时异常进行回滚，也可以通过对应的属性进行设置。</div><div class="line">	// noRollbackFor:指定对哪些异常不进行回滚，通常情况下取默认值即可。</div><div class="line">	// @Transactional(propagation = Propagation.REQUIRED, isolation =</div><div class="line">	// Isolation.READ_COMMITTED, noRollbackFor = &#123; UserAccountException.class &#125;)</div><div class="line">	// 4.使用<span class="built_in">read</span>Only指定事务是否只读，即没有写操作，表示这个事务只读取数据但不更新数据，</div><div class="line">	// 这样可以帮助数据库引擎优化事务，若真的是一个只读取数据库值的方法，应设置 <span class="built_in">read</span>Only=<span class="literal">true</span></div><div class="line">	// 5.timeout:单位 秒，使用timeout指定强制回滚之前事务可以占用的时间。</div><div class="line">	@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED, <span class="built_in">read</span>Only = <span class="literal">false</span>, timeout = 3)</div><div class="line">	@Override</div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns) &#123;</div><div class="line">		<span class="keyword">for</span> (String isbn : isbns) &#123;</div><div class="line">			bookShopService.purchase(username, isbn);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1pLbKMqn" target="_blank" rel="external">获取源代码</a></p>
<h2 id="基于XML文件方式"><a href="#基于XML文件方式" class="headerlink" title="基于XML文件方式"></a>基于XML文件方式</h2><p>新建包com.leezp.spring.tx.xml。复制com.leezp.spring.tx包下的BookShopDao.java、BookStockException.java、UserAccountException.java到com.leezp.spring.tx.xml包。<br>在该包下新建BookShopDaoImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx.xml;</div><div class="line"></div><div class="line">import org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"></div><div class="line">public class BookShopDaoImpl implements BookShopDao &#123;</div><div class="line"></div><div class="line">	private JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>JdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</div><div class="line">		this.jdbcTemplate = jdbcTemplate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int findBookPriceByIsbn(String isbn) &#123;</div><div class="line">		String sql = <span class="string">" select price from book where isbn = ? "</span>;</div><div class="line">		<span class="built_in">return</span> jdbcTemplate.queryForObject(sql, Integer.class, isbn);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateBookStock(String isbn) &#123;</div><div class="line">		// 检查书的库存是否足够，若不够，则抛出异常</div><div class="line">		String sql2 = <span class="string">" select stock from book_stock where isbn = ? "</span>;</div><div class="line">		int stock = jdbcTemplate.queryForObject(sql2, Integer.class, isbn);</div><div class="line">		<span class="keyword">if</span> (stock == 0) &#123;</div><div class="line">			// 定义一个异常类</div><div class="line">			throw new BookStockException(<span class="string">"库存不足"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String sql = <span class="string">" update book_stock set stock= stock -1  where isbn = ? "</span>;</div><div class="line">		jdbcTemplate.update(sql, isbn);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void updateUserAccount(String username, int price) &#123;</div><div class="line">		// 验证余额是否足够，若不足，则抛出异常</div><div class="line">		String sql2 = <span class="string">" select balance from account where username = ? "</span>;</div><div class="line">		int balance = jdbcTemplate</div><div class="line">				.queryForObject(sql2, Integer.class, username);</div><div class="line">		<span class="keyword">if</span> (balance &lt; price) &#123;</div><div class="line">			throw new UserAccountException(<span class="string">"余额不足"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String sql = <span class="string">" update account set balance=balance - ? where username = ? "</span>;</div><div class="line">		jdbcTemplate.update(sql, price, username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建包com.leezp.spring.tx.xml.service。复制com.leezp.spring.tx.xml包下的Cashier.java、BookShopService.java到包com.leezp.spring.tx.xml.service。<br>新建包com.leezp.spring.tx.xml.service.impl。<br>在该包下新建BookShopServiceImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx.xml.service.impl;</div><div class="line"></div><div class="line">import com.leezp.spring.tx.xml.BookShopDao;</div><div class="line">import com.leezp.spring.tx.xml.service.BookShopService;</div><div class="line"></div><div class="line">public class BookShopServiceImpl implements BookShopService &#123;</div><div class="line"></div><div class="line">	private BookShopDao bookShopDao;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>BookShopDao(BookShopDao bookShopDao) &#123;</div><div class="line">		this.bookShopDao = bookShopDao;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void purchase(String username, String isbn) &#123;</div><div class="line">		// 1.获取书的单价</div><div class="line">		int price = bookShopDao.findBookPriceByIsbn(isbn);</div><div class="line">		// 2.更新书的库存 -1</div><div class="line">		bookShopDao.updateBookStock(isbn);</div><div class="line">		// 3.更新用户余额</div><div class="line">		bookShopDao.updateUserAccount(username, price);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建CashierImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class CashierImpl implements Cashier &#123;</div><div class="line"></div><div class="line">	private BookShopService bookShopService;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>BookShopService(BookShopService bookShopService) &#123;</div><div class="line">		this.bookShopService = bookShopService;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void checkout(String username, List&lt;String&gt; isbns) &#123;</div><div class="line">		<span class="keyword">for</span> (String isbn : isbns) &#123;</div><div class="line">			bookShopService.purchase(username, isbn);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建配置文件applicationContext-tx-xml.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring"</span>&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置c3p0数据源 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Spring 的jdbcTemplate --&gt;</div><div class="line">	&lt;bean id=<span class="string">"jdbcTemplate"</span> class=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Bean --&gt;</div><div class="line">	&lt;bean id=<span class="string">"bookShopDao"</span> class=<span class="string">"com.leezp.spring.tx.xml.BookShopDaoImpl"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcTemplate"</span> ref=<span class="string">"jdbcTemplate"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"bookShopService"</span></div><div class="line">		class=<span class="string">"com.leezp.spring.tx.xml.service.impl.BookShopServiceImpl"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"bookShopDao"</span> ref=<span class="string">"bookShopDao"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"cashier"</span> class=<span class="string">"com.leezp.spring.tx.xml.service.impl.CashierImpl"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"bookShopService"</span> ref=<span class="string">"bookShopService"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 1.配置事务管理器 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"transactionManager"</span></div><div class="line">		class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 2.配置事务属性：传播行为、隔离级别、回滚、过期时间 --&gt;</div><div class="line">	&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</div><div class="line">		&lt;tx:attributes&gt;</div><div class="line">			&lt;!-- 根据方法名指定事务的属性 --&gt;</div><div class="line">			&lt;tx:method name=<span class="string">"purchase"</span> propagation=<span class="string">"REQUIRES_NEW"</span> /&gt;</div><div class="line">			&lt;tx:method name=<span class="string">"*"</span> /&gt;</div><div class="line">		&lt;/tx:attributes&gt;</div><div class="line">	&lt;/tx:advice&gt;</div><div class="line"></div><div class="line">	&lt;!-- 3.配置事务切入点（在哪个方法起作用）以及把事务切入点和事务属性关联起来 --&gt;</div><div class="line">	&lt;aop:config&gt;</div><div class="line">		&lt;!-- 设置 任意返回值任意类型任意方法任意参数 --&gt;</div><div class="line">		&lt;aop:pointcut expression=<span class="string">"execution(* com.leezp.spring.tx.xml.service.*.*(..))"</span></div><div class="line">			id=<span class="string">"txPointCut"</span> /&gt;</div><div class="line">		&lt;!-- 用 &lt;aop:advisor&gt;将事务切入点和事务属性关联起来 --&gt;</div><div class="line">		&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"txPointCut"</span> /&gt;</div><div class="line">	&lt;/aop:config&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在包com.leezp.spring.tx.xml下新建SpringTransactionTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.tx.xml;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.tx.xml.service.BookShopService;</div><div class="line">import com.leezp.spring.tx.xml.service.Cashier;</div><div class="line"></div><div class="line">public class SpringTransactionTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private BookShopDao bookShopDao = null;</div><div class="line">	private BookShopService bookShopService = null;</div><div class="line">	private Cashier cashier = null;</div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext-tx-xml.xml"</span>);</div><div class="line">		bookShopDao = ctx.getBean(BookShopDao.class);</div><div class="line">		bookShopService = ctx.getBean(BookShopService.class);</div><div class="line">		cashier = ctx.getBean(Cashier.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testTransactionlPropagation</span></span>() &#123;</div><div class="line">		cashier.checkout(<span class="string">"AA"</span>, Arrays.asList(<span class="string">"1001"</span>, <span class="string">"1002"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBookShopService</span></span>() &#123;</div><div class="line">		bookShopService.purchase(<span class="string">"AA"</span>, <span class="string">"1001"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1i5brkpf" target="_blank" rel="external">获取源代码</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节讲述Spring中的事务管理。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
      <category term="事务" scheme="http://www.leezp.space/blog/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（五）Spring对JDBC的支持</title>
    <link href="http://www.leezp.space/blog/2016/08/27/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/08/27/一起学习Spring4.0（五）/</id>
    <published>2016-08-27T06:02:56.000Z</published>
    <updated>2017-03-06T07:36:17.299Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>本节讲述Spring对JDBC的支持。</p>
<a id="more"></a>
<h2 id="JdbcTemplate-简介"><a href="#JdbcTemplate-简介" class="headerlink" title="JdbcTemplate 简介"></a>JdbcTemplate 简介</h2><p>为了使JDBC更加易于使用，Spring在JDBC API上定义了一个抽象层，以此建立一个JDBC存取框架。</p>
<p>作为Spring JDBC框架的核心，JDBC模板的设计目的是为不同类型的JDBC操作提供模板方法。每个模板方法都能控制整个过程，并允许覆盖过程中的特定任务。通过这种方式，可以在尽可能保留灵活性的情况下，将数据库存取的工作量降到最低。</p>
<h2 id="使用-JdbcTemplate更新数据库"><a href="#使用-JdbcTemplate更新数据库" class="headerlink" title="使用 JdbcTemplate更新数据库"></a>使用 JdbcTemplate更新数据库</h2><p>用sql语句和参数更新数据库：<br>update</p>
<p>public int update(String sql,Object… args) throw DataAccessException</p>
<p>批量更新数据库<br>batchUpdate</p>
<p>public int[] batchUpdate(String sql,List<object[]> batchArgs)</object[]></p>
<h2 id="使用-JdbcTemplate查询数据库"><a href="#使用-JdbcTemplate查询数据库" class="headerlink" title="使用 JdbcTemplate查询数据库"></a>使用 JdbcTemplate查询数据库</h2><p>查询单行<br>queryForObject</p>
<p>public <t> T queryForObject(String sql,ParameterizedRowMapper<t> n,Object… args)throws DataAccessException</t></t></p>
<p>便利的BeanPropertyRowMappper实现<br>org.springframework.jdbc.core.simple<br>Class ParameterizedBeanPropertyRowMapper<t></t></p>
<p>java.lang.Object<br>BeanPropertyRowMapper<br>ParameterizedBeanPropertyRowMapper</p>
<p>查询多行<br>query</p>
<p>public <t> List<t> query(String sql,ParameterizedRowMapper<t> n,Object… args) throws DataAccessException</t></t></t></p>
<p>单值查询<br>queryForObject</p>
<p>public <t> T queryForObject(String sql,Class<t> requiredType,Object… args) throws DataAccessException</t></t></p>
<h2 id="简化JDBC模板查询"><a href="#简化JDBC模板查询" class="headerlink" title="简化JDBC模板查询"></a>简化JDBC模板查询</h2><p>每次使用都创建一个JdbcTemplate的新实例，这种做法效率很低下。<br><strong>JdbcTemplate类被设计成为线程安全的</strong>，所以可以在IOC容器中声明它的单个实例，并将这个实例注入到所有的DAO实例中。<br>JdbcTemplate 也利用了Java 1.5 的特定（自动装箱，泛型，可变长度等）来简化开发。<br>SpringJDBC框架还提供了一个JdbcDaoSupport类来简化DAO实现。该类声明了jdbcTemplate属性，它可以从IOC容器中注入，或者自动从数据源中创建。<br>不推荐使用 JdbcDaoSupport，而推荐直接使用 JdbcTemplate作为Dao类的成员变量。</p>
<p>新建项目spring-03。新建文件夹lib。导入如下的包并build path。<br><a href="http://pan.baidu.com/s/1nuIlQlV" target="_blank" rel="external">c3p0-0.9.1.2.jar</a><br><a href="http://pan.baidu.com/s/1c1T0WA" target="_blank" rel="external">com.springsource.net.sf.cglib-2.2.0.jar</a><br><a href="http://pan.baidu.com/s/1slybhqH" target="_blank" rel="external">com.springsource.org.aopalliance-1.0.0.jar</a><br><a href="http://pan.baidu.com/s/1pKAGiwF" target="_blank" rel="external">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</a><br>commons-logging-1.2.jar<br>mysql-connector-java-5.1.22-bin.jar<br>spring-aop-4.0.4.RELEASE.jar<br>spring-aspects-4.0.4.RELEASE.jar<br>spring-beans-4.0.4.RELEASE.jar<br>spring-context-4.0.4.RELEASE.jar<br>spring-core-4.0.4.RELEASE.jar<br>spring-expression-4.0.4.RELEASE.jar<br>spring-jdbc-4.0.4.RELEASE.jar<br>spring-orm-4.0.4.RELEASE.jar<br>spring-tx-4.0.4.RELEASE.jar<br>spring-web-4.0.4.RELEASE.jar<br>spring-webmvc-4.0.4.RELEASE.jar<br><img src="/blog/images/img/160827/JdbcTemplate_1.png" alt=""></p>
<p>在该项目下新建包com.leezp.spring.jdbc。<br>在该包下新建Department.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">public class Department &#123;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Department [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在该包下新建Employee.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">public class Employee &#123;</div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	private String lastName;</div><div class="line"></div><div class="line">	private String email;</div><div class="line"></div><div class="line">	private Department department;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Id(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getLastname</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> lastName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Lastname(String lastname) &#123;</div><div class="line">		this.lastName = lastname;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getEmail</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Email(String email) &#123;</div><div class="line">		this.email = email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Department <span class="function"><span class="title">getDepartment</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Department(Department department) &#123;</div><div class="line">		this.department = department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Employee [id="</span> + id + <span class="string">", lastname="</span> + lastName + <span class="string">", email="</span></div><div class="line">				+ email + <span class="string">", department="</span> + department + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建EmployeeDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.JdbcTemplate;</div><div class="line">import org.springframework.jdbc.core.RowMapper;</div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 注解方式使用JdbcTemplate</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">@Repository</div><div class="line">public class EmployeeDao &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	private JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">	public Employee get(Integer id) &#123;</div><div class="line">		String sql = <span class="string">" select id,last_name lastName,email from employees where id = ? "</span>;</div><div class="line">		RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Employee.class);</div><div class="line">		Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, id);</div><div class="line"></div><div class="line">		<span class="built_in">return</span> employee;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建DepartmentDao.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.RowMapper;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">import com.leezp.spring.jdbc.Department;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 不推荐使用 JdbcDaoSupport，而推荐直接使用 JdbcTemplate作为Dao类的成员变量</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">@Repository</div><div class="line">public class DepartmentDao extends JdbcDaoSupport &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	public void <span class="built_in">set</span>DataSource2(DataSource dataSource) &#123;</div><div class="line">		<span class="built_in">set</span>DataSource(dataSource);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Department get(Integer id) &#123;</div><div class="line">		String sql = <span class="string">" select id,dept_name name from departments where id=? "</span>;</div><div class="line">		RowMapper&lt;Department&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Department.class);</div><div class="line">		<span class="built_in">return</span> getJdbcTemplate().queryForObject(sql, rowMapper, id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建db.properties属性文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jdbc.user=root</div><div class="line">jdbc.password=root</div><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/spring_demo</div><div class="line"></div><div class="line">jdbc.initPoolSize=5</div><div class="line">jdbc.maxPoolSize=10</div></pre></td></tr></table></figure>
<p>新建applicationContext.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring.jdbc"</span>&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- 导入资源文件 --&gt;</div><div class="line">	&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置c3p0数据源 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"user"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.user&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.password&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.jdbcUrl&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.driverClass&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">		&lt;property name=<span class="string">"initialPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.initPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"<span class="variable">$&#123;jdbc.maxPoolSize&#125;</span>"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Spring 的jdbcTemplate --&gt;</div><div class="line">	&lt;bean id=<span class="string">"jdbcTemplate"</span> class=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>在该包下new-&gt; JUnit Test Case-&gt; 新建一个JDBCTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.JdbcTemplate;</div><div class="line">import org.springframework.jdbc.core.RowMapper;</div><div class="line"></div><div class="line">public class JDBCTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private JdbcTemplate jdbcTemplate;</div><div class="line">	private EmployeeDao employeeDao;</div><div class="line">	private DepartmentDao departmentDao;</div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		jdbcTemplate = (JdbcTemplate) ctx.getBean(<span class="string">"jdbcTemplate"</span>);</div><div class="line">		employeeDao = ctx.getBean(EmployeeDao.class);</div><div class="line">		departmentDao = ctx.getBean(DepartmentDao.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 可以 双击方法名，使其变蓝，右键，run as-&gt; JUnit Test 单独运行这一个测试方法</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testDepartmentDao</span></span>() &#123;</div><div class="line">		System.out.println(departmentDao.get(1));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testEmployeeDao</span></span>() &#123;</div><div class="line">		System.out.println(employeeDao.get(1));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 获取单个Bean的值，或做统计查询</div><div class="line">	 * </div><div class="line">	 * queryForObject(String sql, Class&lt;Long&gt; requiredType)</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForObject2</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" select count(id) from employees "</span>;</div><div class="line">		long count = jdbcTemplate.queryForObject(sql, Long.class);</div><div class="line"></div><div class="line">		System.out.println(count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 查到实体类的集合</div><div class="line">	 * </div><div class="line">	 * query(sql, rowMapper, args)</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForList</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" SELECT id,last_name lastName,email,dept_id From employees where id&gt;? "</span>;</div><div class="line">		RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Employee.class);</div><div class="line">		List&lt;Employee&gt; employees = jdbcTemplate.query(sql, rowMapper, 5);</div><div class="line">		System.out.println(employees);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 从数据库中获取一条记录，实际得到对应的一个对象</div><div class="line">	 * </div><div class="line">	 * 注意不是调用 queryForObject(String sql, Class&lt;Employee&gt; requiredType,</div><div class="line">	 * Object...args)方法</div><div class="line">	 * </div><div class="line">	 * 而是调用queryForObject(sql, rowMapper, args)方法。</div><div class="line">	 * </div><div class="line">	 * 1.其中的 RowMapper 指定如何去映射结果集的行，常用的实现类为BeanPropertyRowMapper。</div><div class="line">	 * </div><div class="line">	 * 2.使用SQL中列的别名完成列名和类的属性名的映射。例如 last_name lastName。</div><div class="line">	 * </div><div class="line">	 * 3.不支持级联属性，JdbcTemplate到底是一个JDBC的小工具，而不是ORM框架。</div><div class="line">	 */</div><div class="line">	// 结果：Employee [id=1, lastname=Tom, email=tom@qq.com, department=null]</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForObject</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" SELECT id,last_name lastName,email,dept_id as \"department.id\" From employees where id=? "</span>;</div><div class="line">		// import org.springframework.jdbc.core.RowMapper;</div><div class="line">		RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Employee.class);</div><div class="line">		Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);</div><div class="line">		System.out.println(employee);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 执行批量insert/update/delete</div><div class="line">	 * </div><div class="line">	 * 最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个Object的数组，那么多条不就需要多个Object的数组吗</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBatchUpdate</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" INSERT INTO employees(last_name,email,dept_id) values(?,?,?) "</span>;</div><div class="line">		List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"AA"</span>, <span class="string">"AA@qq.com"</span>, 1 &#125;);</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"BB"</span>, <span class="string">"BB@qq.com"</span>, 2 &#125;);</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"CC"</span>, <span class="string">"CC@qq.com"</span>, 3 &#125;);</div><div class="line">		jdbcTemplate.batchUpdate(sql, batchArgs);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 执行 INSERT,UPDATE,DELETE</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testUpdate</span></span>() &#123;</div><div class="line">		String sql = <span class="string">"UPDATE employees SET LAST_NAME=? where ID =? "</span>;</div><div class="line">		jdbcTemplate.update(sql, <span class="string">"Jack"</span>, 5);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="built_in">test</span>DataSource() throws SQLException &#123;</div><div class="line">		DataSource dataSource = ctx.getBean(DataSource.class);</div><div class="line">		System.out.println(dataSource.getConnection());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1hsp6cTI" target="_blank" rel="external">获取源代码</a><br><a href="http://pan.baidu.com/s/1eS1L5ku" target="_blank" rel="external">获取数据库文件</a></p>
<h2 id="在JDBC模板中使用具名参数"><a href="#在JDBC模板中使用具名参数" class="headerlink" title="在JDBC模板中使用具名参数"></a>在JDBC模板中使用具名参数</h2><p>在经典的JDBC用法中，SQL参数是用占位符？表示，并且受到位置的限制。定位参数的问题在于，一旦参数的顺序发生变化，就必须改变参数绑定。<br>在SpringJDBC框架中，绑定SQL参数的另一种选择是使用具名参数(named parameter)。<br>具名参数：SQL按名称（以冒号开头）而不是按位置进行指定。具名参数更易于维护，也提升了可读性。具名参数由框架类在运行时用占位符取代。<br>具名参数只在<strong>NamedParameterJdbcTemplate</strong>中得到支持。</p>
<p>修改applicationContext.xml配合文件。增加以下内容。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 配置namedParameterJdbcTemplate,该对象可以使用具名参数，其没有无参数的构造器，所以必须为其构造器指定参数 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"namedParameterJdbcTemplate"</span></div><div class="line">		class=<span class="string">"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"</span>&gt;</div><div class="line">		&lt;constructor-arg ref=<span class="string">"dataSource"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>修改Employee.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">public class Employee &#123;</div><div class="line">	private Integer deptId;</div><div class="line"></div><div class="line">	private String lastName;</div><div class="line"></div><div class="line">	private String email;</div><div class="line"></div><div class="line">	private Department department;</div><div class="line"></div><div class="line">	public Integer <span class="function"><span class="title">getDeptId</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> deptId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>DeptId(Integer deptId) &#123;</div><div class="line">		this.deptId = deptId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getLastName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> lastName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>LastName(String lastName) &#123;</div><div class="line">		this.lastName = lastName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getLastname</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> lastName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Lastname(String lastname) &#123;</div><div class="line">		this.lastName = lastname;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getEmail</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Email(String email) &#123;</div><div class="line">		this.email = email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Department <span class="function"><span class="title">getDepartment</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Department(Department department) &#123;</div><div class="line">		this.department = department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Employee [deptId="</span> + deptId + <span class="string">", lastName="</span> + lastName</div><div class="line">				+ <span class="string">", email="</span> + email + <span class="string">", department="</span> + department + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改JDBCTest.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.jdbc;</div><div class="line"></div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line">import org.springframework.jdbc.core.JdbcTemplate;</div><div class="line">import org.springframework.jdbc.core.RowMapper;</div><div class="line">import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;</div><div class="line">import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</div><div class="line">import org.springframework.jdbc.core.namedparam.SqlParameterSource;</div><div class="line"></div><div class="line">public class JDBCTest &#123;</div><div class="line"></div><div class="line">	private ApplicationContext ctx = null;</div><div class="line">	private JdbcTemplate jdbcTemplate;</div><div class="line">	private EmployeeDao employeeDao;</div><div class="line">	private DepartmentDao departmentDao;</div><div class="line">	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;</div><div class="line">	&#123;</div><div class="line">		ctx = new ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">		jdbcTemplate = (JdbcTemplate) ctx.getBean(<span class="string">"jdbcTemplate"</span>);</div><div class="line">		employeeDao = ctx.getBean(EmployeeDao.class);</div><div class="line">		departmentDao = ctx.getBean(DepartmentDao.class);</div><div class="line">		namedParameterJdbcTemplate = ctx</div><div class="line">				.getBean(NamedParameterJdbcTemplate.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 使用具名参数时，可以使用update(String sql, SqlParameterSource paramSource)方法进行更新操作</div><div class="line">	 * 1.SQL语句中的参数名和类的属性一致</div><div class="line">	 * 2.使用SqlParameterSource 的 BeanPropertySqlParameterSource实现类作为参数。</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testNamedParameterJdbcTemplate2</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" INSERT INTO employees(last_name,email,dept_id) values(:lastName,:email,:deptId) "</span>;</div><div class="line"></div><div class="line">		Employee employee = new Employee();</div><div class="line">		employee.setLastname(<span class="string">"ABC"</span>);</div><div class="line">		employee.setEmail(<span class="string">"lee@leezp.space"</span>);</div><div class="line">		employee.setDeptId(3);</div><div class="line"></div><div class="line">		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(</div><div class="line">				employee);</div><div class="line">		namedParameterJdbcTemplate.update(sql, paramSource);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 优点：参数多的时候可以为参数起名字，便于维护</div><div class="line">	 * </div><div class="line">	 * 缺点：较为繁琐</div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testNamedParameterJdbcTemplate</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" INSERT INTO employees(last_name,email,dept_id) values(:ln,:email,:deptid) "</span>;</div><div class="line"></div><div class="line">		Map&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</div><div class="line">		paramMap.put(<span class="string">"ln"</span>, <span class="string">"FF"</span>);</div><div class="line">		paramMap.put(<span class="string">"email"</span>, <span class="string">"ff@leezp.space"</span>);</div><div class="line">		paramMap.put(<span class="string">"deptid"</span>, 2);</div><div class="line"></div><div class="line">		namedParameterJdbcTemplate.update(sql, paramMap);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 可以 双击方法名，使其变蓝，右键，run as-&gt; JUnit Test 单独运行这一个测试方法</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testDepartmentDao</span></span>() &#123;</div><div class="line">		System.out.println(departmentDao.get(1));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testEmployeeDao</span></span>() &#123;</div><div class="line">		System.out.println(employeeDao.get(1));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 获取单个Bean的值，或做统计查询</div><div class="line">	 * </div><div class="line">	 * queryForObject(String sql, Class&lt;Long&gt; requiredType)</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForObject2</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" select count(id) from employees "</span>;</div><div class="line">		long count = jdbcTemplate.queryForObject(sql, Long.class);</div><div class="line"></div><div class="line">		System.out.println(count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 查到实体类的集合</div><div class="line">	 * </div><div class="line">	 * query(sql, rowMapper, args)</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForList</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" SELECT id,last_name lastName,email,dept_id From employees where id&gt;? "</span>;</div><div class="line">		RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Employee.class);</div><div class="line">		List&lt;Employee&gt; employees = jdbcTemplate.query(sql, rowMapper, 5);</div><div class="line">		System.out.println(employees);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 从数据库中获取一条记录，实际得到对应的一个对象</div><div class="line">	 * </div><div class="line">	 * 注意不是调用 queryForObject(String sql, Class&lt;Employee&gt; requiredType,</div><div class="line">	 * Object...args)方法</div><div class="line">	 * </div><div class="line">	 * 而是调用queryForObject(sql, rowMapper, args)方法。</div><div class="line">	 * </div><div class="line">	 * 1.其中的 RowMapper 指定如何去映射结果集的行，常用的实现类为BeanPropertyRowMapper。</div><div class="line">	 * </div><div class="line">	 * 2.使用SQL中列的别名完成列名和类的属性名的映射。例如 last_name lastName。</div><div class="line">	 * </div><div class="line">	 * 3.不支持级联属性，JdbcTemplate到底是一个JDBC的小工具，而不是ORM框架。</div><div class="line">	 */</div><div class="line">	// 结果：Employee [id=1, lastname=Tom, email=tom@qq.com, department=null]</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testQueryForObject</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" SELECT id,last_name lastName,email,dept_id as \"department.id\" From employees where id=? "</span>;</div><div class="line">		// import org.springframework.jdbc.core.RowMapper;</div><div class="line">		RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(</div><div class="line">				Employee.class);</div><div class="line">		Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);</div><div class="line">		System.out.println(employee);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 执行批量insert/update/delete</div><div class="line">	 * </div><div class="line">	 * 最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个Object的数组，那么多条不就需要多个Object的数组吗</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testBatchUpdate</span></span>() &#123;</div><div class="line">		String sql = <span class="string">" INSERT INTO employees(last_name,email,dept_id) values(?,?,?) "</span>;</div><div class="line">		List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"AA"</span>, <span class="string">"AA@qq.com"</span>, 1 &#125;);</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"BB"</span>, <span class="string">"BB@qq.com"</span>, 2 &#125;);</div><div class="line">		batchArgs.add(new Object[] &#123; <span class="string">"CC"</span>, <span class="string">"CC@qq.com"</span>, 3 &#125;);</div><div class="line">		jdbcTemplate.batchUpdate(sql, batchArgs);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 执行 INSERT,UPDATE,DELETE</div><div class="line">	 */</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testUpdate</span></span>() &#123;</div><div class="line">		String sql = <span class="string">"UPDATE employees SET LAST_NAME=? where ID =? "</span>;</div><div class="line">		jdbcTemplate.update(sql, <span class="string">"Jack"</span>, 5);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void <span class="built_in">test</span>DataSource() throws SQLException &#123;</div><div class="line">		DataSource dataSource = ctx.getBean(DataSource.class);</div><div class="line">		System.out.println(dataSource.getConnection());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1c1K6deK" target="_blank" rel="external">获取源代码</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节讲述Spring对JDBC的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（四）Spring AOP</title>
    <link href="http://www.leezp.space/blog/2016/08/20/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/08/20/一起学习Spring4.0（四）/</id>
    <published>2016-08-20T06:07:16.000Z</published>
    <updated>2017-03-01T04:34:06.179Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>本节讲述Spring AOP（面向切面编程）。</p>
<a id="more"></a>
<h2 id="代理设计模式的原理"><a href="#代理设计模式的原理" class="headerlink" title="代理设计模式的原理"></a>代理设计模式的原理</h2><p><strong>使用一个代理将对象包装起来</strong>，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p>
<p>新建项目 spring-02。在项目下新建包com.leezp.spring.aop.helloworld。<br>在该包下新建ArithmeticCalculator.java接口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.helloworld;</div><div class="line"></div><div class="line">public interface ArithmeticCalculator &#123;</div><div class="line">	int add(int i, int j);</div><div class="line"></div><div class="line">	int sub(int i, int j);</div><div class="line"></div><div class="line">	int mul(int i, int j);</div><div class="line"></div><div class="line">	int div(int i, int j);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口的实现类ArithmeticCalculatorImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.helloworld;</div><div class="line"></div><div class="line">public class ArithmeticCalculatorImpl implements ArithmeticCalculator &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int add(int i, int j) &#123;</div><div class="line">		int res = i + j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int sub(int i, int j) &#123;</div><div class="line">		int res = i - j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int mul(int i, int j) &#123;</div><div class="line">		int res = i * j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int div(int i, int j) &#123;</div><div class="line">		int res = i / j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建动态代理类ArithmeticCalculatorLoggingProxy.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.helloworld;</div><div class="line"></div><div class="line">import java.lang.reflect.InvocationHandler;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">import java.lang.reflect.Proxy;</div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 动态代理</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class ArithmeticCalculatorLoggingProxy &#123;</div><div class="line">	// 要代理的对象</div><div class="line">	private ArithmeticCalculator target;</div><div class="line"></div><div class="line">	public ArithmeticCalculatorLoggingProxy(ArithmeticCalculator target) &#123;</div><div class="line">		this.target = target;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public ArithmeticCalculator <span class="function"><span class="title">getLoggingproxy</span></span>() &#123;</div><div class="line">		ArithmeticCalculator proxy = null;</div><div class="line"></div><div class="line">		// 代理对象由哪一个类加载器负责加载</div><div class="line">		ClassLoader loader = target.getClass().getClassLoader();</div><div class="line">		// 代理对象的类型，即其中有哪些方法</div><div class="line">		Class[] interfaces = new Class[] &#123; ArithmeticCalculator.class &#125;;</div><div class="line">		// 当调用代理对象其中的方法时，该执行的代码</div><div class="line">		InvocationHandler h = new <span class="function"><span class="title">InvocationHandler</span></span>() &#123;</div><div class="line">			/**</div><div class="line">			 * proxy：正在返回的那个代理对象。一般情况下，在invoke方法中都不使用该对象或该对象的方法，</div><div class="line">			 * 防止出现再次调用invoke函数的死循环 ；method:正在被调用的方法 ；args:调用方法时，传入的参数</div><div class="line">			 */</div><div class="line">			@Override</div><div class="line">			public Object invoke(Object proxy, Method method, Object[] args)</div><div class="line">					throws Throwable &#123;</div><div class="line">				String methodName = method.getName();</div><div class="line">				// 日志</div><div class="line">				System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" begins with "</span></div><div class="line">						+ Arrays.asList(args));</div><div class="line">				// 执行方法</div><div class="line">				Object res = method.invoke(target, args);</div><div class="line">				// 日志</div><div class="line">				System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends with "</span></div><div class="line">						+ res);</div><div class="line">				<span class="built_in">return</span> res;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		proxy = (ArithmeticCalculator) Proxy.newProxyInstance(loader,</div><div class="line">				interfaces, h);</div><div class="line"></div><div class="line">		<span class="built_in">return</span> proxy;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>新建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.aop.helloworld;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*</div><div class="line">		 * ArithmeticCalculator ari = null; ari = new</div><div class="line">		 * ArithmeticCalculatorImpl();</div><div class="line">		 */</div><div class="line"></div><div class="line">		ArithmeticCalculator target = new ArithmeticCalculatorImpl();</div><div class="line">		ArithmeticCalculator proxy = new ArithmeticCalculatorLoggingProxy(</div><div class="line">				target).getLoggingproxy();</div><div class="line"></div><div class="line">		System.out.println(proxy.getClass().getName());// 打印代理名称</div><div class="line">		</div><div class="line">		int res = proxy.add(1, 2);</div><div class="line">		System.out.println(res);</div><div class="line"></div><div class="line">		res = proxy.div(4, 2);</div><div class="line">		System.out.println(res);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$Proxy0</span></div><div class="line">The method add begins with [1, 2]</div><div class="line">The method add ends with 3</div><div class="line">3</div><div class="line">The method div begins with [4, 2]</div><div class="line">The method div ends with 2</div><div class="line">2</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1mhInIRY" target="_blank" rel="external">获取源代码</a></p>
<h2 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP 简介</h2><p>AOP(Aspect-Oriented Programming,<strong>面向切面编程</strong>):是一种新的方法论，是对传统OOP(Object-Oriented Programming,面向对象编程)的补充。</p>
<p>AOP的主要编程对象是<strong>切面</strong>(aspect)，而<strong>切面模块化横切关注点</strong>。</p>
<p>在应用AOP编程时，仍然需要<strong>定义公共功能</strong>，但可以明确的定义这个功能在哪里，以什么方式应用，<strong>并且不必修改受影响的类</strong>。这样一来<strong>横切关注点就被模块化到特殊的对象（切面）</strong>里。</p>
<p>AOP的好处：<br>1.每个事物逻辑位于一个位置，代码不分散，便于维护和升级。<br>2.业务模块更简洁，只包含核心业务代码。</p>
<h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2><p>切面(Aspect)：<strong>横切关注点（跨越应用程序多个模块的功能）被模块化的特殊对象</strong>。</p>
<p>通知(Active)：<strong>切面必须要完成的工作</strong>。</p>
<p>目标(Target)：<strong>被通知的对象</strong>。</p>
<p>代理(Proxy)：<strong>向目标对象应用通知之后创建的对象</strong>。</p>
<p>连接点(Joinpoint)：<strong>程序执行的某个特定位置:如类某个方法调用前、调用后、方法抛出异常后等</strong>。连接点由两个信息确定：<strong>方法</strong>表示的程序执行点。相对点表示<strong>方位</strong>。例如ArithmeticCalculator#add()方法执行前的连接点执行点为ArithmeticCalculator#add()；方位为该方法执行前的位置。</p>
<p>切点(pointcut)：<strong>每个类都拥有多个连接点</strong>：例如ArithmeticCalculator的所有方法实际上都是连接点，即<strong>连接点是程序类中客观存在的事务</strong>。<strong>AOP通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件</strong>。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p>
<h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><p>Java社区里最完整最流行的AOP框架。</p>
<p>在Spring2.0以上版本中，可以使用基于AspectJ注解或基于XML配置的AOP。</p>
<h3 id="在Spring中启用AspectJ注解支持"><a href="#在Spring中启用AspectJ注解支持" class="headerlink" title="在Spring中启用AspectJ注解支持"></a>在Spring中启用AspectJ注解支持</h3><p>要在Spring应用中使用AspectJ注解，<strong>必须在classpath下包含AspectJ类库</strong>：<a href="http://pan.baidu.com/s/1cEK7UI" target="_blank" rel="external">aopalliance.jar</a>、<a href="http://pan.baidu.com/s/1gfKFWwb" target="_blank" rel="external">aspectj.weaver.jar</a>和spring-aspects.jar。</p>
<p><strong>将aop Schema添加到<beans>根元素中</beans></strong>。</p>
<p>要在Spring IOC容器中启动AspectJ注解支持，只要<strong>在Bean配置文件中定义一个空的XML元素<aop:aspectj-autoproxy></aop:aspectj-autoproxy></strong>。</p>
<p>当Spring IOC容器侦测到Bean配置文件中的<aop:aspectj-autoproxy>元素时，会自动为与AspectJ切面匹配的Bean创建代理。</aop:aspectj-autoproxy></p>
<p>将下图的jar包添加到lib文件夹下并build path。<br><img src="/blog/images/img/160820/aop_1.png" alt=""></p>
<p><strong>要在Spring中声明AspectJ切面，只需要在IOC容器中将切面声明为Bean实例</strong>。当在Spring IOC容器中初始化AspectJ切面之后，Spring IOC 容器就会为那些与AspectJ切面相匹配的Bean创建代理。</p>
<p><strong>在AspectJ注解中，切面只是一个带有@Aspect注解的Java类</strong>。</p>
<p>新建包com.leezp.spring.aop.impl。<br>在该包下新建接口ArithmeticCalculator.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.impl;</div><div class="line"></div><div class="line">public interface ArithmeticCalculator &#123;</div><div class="line">	int add(int i, int j);</div><div class="line"></div><div class="line">	int sub(int i, int j);</div><div class="line"></div><div class="line">	int mul(int i, int j);</div><div class="line"></div><div class="line">	int div(int i, int j);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建接口的实现类ArithmeticCalculatorImpl.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.impl;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class ArithmeticCalculatorImpl implements ArithmeticCalculator &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int add(int i, int j) &#123;</div><div class="line">		int res = i + j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int sub(int i, int j) &#123;</div><div class="line">		int res = i - j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int mul(int i, int j) &#123;</div><div class="line">		int res = i * j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public int div(int i, int j) &#123;</div><div class="line">		int res = i / j;</div><div class="line">		<span class="built_in">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建applicationContext.xml并添加beans、aop、context节点。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置自动扫描的包 --&gt;</div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring.aop.impl"</span>&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>新建Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.impl;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);</div><div class="line">		ArithmeticCalculator arithmeticCalculator = ctx</div><div class="line">				.getBean(ArithmeticCalculator.class);</div><div class="line"></div><div class="line">		int res = arithmeticCalculator.add(3, 4);</div><div class="line">		System.out.println(res);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">7</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1o88W2aI" target="_blank" rel="external">获取源代码</a></p>
<p>新建一个日志处理的切面LoggingAspect.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.impl;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.aspectj.lang.JoinPoint;</div><div class="line">import org.aspectj.lang.annotation.After;</div><div class="line">import org.aspectj.lang.annotation.Aspect;</div><div class="line">import org.aspectj.lang.annotation.Before;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">//把这个类声明为一个切面：需要1.把该类放入到IOC容器中@Component;2.声明为一个切面@Aspect</div><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class LoggingAspect &#123;</div><div class="line"></div><div class="line">	// 声明该方法是一个前置通知：在目标方法开始之前执行</div><div class="line">	// 执行（public 返回值 包名 接口名 方法（参数））</div><div class="line">	// **还需要在配置文件中加配置&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;使@Before这个注解起作用**</div><div class="line">	// @Before作用：当调用一个目标方法和声明的注解相匹配的时候，</div><div class="line">	// aop框架自动为那个方法所在的类生成一个代理对象，</div><div class="line">	// 在调用目标方法之前，将这句话加进去。</div><div class="line">	// .*代表接口里的所有方法</div><div class="line">	@Before(<span class="string">"execution(public int com.leezp.spring.aop.impl.ArithmeticCalculator.*(int,int))"</span>)</div><div class="line">	public void beforeMethod(JoinPoint joinPoint) &#123;</div><div class="line">		// 连接点 JoinPoint</div><div class="line">		String methodName = joinPoint.getSignature().getName();</div><div class="line">		List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" begins with"</span> + args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 后置通知：在目标方法执行后（无论是否发生异常）执行的通知</div><div class="line">	// 注意：在后置通知中还不能访问目标方法的执行结果，要在**返回通知**里访问。</div><div class="line">	@After(<span class="string">"execution(public int com.leezp.spring.aop.impl.ArithmeticCalculator.*(int,int))"</span>)</div><div class="line">	public void afterMethod(JoinPoint joinPoint) &#123;</div><div class="line">		String methodName = joinPoint.getSignature().getName();</div><div class="line">		System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 applicationContext.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置自动扫描的包 --&gt;</div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.leezp.spring.aop.impl"</span>&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- 在配置文件中加配置使@Before起作用 --&gt;</div><div class="line">	&lt;!-- 使AspectJ注解起作用:自动为匹配的类生成代理对象 --&gt;</div><div class="line">	&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</div><div class="line">	</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>修改Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.aop.impl;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);</div><div class="line">		ArithmeticCalculator arithmeticCalculator = ctx</div><div class="line">				.getBean(ArithmeticCalculator.class);</div><div class="line"></div><div class="line">		int res = arithmeticCalculator.add(3, 4);</div><div class="line">		System.out.println(res);</div><div class="line"></div><div class="line">		res = arithmeticCalculator.div(12, 0);</div><div class="line">		System.out.println(res);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</div><div class="line">The method add begins with[3, 4]</div><div class="line">The method add ends</div><div class="line">7</div><div class="line">The method div begins with[12, 0]	at com.leezp.spring.aop.impl.ArithmeticCalculatorImpl.div(ArithmeticCalculatorImpl.java:28)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:601)</div><div class="line">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)</div><div class="line">	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class="line">	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:43)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class="line">	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class="line">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)</div><div class="line">	at $Proxy8.div(Unknown Source)</div><div class="line">	at com.leezp.spring.aop.impl.Main.main(Main.java:17)</div><div class="line"></div><div class="line">The method div ends</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1nuY0JwP" target="_blank" rel="external">获取源代码</a></p>
<h2 id="Spring-AOP配置总结"><a href="#Spring-AOP配置总结" class="headerlink" title="Spring AOP配置总结"></a>Spring AOP配置总结</h2><p>1.加入jar包。<br>com.springsource.org.aopalliance-1.0.0.jar<br>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>commons-logging-1.2.jar<br>spring-aop-4.0.4.RELEASE.jar<br>spring-aspects-4.0.4.RELEASE.jar<br>spring-beans-4.0.4.RELEASE.jar<br>spring-context-4.0.4.RELEASE.jar<br>spring-core-4.0.4.RELEASE.jar<br>spring-expression-4.0.4.RELEASE.jar<br>2.在配置文件中加入aop的命名空间。<br>3.基于注解的方式<br>①.在配置文件中加入如下配置：<br>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;<br>②.把横切关注点的代码抽象到切面的类中。<br>i.切面首先是一个IOC中的bean，即加入@Component注解<br>ii.切面还需要加入@Aspect注解<br>③.在类中声明各种通知：<br><strong>通知是标注有某种注解的简单的Java方法</strong>。<br><strong>一个切面可以包括一个或多个通知</strong>。<br>AspectJ支持5种类型的通知注解：<br><strong>——@Before</strong>：前置通知，在方法执行之前执行<br><strong>——@After</strong>：后置通知，在方法执行之后执行（连接点返回结果或者抛异常的时候，都执行）<br><strong>——@AfterRunning</strong>：返回通知，在方法返回结果之后执行<br><strong>——@AfterThrowing</strong>：异常通知，在方法抛出异常之后执行<br><strong>——@Around</strong>：环绕通知，围绕着方法执行</p>
<p>i.声明一个方法<br>ii.在方法前加一个注解 例如 @Before(“<strong>方法签名</strong>“),</p>
<p>利用<strong>方法签名</strong>编写AspectJ切入点表达式：<br>最典型的切入点表达式是根据方法的签名来匹配各种方法：<br>匹配ArithmeticCalculator中声明的所有方法：第一个<em>代表任意修饰符即任意返回值，第二个</em>代表任意方法，“..”代表匹配任意数量的参数。若目标类与接口与该平面在同一个包中，可以省略包名。<br><img src="/blog/images/img/160820/aspectJ_1.png" alt=""><br>匹配ArithmeticCalculator接口的所有公共方法。<br><img src="/blog/images/img/160820/aspectJ_2.png" alt=""><br>匹配ArithmeticCalculator中返回double类型数值的方法。<br><img src="/blog/images/img/160820/aspectJ_3.png" alt=""><br>匹配第一个参数为double类型的方法，”..”匹配任意数量任意类型的参数。<br><img src="/blog/images/img/160820/aspectJ_4.png" alt=""><br>匹配参数类型为double，double类型的方法。<br><img src="/blog/images/img/160820/aspectJ_5.png" alt=""><br>④.可以在通知方法中声明一个类型 JoinPoint的参数。然后就能访问链接细节，如<strong>方法名称</strong>和<strong>参数值</strong>。</p>
<p><a href="http://pan.baidu.com/s/1pLtvuH1" target="_blank" rel="external">AspectJ支持的5种类型的通知注解、设置切面优先级、相同名称切入点的引用的Demo</a></p>
<h2 id="基于配置文件方式配置AOP"><a href="#基于配置文件方式配置AOP" class="headerlink" title="基于配置文件方式配置AOP"></a>基于配置文件方式配置AOP</h2><p><img src="/blog/images/img/160820/aop_2.png" alt=""><br>com.leezp.spring.aop包是用注解方式配置AOP。<br>com.leezp.spring.aop.xml包时用配置文件的方式来配置AOP。</p>
<p><a href="http://pan.baidu.com/s/1nva28SL" target="_blank" rel="external">获取源代码</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节讲述Spring AOP（面向切面编程）。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（三）</title>
    <link href="http://www.leezp.space/blog/2016/08/13/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/08/13/一起学习Spring4.0（三）/</id>
    <published>2016-08-13T06:02:02.000Z</published>
    <updated>2017-02-27T06:38:26.849Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>在上一节中，我们已经学会了Bean的一些基本配置。</p>
<p>在这一节中，将补充介绍Bean的配置。</p>
<a id="more"></a>
<p>沿用上一节的项目。</p>
<h2 id="Bean的其他配置方法"><a href="#Bean的其他配置方法" class="headerlink" title="Bean的其他配置方法"></a>Bean的其他配置方法</h2><h3 id="配置Bean之方法二工厂方法"><a href="#配置Bean之方法二工厂方法" class="headerlink" title="配置Bean之方法二工厂方法"></a>配置Bean之方法二工厂方法</h3><h4 id="通过调用静态工厂方法创建Bean"><a href="#通过调用静态工厂方法创建Bean" class="headerlink" title="通过调用静态工厂方法创建Bean"></a>通过调用静态工厂方法创建Bean</h4><p>调用<strong>静态工厂方法</strong>创建Bean是将<strong>对象创建的过程封装到静态方法中</strong>。当客户端需要对象时，只需要简单地调用静态方法，而不用关心创建对象的细节。</p>
<p>要声明通过静态方法创建的Bean<br>1.在Bean的<strong>class</strong>属性里指定拥有该工厂方法的类<br>2.在<strong>factory-method</strong>属性里指定工厂方法的名称<br>3.使用&lt;constructor-arg&gt;元素为该方法传递方法参数。</p>
<p>在src下新建包com.leezp.spring.beans.factory。</p>
<p>在该包下新建Car.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.factory;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	</div><div class="line">	private double price;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getBrand</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Brand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double <span class="function"><span class="title">getPrice</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Price(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Car(String brand, double price) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建StaticCarFactory.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.factory;</div><div class="line"></div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 静态工厂方法：直接调用某一个类的静态方法就可以返回Bean的实例</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class StaticCarFactory &#123;</div><div class="line"></div><div class="line">	private static Map&lt;String, Car&gt; cars = new HashMap&lt;String, Car&gt;();</div><div class="line"></div><div class="line">	static &#123;</div><div class="line">		cars.put(<span class="string">"audi"</span>, new Car(<span class="string">"audi"</span>, 300000));</div><div class="line">		cars.put(<span class="string">"ford"</span>, new Car(<span class="string">"ford"</span>, 400000));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static Car getCar(String name) &#123;</div><div class="line">		<span class="built_in">return</span> cars.get(name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>新建beans-factory.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过静态工厂方法来配置Bean。注意不是配置静态工厂方法实例，而是配置Bean实例 --&gt;</div><div class="line">	&lt;!-- class属性：指向静态工厂方法的全类名；factory-method:指向静态工厂方法的名字； constructor-arg:如果工厂方法需要传入参数，则使用constructor-arg </div><div class="line">		来配置参数 --&gt;</div><div class="line">	&lt;bean id=&quot;car1&quot; class=&quot;com.leezp.spring.beans.factory.StaticCarFactory&quot;</div><div class="line">		factory-method=&quot;getCar&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;audi&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.factory;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-factory.xml&quot;);</div><div class="line"></div><div class="line">		Car car1 = (Car) ctx.getBean(&quot;car1&quot;);新建beans-beanfactory.xml配置文件。</div><div class="line">		System.out.println(car1);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Car [brand=audi, price=300000.0]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h4 id="通过调用实例工厂方法创建Bean"><a href="#通过调用实例工厂方法创建Bean" class="headerlink" title="通过调用实例工厂方法创建Bean"></a>通过调用实例工厂方法创建Bean</h4><p><strong>实例工厂方法：将对象的创建过程封装到另外一个对象实例的方法里</strong>。当客户端需要请求对象时，只需要简单的调用该实例方法而不需要关心对象的创建细节。</p>
<p>要声明通过实例工厂方法创建的Bean<br>1.在bean的<strong>factory-bean</strong>属性里指定拥有该工厂方法的Bean。<br>2.在<strong>factory-method</strong>属性里指定该工厂方法的名称。<br>3.使用<strong>constructor-arg</strong>元素为工厂方法传递方法参数。</p>
<p>新建InstanceCarFactory.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.factory;</div><div class="line"></div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实例工厂方法：实例工厂的方法，即先需要创建工厂本身，再调用工厂的实例方法</div><div class="line"> * </div><div class="line"> * @author Lee</div><div class="line"> * </div><div class="line"> */</div><div class="line">public class InstanceCarFactory &#123;</div><div class="line">	private Map&lt;String, Car&gt; cars = null;</div><div class="line"></div><div class="line">	public InstanceCarFactory() &#123;</div><div class="line">		cars = new HashMap&lt;String, Car&gt;();</div><div class="line">		cars.put(&quot;audi&quot;, new Car(&quot;audi&quot;, 400000));</div><div class="line">		cars.put(&quot;ford&quot;, new Car(&quot;ford&quot;, 300000));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Car getCar(String brand) &#123;</div><div class="line">		return cars.get(brand);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改beans-factory.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过静态工厂方法来配置Bean。注意不是配置静态工厂方法实例，而是配置Bean实例 --&gt;</div><div class="line">	&lt;!-- class属性：指向静态工厂方法的全类名；factory-method:指向静态工厂方法的名字； constructor-arg:如果工厂方法需要传入参数，则使用constructor-arg </div><div class="line">		来配置参数 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car1"</span> class=<span class="string">"com.leezp.spring.beans.factory.StaticCarFactory"</span></div><div class="line">		factory-method=<span class="string">"getCar"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"audi"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- Invalid bean definition with name <span class="string">'car2'</span> defined <span class="keyword">in</span> class path resource </div><div class="line">		[beans-factory.xml]: factory-bean reference points back to the same bean </div><div class="line">		definition --&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置工厂的实例 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"carFactory"</span> class=<span class="string">"com.leezp.spring.beans.factory.InstanceCarFactory"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"car2"</span> factory-bean=<span class="string">"carFactory"</span> factory-method=<span class="string">"getCar"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"audi"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>修改Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.factory;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"beans-factory.xml"</span>);</div><div class="line"></div><div class="line">		Car car1 = (Car) ctx.getBean(<span class="string">"car1"</span>);</div><div class="line">		System.out.println(car1);</div><div class="line"></div><div class="line">		Car car2 = (Car) ctx.getBean(<span class="string">"car2"</span>);</div><div class="line">		System.out.println(car2);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Car [brand=audi, price=300000.0]</div><div class="line">Car [brand=audi, price=400000.0]</div><div class="line">```</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1c2d2rYg" target="_blank" rel="external">获取源代码</a></p>
<h3 id="配置Bean之方法三FactoryBean"><a href="#配置Bean之方法三FactoryBean" class="headerlink" title="配置Bean之方法三FactoryBean"></a>配置Bean之方法三FactoryBean</h3><p>新建包com.leezp.spring.beans.factorybean。</p>
<p>在该包下新建Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.factorybean;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	</div><div class="line">	private double price;</div><div class="line"></div><div class="line">	public String getBrand() &#123;</div><div class="line">		return brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double getPrice() &#123;</div><div class="line">		return price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPrice(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Car(String brand, double price) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建CarFactoryBean.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.factorybean;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.FactoryBean;</div><div class="line"></div><div class="line">//自定义的FactoryBean需要实现 FactoryBean 接口</div><div class="line">public class CarFactoryBean implements FactoryBean&lt;Car&gt; &#123;</div><div class="line"></div><div class="line">	private String brand;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 返回Bean的对象</div><div class="line">	@Override</div><div class="line">	public Car getObject() throws Exception &#123;</div><div class="line">		return new Car(&quot;BMW&quot;, 500000);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 返回bean的类型</div><div class="line">	@Override</div><div class="line">	public Class&lt;?&gt; getObjectType() &#123;</div><div class="line">		return Car.class;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 是否为单实例</div><div class="line">	@Override</div><div class="line">	public boolean isSingleton() &#123;</div><div class="line">		return true;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建beans-beanfactory.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.factorybean;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.FactoryBean;</div><div class="line"></div><div class="line">//自定义的FactoryBean需要实现 FactoryBean 接口</div><div class="line">public class CarFactoryBean implements FactoryBean&lt;Car&gt; &#123;</div><div class="line"></div><div class="line">	private String brand;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Brand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 返回Bean的对象</div><div class="line">	@Override</div><div class="line">	public Car getObject() throws Exception &#123;</div><div class="line">		<span class="built_in">return</span> new Car(<span class="string">"BMW"</span>, 500000);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 返回bean的类型</div><div class="line">	@Override</div><div class="line">	public Class&lt;?&gt; <span class="function"><span class="title">getObjectType</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> Car.class;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 是否为单实例</div><div class="line">	@Override</div><div class="line">	public boolean <span class="function"><span class="title">isSingleton</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.factorybean;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"beans-beanfactory.xml"</span>);</div><div class="line"></div><div class="line">		Car c = (Car) ctx.getBean(<span class="string">"car"</span>);</div><div class="line">		System.out.println(c);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Car [brand=BMW, price=500000.0]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1hskLJVI" target="_blank" rel="external">获取源代码</a></p>
<h2 id="Bean的第二种配置形式——基于注解的方式"><a href="#Bean的第二种配置形式——基于注解的方式" class="headerlink" title="Bean的第二种配置形式——基于注解的方式"></a>Bean的第二种配置形式——基于注解的方式</h2><p>spring从2.5版本开始支持注解注入，注解注入可以省去很多的xml配置工作。由于注解是写入java代码中的，所以注解注入会失去一定的灵活性，我们要根据需要来选择是否启用注解注入。</p>
<h3 id="在classpath中扫描组件"><a href="#在classpath中扫描组件" class="headerlink" title="在classpath中扫描组件"></a>在classpath中扫描组件</h3><p>组件扫描（component scanning）:Spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件。</p>
<p>特定组件包括：<br>1.@Component:基本注解，标识了一个受Spring管理的组件<br>2.@Repository:标识持久层组件(可将DAO类声明为Bean )<br>3.@Service：标识服务层（业务层）组件<br>4.@Controller:标识表现层组件</p>
<p>对于扫描到的组件，<strong>Spring有默认的命名策略</strong>：使用非限定类名，第一个字母小写。<strong>也可以在注解中通过value属性值标识组件的名称</strong>。</p>
<p>当在组件类上使用了特定的注解之后，还需要在Spring的配置文件中声明<strong>&lt;context:component-scan&gt;</strong>:<br>1.<strong>base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包里及其子包中的所有类</strong>。<br>2.<strong>当需要扫描多个包时，可以使用逗号分隔</strong>。<br>3.如果仅希望扫描特定的类而非基包下的所有类，可使用resource-pattern属性过滤特定的类，示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;context:component-scan base-package=&quot;com.leezp.spring.beans&quot;</div><div class="line">		resource-pattern=&quot;autowire/*.class&quot; /&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>4.&lt;context:include-filter&gt;子节点表示要包含的目标类。<br>5.&lt;context:exclude-filter&gt;子节点表示要排除在外的目标类。<br>6.&lt;context:component-scan&gt;下可以拥有若干个&lt;context:include-filter&gt;和&lt;context:exclude-filter&gt;子节点。<br>&lt;context:include-filter&gt;和&lt;context:exclude-filter&gt;子节点支持多种类型的过滤表达式：</p>
<p>filter标签的type和表达式说明如下图。<br><img src="/blog/images/img/160813/spring.png" alt=""><br><strong>annotation</strong>:所有标注了XxxAnnotation的类。该类型采用目标类是否标注了某个注解进行过滤。<br><strong>assinable</strong>:所有继承或扩展XxxService的类。该类型采用目标类是否继承或扩展某个特定类进行过滤。<br>aspectj:所有类名以Service结束的类及继承或扩展它们的类。该类型采用aspectj表达式进行过滤。<br>regex:示例：com.\leezp.anno_*:所有com.leezp.anno包下的类。该类型采用正则表达式根据类的类名进行过滤<br>custom:采用XxxTypeFilter通过代码的方式定义过滤规则。该类必须实现org.springframework.core.type.TypeFilter接口。</p>
<p>新建包com.leezp.spring.beans.annotation。</p>
<p>在该包下新建TestObject.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">// 只加了@Component以后项目名称右上角还没有&quot;S&quot;的小标签，说明还没有被Spring管理,还要建立Spring配置文件才可以</div><div class="line">@Component</div><div class="line">public class TestObject &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建包com.leezp.spring.beans.annotation.controller。</p>
<p>在该包下新建UserController.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line"></div><div class="line">@Controller</div><div class="line">public class UserController &#123;</div><div class="line">	</div><div class="line">	public void execute() &#123;</div><div class="line">		System.out.println(&quot;UserController execute...&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建包com.leezp.spring.beans.annotation.repository。</p>
<p>在该包下新建UserRepository.java接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.repository;</div><div class="line"></div><div class="line">public interface UserRepository &#123;</div><div class="line"></div><div class="line">	void save();</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在该包下新建UserRepository接口的实现类UserRepositoryImpl.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.repository;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">@Repository(&quot;userRepository&quot;)</div><div class="line">public class UserRepositoryImpl implements UserRepository &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void save() &#123;</div><div class="line">		System.out.println(&quot;UserRepository Save...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建包com.leezp.spring.beans.annotation.service。</p>
<p>在该包下新建业务类UserService.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.service;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">	public void add() &#123;</div><div class="line">		System.out.println(&quot;UserService add...&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建beans-annotation.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 指定SpringIOC容器扫描的包 --&gt;</div><div class="line">	&lt;!-- 加上下面这个配置以后项目名称右上角出现&quot;S&quot;的小标签，说明已被Spring管理 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt;&lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- 可以通过resource-pattern指定扫描的资源 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		resource-pattern=&quot;repository/*.class&quot;&gt;&lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- context:exclude-filter子节点指定排除哪些指定表达式的组件 ,将不想包含的包粘贴进来 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt; </div><div class="line">		&lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- context:include-filter子节点指定包含哪些表达式的组件，该子节点需要设置use-default-filters=&quot;false&quot; --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		use-default-filters=&quot;false&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- 不包含UserRepository接口和这个接口所有实现类 --&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt;</div><div class="line">		&lt;context:exclude-filter type=&quot;assignable&quot;</div><div class="line">			expression=&quot;com.leezp.spring.beans.annotation.repository.UserRepository&quot; /&gt;</div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		use-default-filters=&quot;false&quot;&gt; &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.leezp.spring.beans.annotation.repository.UserRepository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>在com.leezp.spring.beans.annotation包下新建Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.annotation;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.controller.UserController;</div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepository;</div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepositoryImpl;</div><div class="line">import com.leezp.spring.beans.annotation.service.UserService;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"beans-annotation.xml"</span>);</div><div class="line"></div><div class="line">		// java.lang.ClassNotFoundException:</div><div class="line">		// org.springframework.aop.TargetSource</div><div class="line">		// 这个异常是因为缺少jar包，只需导入spring-aop-4.0.4.RELEASE.jar即可。</div><div class="line"></div><div class="line">		TestObject to = (TestObject) ctx.getBean(<span class="string">"testObject"</span>);</div><div class="line">		System.out.println(to);</div><div class="line"></div><div class="line">		UserController u = (UserController) ctx.getBean(<span class="string">"userController"</span>);</div><div class="line">		System.out.println(u);</div><div class="line"></div><div class="line">		UserService us = (UserService) ctx.getBean(<span class="string">"userService"</span>);</div><div class="line">		System.out.println(us);</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * UserRepository ur = (UserRepository) ctx.getBean(<span class="string">"userRepository"</span>);</div><div class="line">		 * System.out.println(ur);</div><div class="line">		 */</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * UserRepositoryImpl xxx = (UserRepositoryImpl) ctx</div><div class="line">		 * .getBean(<span class="string">"userRepository"</span>); System.out.println(xxx);</div><div class="line">		 */</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>这里可能还需要一个Spring的jar包spring-aop-4.0.4.RELEASE.jar，点击下载<a href="http://pan.baidu.com/s/1mhB1gQs" target="_blank" rel="external">spring-framework-4.0.4.RELEASE.rar</a>（Spring所需jar包），在里面找到这个jar包添加到项目中并且build path。缺少这个jar包可能报出<code>java.lang.ClassNotFoundException:org.springframework.aop.TargetSource</code>错误。<br>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">com.leezp.spring.beans.annotation.TestObject@3e431f96</div><div class="line">com.leezp.spring.beans.annotation.controller.UserController@28ced0c9</div><div class="line">com.leezp.spring.beans.annotation.service.UserService@21ed510d</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1cgoq3G" target="_blank" rel="external">获取源代码</a></p>
<h3 id="利用注解来建立Bean之间的引用关系"><a href="#利用注解来建立Bean之间的引用关系" class="headerlink" title="利用注解来建立Bean之间的引用关系"></a>利用注解来建立Bean之间的引用关系</h3><p>有时候Bean之间是有关联关系的。我们先来建立Bean之间的关联关系，再来研究如何利用注解来建立Bean之间的<strong>引用</strong>关系。</p>
<p>修改beans-annotation.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 指定SpringIOC容器扫描的包 --&gt;</div><div class="line">	&lt;!-- 加上下面这个配置以后项目名称右上角出现&quot;S&quot;的小标签，说明已被Spring管理 --&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;!-- 可以通过resource-pattern指定扫描的资源 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		resource-pattern=&quot;repository/*.class&quot;&gt;&lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- context:exclude-filter子节点指定排除哪些指定表达式的组件 ,将不想包含的包粘贴进来 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt; </div><div class="line">		&lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- context:include-filter子节点指定包含哪些表达式的组件，该子节点需要设置use-default-filters=&quot;false&quot; --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		use-default-filters=&quot;false&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Repository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- 不包含UserRepository接口和这个接口所有实现类 --&gt;</div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot;&gt; </div><div class="line">		&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.leezp.spring.beans.annotation.repository.UserRepository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;context:component-scan base-package=&quot;com.leezp.spring.beans.annotation&quot; </div><div class="line">		use-default-filters=&quot;false&quot;&gt; &lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.leezp.spring.beans.annotation.repository.UserRepository&quot; </div><div class="line">		/&gt; &lt;/context:component-scan&gt; --&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改UserController.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.controller;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.service.UserService;</div><div class="line"></div><div class="line">@Controller</div><div class="line">public class UserController &#123;</div><div class="line">	</div><div class="line">	private UserService userService;</div><div class="line">	</div><div class="line">	public void execute() &#123;</div><div class="line">		System.out.println(&quot;UserController execute...&quot;);</div><div class="line">		userService.add();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改UserService.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.service;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepository;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class UserService &#123;</div><div class="line">	</div><div class="line">	private UserRepository userRepository;</div><div class="line">	</div><div class="line">	public void setUserRepository(UserRepository userRepository) &#123;</div><div class="line">		this.userRepository = userRepository;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void add() &#123;</div><div class="line">		System.out.println(&quot;UserService add...&quot;);</div><div class="line">		userRepository.save();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.controller.UserController;</div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepository;</div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepositoryImpl;</div><div class="line">import com.leezp.spring.beans.annotation.service.UserService;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-annotation.xml&quot;);</div><div class="line"></div><div class="line">		// java.lang.ClassNotFoundException:</div><div class="line">		// org.springframework.aop.TargetSource</div><div class="line">		// 这个异常是因为缺少jar包，只需导入spring-aop-4.0.4.RELEASE.jar即可。</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * TestObject to = (TestObject) ctx.getBean(&quot;testObject&quot;);</div><div class="line">		 * System.out.println(to);</div><div class="line">		 */</div><div class="line"></div><div class="line">		UserController u = (UserController) ctx.getBean(&quot;userController&quot;);</div><div class="line">		System.out.println(u);</div><div class="line">		u.execute();</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * UserService us = (UserService) ctx.getBean(&quot;userService&quot;);</div><div class="line">		 * System.out.println(us);</div><div class="line">		 */</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * UserRepository ur = (UserRepository) ctx.getBean(&quot;userRepository&quot;);</div><div class="line">		 * System.out.println(ur);</div><div class="line">		 */</div><div class="line"></div><div class="line">		/*</div><div class="line">		 * UserRepositoryImpl xxx = (UserRepositoryImpl) ctx</div><div class="line">		 * .getBean(&quot;userRepository&quot;); System.out.println(xxx);</div><div class="line">		 */</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">com.leezp.spring.beans.annotation.controller.UserController@e28adfb</div><div class="line">UserController execute...</div><div class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</div><div class="line">	at com.leezp.spring.beans.annotation.controller.UserController.execute(UserController.java:14)</div><div class="line">	at com.leezp.spring.beans.annotation.Main.main(Main.java:27)</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>发现报错了。这个错误是因为属性没有被装配。</p>
<p>&lt;context:component-scan&gt;元素还会自动注册AutowiredAnnotationBeanPostProcessor（后置处理器）实例，该实例可以自动装配具有<strong>@Autowired</strong>和<strong>@Resource</strong>、<strong>@Inject</strong>注解的属性。</p>
<h4 id="使用-Autowired自动装配Bean"><a href="#使用-Autowired自动装配Bean" class="headerlink" title="使用@Autowired自动装配Bean"></a>使用@Autowired自动装配Bean</h4><p>@Autowired注解自动装配<strong>具有兼容类型</strong>的单个Bean属性。<br>1.<strong>构造器，普通字段（即使是非public），一切具有参数的方法（set方法上面）都可以应用@Autowired注解</strong>。</p>
<p>给UserController.java添加注解@Autowired。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.controller;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.service.UserService;</div><div class="line"></div><div class="line">@Controller</div><div class="line">public class UserController &#123;</div><div class="line">	@Autowired</div><div class="line">	private UserService userService;</div><div class="line">	</div><div class="line">	public void execute() &#123;</div><div class="line">		System.out.println(&quot;UserController execute...&quot;);</div><div class="line">		userService.add();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>给UserService.java添加注解@Autowired。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.service;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepository;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class UserService &#123;</div><div class="line">	// @Autowired//构造器，普通字段（即使是非public)都可以应用@Autowired注解</div><div class="line">	private UserRepository userRepository;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	// 一切具有参数的方法（set方法上面）都可以应用@Autowired注解</div><div class="line">	public void setUserRepository(UserRepository userRepository) &#123;</div><div class="line">		this.userRepository = userRepository;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void add() &#123;</div><div class="line">		System.out.println(&quot;UserService add...&quot;);</div><div class="line">		userRepository.save();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">com.leezp.spring.beans.annotation.controller.UserController@730d27f7</div><div class="line">UserController execute...</div><div class="line">UserService add...</div><div class="line">UserRepository Save...</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>2.<strong>默认情况下，所有使用@Autowired注解的属性都需要被设置，当Spring找不到匹配的Bean装配属性时，会抛出异常，<font color="red">若某一属性允许不被设置，可以设置@Autowired注解的required属性为false</font></strong>。</p>
<p>修改UserRepositoryImpl.java添加关联关系TestObject。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.repository;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.TestObject;</div><div class="line"></div><div class="line">@Repository(&quot;userRepository&quot;)</div><div class="line">public class UserRepositoryImpl implements UserRepository &#123;</div><div class="line">	@Autowired</div><div class="line">	private TestObject testObject;</div><div class="line">		</div><div class="line">	@Override</div><div class="line">	public void save() &#123;</div><div class="line">		System.out.println(&quot;UserRepository Save...&quot;);</div><div class="line">		System.out.println(testObject);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">``` </div><div class="line">com.leezp.spring.beans.annotation.controller.UserController@64bb0423</div><div class="line">UserController execute...</div><div class="line">UserService add...</div><div class="line">UserRepository Save...</div><div class="line">com.leezp.spring.beans.annotation.TestObject@320cc97f</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改TestObject.java去掉@Component使Spring找不到匹配的Bean装配属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">// 只加了@Component以后项目名称右上角还没有&quot;S&quot;的小标签，说明还没有被Spring管理,还要建立Spring配置文件才可以</div><div class="line"></div><div class="line">public class TestObject &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果发现报错：<font color="red">No qualifying bean of type</font></p>
<p>修改UserRepositoryImpl.java改为<strong>@Autowired(required=false)</strong>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.TestObject;</div><div class="line"></div><div class="line">@Repository(<span class="string">"userRepository"</span>)</div><div class="line">public class UserRepositoryImpl implements UserRepository &#123;</div><div class="line">	@Autowired(required=<span class="literal">false</span>)</div><div class="line">	private TestObject <span class="built_in">test</span>Object;</div><div class="line">		</div><div class="line">	@Override</div><div class="line">	public void <span class="function"><span class="title">save</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"UserRepository Save..."</span>);</div><div class="line">		System.out.println(<span class="built_in">test</span>Object);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">com.leezp.spring.beans.annotation.controller.UserController@27cacbd9</div><div class="line">UserController execute...</div><div class="line">UserService add...</div><div class="line">UserRepository Save...</div><div class="line">null</div><div class="line">```</div></pre></td></tr></table></figure>
<p>3.默认情况下，当IOC容器里存在多个类型兼容的Bean时，通过类型的自动装配将无法工作，此时可以在<strong>@Qualifier</strong>注解里提供Bean的名称，<strong>Spring允许对方法的入参标注@Qualifier已指定注入Bean的名称</strong>。</p>
<p><strong><font color="red">@Qualifier(“XXX”) 中的 XX是 Bean 的名称，所以 @Autowired 和@Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了</font></strong>。</p>
<p><a href="http://baike.baidu.com/item/%40Qualifier?sefr=enterbtn" target="_blank" rel="external">百度百科 @Qualifier</a></p>
<p>在包com.leezp.spring.beans.annotation.repository下新建类UserJdbcRepository.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.annotation.repository;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">@Repository</div><div class="line">public class UserJdbcRepository implements UserRepository&#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void save() &#123;</div><div class="line">		System.out.println(&quot;UserJdbcRepository save...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时即为多个相同类型的bean</p>
<p>解决方法一：@Repository() 括号里的Bean的名字刚好是首字母小写的属性名，即与属性名对应。</p>
<p>解决方法二：@Qualifier注解指定装配哪一个指定的bean。</p>
<p>修改UserService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.annotation.service;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.beans.factory.annotation.Qualifier;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.annotation.repository.UserRepository;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class UserService &#123;</div><div class="line">	// @Autowired//构造器，普通字段（即使是非public)都可以应用@Autowired注解</div><div class="line">	private UserRepository userRepository;</div><div class="line"></div><div class="line">	/*</div><div class="line">	 * @Autowired</div><div class="line">	 * //@Qualifier使用方式一</div><div class="line">	 * @Qualifier(<span class="string">"userRepositoryImpl"</span>) // 一切具有参数的方法（<span class="built_in">set</span>方法上面）都可以应用@Autowired注解</div><div class="line">	 * public void <span class="built_in">set</span>UserRepository(UserRepository userRepository) &#123;</div><div class="line">	 * this.userRepository = userRepository; &#125;</div><div class="line">	 */</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	//@Qualifier使用方式二</div><div class="line">	// 一切具有参数的方法（<span class="built_in">set</span>方法上面）都可以应用@Autowired注解</div><div class="line">	public void <span class="built_in">set</span>UserRepository(</div><div class="line">			@Qualifier(<span class="string">"userRepositoryImpl"</span>) UserRepository userRepository) &#123;</div><div class="line">		this.userRepository = userRepository;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">add</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"UserService add..."</span>);</div><div class="line">		userRepository.save();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>4.@Autowired注解也可以应用在<strong>数组类型</strong>的属性上，此时Spring将会把所有匹配的Bean进行自动装配。<br>5.@Autowired注解也可以应用在<strong>集合属性</strong>上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的Bean。<br>6.@Autowired注解用在<strong>java.util.Map</strong>上时，若该Map的键值为Spring，那么Spring将自动装配与之Map值类型兼容的Bean，此时Bean的名称作为健值。</p>
<h4 id="使用-Resource或-Inject自动装配Bean"><a href="#使用-Resource或-Inject自动装配Bean" class="headerlink" title="使用@Resource或@Inject自动装配Bean"></a>使用@Resource或@Inject自动装配Bean</h4><p>1.Spring还支持@Resource和@Inject注解，这两个注解和@Autowired注解的功用类似。<br>2.<strong>@Resource注解要求提供一个Bean名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为Bean的名称</strong>。<br>3.@Inject和@Autowired注解一样也是按类型匹配注入的Bean，但没有required属性。<br>4.<strong>建议使用@Autowired注解</strong>。</p>
<p><a href="http://pan.baidu.com/s/1slnRugd" target="_blank" rel="external">获取源代码</a></p>
<h2 id="Spring4-x-新特性：-泛型依赖注入"><a href="#Spring4-x-新特性：-泛型依赖注入" class="headerlink" title="Spring4.x 新特性： 泛型依赖注入"></a>Spring4.x 新特性： 泛型依赖注入</h2><p>Spring 4.x中可以为子类注入子类对应的泛型类型的成员变量的引用。<br>通俗一点来说：两个子类之间的依赖关系不需要在子类中去声明，而是在父类中进行了声明，而依赖的纽带就是 泛型类型，必须是相同的父类泛型类型才具有依赖关系。</p>
<p>新建包com.leezp.spring.beans.generic.di。<br>在该包下新建BaseRepository.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">public class BaseRepository&lt;T&gt; &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该包下新建BaseService.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line">public class BaseService&lt;T&gt; &#123;</div><div class="line">	</div><div class="line">	@Autowired  //在这里加注解会被子类继承</div><div class="line">	protected BaseRepository&lt;T&gt; repository;</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">add</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"add..."</span>);</div><div class="line">		System.out.println(repository);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建UserRepository.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line">@Repository</div><div class="line">public class UserRepository extends BaseRepository&lt;User&gt;&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>新建UserService.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class UserService extends BaseService&lt;User&gt;&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建User.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">public class User&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.generic.di;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"beans-generic-di.xml"</span>);</div><div class="line"></div><div class="line">		UserService us = (UserService) ctx.getBean(<span class="string">"userService"</span>);</div><div class="line">		us.add();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add...</div><div class="line">com.leezp.spring.beans.generic.di.UserRepository@690a614</div></pre></td></tr></table></figure>
<p>在以上的代码中，BaseService中引用了BaseRepository，并且在BaseService的add方法中调用了BaseRepository的add方法<br>在他们的子类中，继承了这种关系，因此我们在测试方法中调用userService.add(); 也是可以成功地调用UserRepository中的add方法。<br><a href="http://pan.baidu.com/s/1jIK9FhG" target="_blank" rel="external">获取源代码</a><br><br><br><strong>参考文献</strong><br><a href="http://blog.csdn.net/liushuijinger/article/details/17506883" target="_blank" rel="external">Spring jar包详解</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我们已经学会了Bean的一些基本配置。&lt;/p&gt;
&lt;p&gt;在这一节中，将补充介绍Bean的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0（二）Bean的配置</title>
    <link href="http://www.leezp.space/blog/2016/08/01/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.leezp.space/blog/2016/08/01/一起学习Spring4.0（二）/</id>
    <published>2016-08-01T12:30:01.000Z</published>
    <updated>2017-02-23T06:55:39.816Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>在上一节中，我们已经学会了用Eclipse配置Spring4.0环境并创建一个简单的Spring项目。</p>
<p>在这一节中，将介绍Bean的配置。</p>
<a id="more"></a>
<h2 id="本教程使用方法"><a href="#本教程使用方法" class="headerlink" title="本教程使用方法"></a>本教程使用方法</h2><p>从前向后阅读，本文较长，建议分9次学完，每次下载当前的代码。</p>
<h2 id="配置形式"><a href="#配置形式" class="headerlink" title="配置形式"></a>配置形式</h2><p><strong>基于xml文件的方式</strong>，基于注解的方式。</p>
<h2 id="Bean的配置方法"><a href="#Bean的配置方法" class="headerlink" title="Bean的配置方法"></a>Bean的配置方法</h2><p><strong>通过全类名（反射）</strong>、通过工厂方法（静态工厂方法和实例工厂方法）、FactoryBean</p>
<h2 id="IOC-容器-BeanFactory-和ApplicationContext-概述"><a href="#IOC-容器-BeanFactory-和ApplicationContext-概述" class="headerlink" title="IOC 容器 BeanFactory 和ApplicationContext 概述"></a>IOC 容器 BeanFactory 和ApplicationContext 概述</h2><p>在SpringIOC容器读取Bean配置创建Bean实例之前，必须对它进行实例化。只有在容器实例化后，才可以从IOC容器里获取Bean实例并使用。</p>
<p>Spring 提供了两种类型的IOC容器实现。</p>
<h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>IOC容器的基本实现。BeanFactory是Spring 框架的基础设施，面向Spring本身。</p>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>提供了更多高级的特性，是BeanFactory的子接口。ApplicationContext 面向使用Spring框架的开发者，<strong>几乎所有的应用场合都直接使用 ApplicationContext 而非底层的BeanFactory</strong>。</p>
<p>无论使用何种方式，配置文件是相同的。</p>
<p>ApplicationContext的主要实现类：（Ctrl+T查看）<br>-ClassPathXmlApplicationContext：从类路径下加载配置文件<br>-FileSystemXmlApplicationContext:从文件系统中加载配置文件</p>
<p>ApplicationContext 的子接口ConfigurableApplicationContext,新增加两个主要方法：refresh()和 close(),让ApplicationContext具有启动、刷新和关闭上下文的能力。</p>
<p>ApplicationContext在 初始化上下文 时就 实例化所有单例的Bean。</p>
<p>WebApplicationContext 是专为WEB应用而准备的，它允许从相对于WEB根目录的路径中完成初始化工作。</p>
<h3 id="ApplicationContext的getBean-方法"><a href="#ApplicationContext的getBean-方法" class="headerlink" title="ApplicationContext的getBean()方法"></a>ApplicationContext的getBean()方法</h3><p>鼠标放在”ApplicationContext”上按住Ctrl 点击进入 ，<br>Window-&gt; show view-&gt; outline 查看方法，<br>其中没有getBean()方法，找到其父接口 ListableBeanFactory ，Ctrl+shit+T 搜索这个父接口，继续用 outline观察它的方法，其中没有getBean()方法，发现它继承了BeanFactory ，继续搜索这个父接口，观察它的方法，找到了getBean()方法。</p>
<h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><p><strong>属性注入；构造器注入</strong>;工厂方法注入（不推荐）</p>
<h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>属性注入即通过setter 方法注入Bean的属性值或依赖的对象。</p>
<p>属性注入使用<property>元素，使用name 属性指定Bean的属性名称，value属性或<value>子节点指定属性值。</value></property></p>
<p><strong>属性注入是实际应用中最常用的注入方式</strong>。</p>
<h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><p>构造方法注入属性值或依赖的对象，它保证了Bean实例在实例化以后就可以使用。</p>
<p>构造器注入在&lt;constructor-arg&gt;元素里声明属性，&lt;constructor-arg&gt;中没有name属性。</p>
<p>沿用上一节中的项目。<br>新建一个类 Car.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	private String corp;</div><div class="line">	private double price;</div><div class="line">	private int maxSpeed;</div><div class="line"></div><div class="line">	public Car(String brand, String corp, int maxSpeed) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.corp = corp;</div><div class="line">		this.maxSpeed = maxSpeed;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Car(String brand, String corp, double price) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.corp = corp;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", corp="</span> + corp + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", maxSpeed="</span> + maxSpeed + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置 applicationContext.xml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"helloWorld"</span> class=<span class="string">"com.leezp.spring.beans.HelloWorld"</span>&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Spring"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Audi"</span> index=<span class="string">"0"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"ShangHai"</span> index=<span class="string">"1"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"100000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个<span class="built_in">type</span>参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car2"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Baoma"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>修改 Main.java</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.Car;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*</div><div class="line">		 * // 创建 HelloWorld 的一个对象 HelloWorld helloWorld = new HelloWorld();</div><div class="line">		 * // 为name 属性赋值 helloWorld.setName(<span class="string">"lee"</span>);</div><div class="line">		 */</div><div class="line">		// 1. 创建Spring 的IOC 容器对象</div><div class="line">		// ApplicationContext代表IOC 容器</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);// 创建对象时即调用它的<span class="built_in">set</span>方法对属性赋值</div><div class="line"></div><div class="line">		// 2. 从IOC容器中获取Bean实例</div><div class="line">		// HelloWorld helloWorld = (HelloWorld) ctx.getBean(<span class="string">"helloWorld"</span>);</div><div class="line">		// HelloWorld helloWorld = ctx.getBean(HelloWorld.class);//这样做有缺点，配置多个</div><div class="line">		// bean的时候它不知道访问哪一个，只适用于单个bean</div><div class="line"></div><div class="line">		// 调用hello方法</div><div class="line">		// helloWorld.hello();</div><div class="line"></div><div class="line">		Car car = (Car) ctx.getBean(<span class="string">"car"</span>);</div><div class="line">		System.out.println(car);</div><div class="line">		Car car2 = (Car) ctx.getBean(<span class="string">"car2"</span>);</div><div class="line">		System.out.println(car2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行，在控制台观察结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HelloWorld<span class="string">'s Constructor</span></div><div class="line">setName:Spring</div><div class="line">Car [brand=Audi, corp=ShangHai, price=100000.0, maxSpeed=0]</div><div class="line">Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1dFklxQT" target="_blank" rel="external">获取源代码</a></p>
<h2 id="注入属性值细节"><a href="#注入属性值细节" class="headerlink" title="注入属性值细节"></a>注入属性值细节</h2><p>可以用字符串表示的值，可以通过<value>元素标签value属性进行注入。<br>若字面值中包含特殊字符，可以使用&lt;![CDATA[]]&gt;把字面值包裹起来。<br>基本数据类型及其封装类、String等类型都可以采取字面值注入的方式，可以自动类型转换。</value></p>
<h3 id="null值和级联属性"><a href="#null值和级联属性" class="headerlink" title="null值和级联属性"></a>null值和级联属性</h3><p>可以使用专用的<null>元素标签为Bean的字符串或其他对象类型的属性注入null值（意义不大，因为引用类型默认null）。</null></p>
<h3 id="为级联属性赋值"><a href="#为级联属性赋值" class="headerlink" title="为级联属性赋值"></a>为级联属性赋值</h3><p>和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。<br>为级联属性赋值注意：<strong>属性要先初始化后才可以为级联属性赋值，否则会有异常。</strong>和Struts2不同。<br>具体见后面程序applicationContext.xml中的例子。</p>
<h3 id="引用其他bean"><a href="#引用其他bean" class="headerlink" title="引用其他bean"></a>引用其他bean</h3><p>组成应用程序的Bean经常需要相互协作以完成应用程序的功能，要使Bean能够相互访问，就必须在Bean配置文件中指定对Bean的引用。</p>
<p>在Bean的配置文件中，可以<strong>通过<ref>元素（标签节点）</ref></strong>或<strong>ref属性</strong>为Bean的属性或构造器参数指定对Bean的引用。</p>
<p>也可以<strong>在属性或构造器</strong>里包含Bean的声明，这样的Bean称为内部Bean。</p>
<p>新建一个类Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private Car car;</div><div class="line">	public <span class="function"><span class="title">Person</span></span>() &#123;</div><div class="line">		// TODO Auto-generated constructor stub</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Person(String name, int age, Car car) &#123;</div><div class="line">		super();</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">		this.car = car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", car="</span> + car + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> name;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	public int <span class="function"><span class="title">getAge</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> age;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Age(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	public Car <span class="function"><span class="title">getCar</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> car;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Car(Car car) &#123;</div><div class="line">		this.car = car;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 Car.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	private String corp;</div><div class="line">	private double price;</div><div class="line">	private int maxSpeed;</div><div class="line"></div><div class="line">	public Car(String brand, String corp, int maxSpeed) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.corp = corp;</div><div class="line">		this.maxSpeed = maxSpeed;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Car(String brand, String corp, double price) &#123;</div><div class="line">		super();</div><div class="line">		this.brand = brand;</div><div class="line">		this.corp = corp;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", corp="</span> + corp + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", maxSpeed="</span> + maxSpeed + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Price(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>MaxSpeed(int maxSpeed) &#123;</div><div class="line">		this.maxSpeed = maxSpeed;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改applicationContext.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=&quot;helloWorld&quot; class=&quot;com.leezp.spring.beans.HelloWorld&quot;&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=&quot;car&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Audi&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;ShangHai&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;100000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个type参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=&quot;car2&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Baoma&quot; type=&quot;java.lang.String&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;java.lang.String&quot;&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;int&quot;&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tom&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;24&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car2&quot;&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot;&gt; &lt;ref bean=&quot;car2&quot; /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=&quot;car&quot;&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person2&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Jerry&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;25&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!--  为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=&quot;car.price&quot; value=&quot;300000&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>修改Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.Person;</div><div class="line">import com.leezp.spring.beans.Car;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*</div><div class="line">		 * // 创建 HelloWorld 的一个对象 HelloWorld helloWorld = new HelloWorld(); //</div><div class="line">		 * 为name 属性赋值 helloWorld.setName(<span class="string">"lee"</span>);</div><div class="line">		 */</div><div class="line">		// 1. 创建Spring 的IOC 容器对象</div><div class="line">		// ApplicationContext代表IOC 容器</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);// 创建对象时即调用它的<span class="built_in">set</span>方法对属性赋值</div><div class="line"></div><div class="line">		// 2. 从IOC容器中获取Bean实例</div><div class="line">		// HelloWorld helloWorld = (HelloWorld) ctx.getBean(<span class="string">"helloWorld"</span>);</div><div class="line">		// HelloWorld helloWorld = ctx.getBean(HelloWorld.class);//这样做有缺点，配置多个</div><div class="line">		// bean的时候它不知道访问哪一个，只适用于单个bean</div><div class="line"></div><div class="line">		// 调用hello方法</div><div class="line">		// helloWorld.hello();</div><div class="line"></div><div class="line">		Car car = (Car) ctx.getBean(<span class="string">"car"</span>);</div><div class="line">		System.out.println(car);</div><div class="line">		Car car2 = (Car) ctx.getBean(<span class="string">"car2"</span>);</div><div class="line">		System.out.println(car2);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(<span class="string">"person"</span>);</div><div class="line">		System.out.println(p);</div><div class="line">		Person p2 = (Person) ctx.getBean(<span class="string">"person2"</span>);</div><div class="line">		System.out.println(p2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HelloWorld<span class="string">'s Constructor</span></div><div class="line">setName:Spring</div><div class="line">Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260]</div><div class="line">Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]</div><div class="line">Person [name=Tom, age=24, car=Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=260]]</div><div class="line">Person [name=Jerry, age=25, car=Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260]]</div></pre></td></tr></table></figure>
<p><a href="http://pan.baidu.com/s/1hrKwVPi" target="_blank" rel="external">获取源代码</a></p>
<h2 id="集合属性"><a href="#集合属性" class="headerlink" title="集合属性"></a>集合属性</h2><p>在Spring中可以通过一组内置的xml标签（例如：&lt;list&gt;,&lt;set&gt;或&lt;map&gt;来配置集合属性）。</p>
<p>配置java.util.List类型的属性，需要指定&lt;list&gt;标签，在标签里包含一些元素，这些标签可以通过&lt;value&gt;指定简单的常量值，通过&lt;ref&gt;指定对其他Bean的引用。通过&lt;bean&gt;指定内置Bean的定义。通过&lt;null/&gt;指定空元素，甚至可以内嵌其他集合。</p>
<p>数组的定义和List一样，都使用&lt;list&gt;。</p>
<p>配置java.util.Set需要使用&lt;set&gt;标签，定义元素的方法与List一样。</p>
<p>新建一个包命名为com.leezp.spring.beans.collections。</p>
<p>在该包下新建一个类 Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line">import com.leezp.spring.beans.Car;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private List&lt;Car&gt; cars;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int <span class="function"><span class="title">getAge</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Age(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public List&lt;Car&gt; <span class="function"><span class="title">getCars</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> cars;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Cars(List&lt;Car&gt; cars) &#123;</div><div class="line">		this.cars = cars;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", cars="</span> + cars + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在该包下新建一个类Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person3&quot;);</div><div class="line">		System.out.println(p);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改applicationContext.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"helloWorld"</span> class=<span class="string">"com.leezp.spring.beans.HelloWorld"</span>&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Spring"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Audi"</span> index=<span class="string">"0"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"ShangHai"</span> index=<span class="string">"1"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"100000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个<span class="built_in">type</span>参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car2"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Baoma"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Tom"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"24"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=<span class="string">"car"</span> ref=<span class="string">"car2"</span>&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=<span class="string">"car"</span>&gt; &lt;ref bean=<span class="string">"car2"</span> /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=<span class="string">"car"</span>&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"Ford"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"Changan"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"200000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"car.maxSpeed"</span> value=<span class="string">"260"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person2"</span> class=<span class="string">"com.leezp.spring.beans.Person"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Jerry"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"25"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=<span class="string">"car"</span>&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=<span class="string">"car"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!-- 为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"car.price"</span> value=<span class="string">"300000"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"car.maxSpeed"</span> value=<span class="string">"260"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 测试如何配置集合属性 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"person3"</span> class=<span class="string">"com.leezp.spring.beans.collections.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"lee"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"18"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"cars"</span>&gt;</div><div class="line">			&lt;!-- 使用 list 节点为List类型的属性赋值 --&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;ref bean=<span class="string">"car"</span> /&gt;</div><div class="line">				&lt;ref bean=<span class="string">"car2"</span> /&gt;</div><div class="line">				&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">				&lt;bean class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"Ford"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"Changan"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"200000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">HelloWorld&apos;s Constructor</div><div class="line">setName:Spring</div><div class="line">Person [name=lee, age=18, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260], Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=0]]]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1dEPmOyH" target="_blank" rel="external">获取源代码</a><br><br><br>Java.util.Map通过&lt;map&gt;标签定义，&lt;map&gt;标签里可以使用多个&lt;entry&gt;作为子标签，每个条目包含一个键和一个值。</p>
<p>必须在&lt;key&gt;标签里定义键。</p>
<p>因为键和值的类型没有限制，所以可以自由地为它们指定&lt;value&gt;,&lt;ref&gt;,&lt;bean&gt;或&lt;null&gt;元素。</p>
<p>可以将Map的键和值作为&lt;entry&gt;的属性定义：简单常量使用key和value来定义；Bean引用通过key-ref和value-ref属性定义。</p>
<p>使用&lt;props&gt;定义java.util.Properties,该标签使用多个&lt;prop&gt;作为子标签，每个&lt;prop&gt;标签必须定义key属性。</p>
<p>在该包下新建一个类 NewPerson.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.Car;</div><div class="line"></div><div class="line">public class NewPerson &#123;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private Map&lt;String,Car&gt; cars;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public int getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(int age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Map&lt;String, Car&gt; getCars() &#123;</div><div class="line">		return cars;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCars(Map&lt;String, Car&gt; cars) &#123;</div><div class="line">		this.cars = cars;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;, cars=&quot; + cars + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改applicationContext.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=&quot;helloWorld&quot; class=&quot;com.leezp.spring.beans.HelloWorld&quot;&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=&quot;car&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Audi&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;ShangHai&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;100000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个type参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=&quot;car2&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Baoma&quot; type=&quot;java.lang.String&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;java.lang.String&quot;&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;int&quot;&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tom&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;24&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car2&quot;&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot;&gt; &lt;ref bean=&quot;car2&quot; /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=&quot;car&quot;&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person2&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Jerry&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;25&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!-- 为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=&quot;car.price&quot; value=&quot;300000&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 测试如何配置集合属性 --&gt;</div><div class="line">	&lt;bean id=&quot;person3&quot; class=&quot;com.leezp.spring.beans.collections.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lee&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用 list 节点为List类型的属性赋值 --&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;ref bean=&quot;car&quot; /&gt;</div><div class="line">				&lt;ref bean=&quot;car2&quot; /&gt;</div><div class="line">				&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">				&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Map属性值 --&gt;</div><div class="line">	&lt;bean id=&quot;newPerson&quot; class=&quot;com.leezp.spring.beans.collections.NewPerson&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Candy&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;20&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用map节点及map的entry子节点配置Map类型的成员变量 --&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=&quot;AA&quot; value-ref=&quot;car&quot;&gt;&lt;/entry&gt;</div><div class="line">				&lt;entry key=&quot;BB&quot; value-ref=&quot;car2&quot;&gt;&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person3&quot;);</div><div class="line">		System.out.println(p);</div><div class="line"></div><div class="line">		NewPerson p2 = (NewPerson) ctx.getBean(&quot;newPerson&quot;);</div><div class="line">		System.out.println(p2);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">HelloWorld&apos;s Constructor</div><div class="line">setName:Spring</div><div class="line">Person [name=lee, age=18, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260], Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=0]]]</div><div class="line">Person [name=Candy, age=20, cars=&#123;AA=Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], BB=Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]&#125;]</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1pLRkB8n" target="_blank" rel="external">获取源代码</a><br><br><br>配置Properties属性值。</p>
<p>在com.leezp.spring.beans.collections包下新建一个类 DataSource.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line">public class DataSource &#123;</div><div class="line">	private Properties properties;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"DataSource [properties="</span> + properties + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Properties <span class="function"><span class="title">getProperties</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> properties;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Properties(Properties properties) &#123;</div><div class="line">		this.properties = properties;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改applicationContext.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=&quot;helloWorld&quot; class=&quot;com.leezp.spring.beans.HelloWorld&quot;&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=&quot;car&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Audi&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;ShangHai&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;100000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个type参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=&quot;car2&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Baoma&quot; type=&quot;java.lang.String&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;java.lang.String&quot;&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;int&quot;&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tom&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;24&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car2&quot;&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot;&gt; &lt;ref bean=&quot;car2&quot; /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=&quot;car&quot;&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person2&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Jerry&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;25&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!-- 为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=&quot;car.price&quot; value=&quot;300000&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 测试如何配置集合属性 --&gt;</div><div class="line">	&lt;bean id=&quot;person3&quot; class=&quot;com.leezp.spring.beans.collections.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lee&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用 list 节点为List类型的属性赋值 --&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;ref bean=&quot;car&quot; /&gt;</div><div class="line">				&lt;ref bean=&quot;car2&quot; /&gt;</div><div class="line">				&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">				&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Map属性值 --&gt;</div><div class="line">	&lt;bean id=&quot;newPerson&quot; class=&quot;com.leezp.spring.beans.collections.NewPerson&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Candy&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;20&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用map节点及map的entry子节点配置Map类型的成员变量 --&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=&quot;AA&quot; value-ref=&quot;car&quot;&gt;&lt;/entry&gt;</div><div class="line">				&lt;entry key=&quot;BB&quot; value-ref=&quot;car2&quot;&gt;&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Properties属性值 --&gt;</div><div class="line">	&lt;bean id=&quot;dataSource&quot; class=&quot;com.leezp.spring.beans.collections.DataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;properties&quot;&gt;</div><div class="line">			&lt;!-- 使用props和prop子节点来为Properties属性赋值 --&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;user&quot;&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;password&quot;&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///test&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person3&quot;);</div><div class="line">		System.out.println(p);</div><div class="line"></div><div class="line">		NewPerson p2 = (NewPerson) ctx.getBean(&quot;newPerson&quot;);</div><div class="line">		System.out.println(p2);</div><div class="line"></div><div class="line">		DataSource dataSource = (DataSource) ctx.getBean(&quot;dataSource&quot;);</div><div class="line">		System.out.println(dataSource);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">HelloWorld&apos;s Constructor</div><div class="line">setName:Spring</div><div class="line">Person [name=lee, age=18, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260], Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=0]]]</div><div class="line">Person [name=Candy, age=20, cars=&#123;AA=Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], BB=Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]&#125;]</div><div class="line">DataSource [properties=&#123;driverClass=com.mysql.jdbc.Driver, user=root, password=root, jdbcUrl=jdbc:mysql:///test&#125;]</div></pre></td></tr></table></figure></p>
<h2 id="使用-utility-scheme定义集合"><a href="#使用-utility-scheme定义集合" class="headerlink" title="使用 utility scheme定义集合"></a>使用 utility scheme定义集合</h2><p>使用基本的集合标签定义集合时，<strong>不能将集合作为独立的Bean定义，导致其他Bean无法引用该集合，所以无法在不同Bean之间共享集合</strong>。</p>
<p>可以使用 util schema里的集合标签定义独立的集合Bean。需要注意的是，必须在<beans>根元素里添加util schema定义。</beans></p>
<p><strong>先开启Spring配置文件中的util标签</strong>：打开applicationContext.xml 配置文件。点击下面的Namespaces，在弹出的复选框中将util复选框勾选。<br><img src="/blog/images/img/160801/spring_1.png" alt=""></p>
<p>修改applicationContext.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:util=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"helloWorld"</span> class=<span class="string">"com.leezp.spring.beans.HelloWorld"</span>&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Spring"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Audi"</span> index=<span class="string">"0"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"ShangHai"</span> index=<span class="string">"1"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"100000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个<span class="built_in">type</span>参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car2"</span> class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Baoma"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg <span class="built_in">type</span>=<span class="string">"int"</span>&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Tom"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"24"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=<span class="string">"car"</span> ref=<span class="string">"car2"</span>&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=<span class="string">"car"</span>&gt; &lt;ref bean=<span class="string">"car2"</span> /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=<span class="string">"car"</span>&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"Ford"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"Changan"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=<span class="string">"200000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"car.maxSpeed"</span> value=<span class="string">"260"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person2"</span> class=<span class="string">"com.leezp.spring.beans.Person"</span>&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"Jerry"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=<span class="string">"25"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=<span class="string">"car"</span>&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=<span class="string">"car"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!-- 为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=<span class="string">"car.price"</span> value=<span class="string">"300000"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"car.maxSpeed"</span> value=<span class="string">"260"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 测试如何配置集合属性 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"person3"</span> class=<span class="string">"com.leezp.spring.beans.collections.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"lee"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"18"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"cars"</span>&gt;</div><div class="line">			&lt;!-- 使用 list 节点为List类型的属性赋值 --&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;ref bean=<span class="string">"car"</span> /&gt;</div><div class="line">				&lt;ref bean=<span class="string">"car2"</span> /&gt;</div><div class="line">				&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">				&lt;bean class=<span class="string">"com.leezp.spring.beans.Car"</span>&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"Ford"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"Changan"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=<span class="string">"200000"</span> <span class="built_in">type</span>=<span class="string">"double"</span>&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Map属性值 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"newPerson"</span> class=<span class="string">"com.leezp.spring.beans.collections.NewPerson"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Candy"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"20"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"cars"</span>&gt;</div><div class="line">			&lt;!-- 使用map节点及map的entry子节点配置Map类型的成员变量 --&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=<span class="string">"AA"</span> value-ref=<span class="string">"car"</span>&gt;&lt;/entry&gt;</div><div class="line">				&lt;entry key=<span class="string">"BB"</span> value-ref=<span class="string">"car2"</span>&gt;&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Properties属性值 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"com.leezp.spring.beans.collections.DataSource"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"properties"</span>&gt;</div><div class="line">			&lt;!-- 使用props和prop子节点来为Properties属性赋值 --&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=<span class="string">"user"</span>&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=<span class="string">"password"</span>&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=<span class="string">"jdbcUrl"</span>&gt;jdbc:mysql:///<span class="built_in">test</span>&lt;/prop&gt;</div><div class="line">				&lt;prop key=<span class="string">"driverClass"</span>&gt;com.mysql.jdbc.Driver&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置独立的集合Bean，以供多个bean进行引用 ,需要导入util命名空间 --&gt;</div><div class="line">	&lt;util:list id=<span class="string">"cars"</span>&gt;</div><div class="line">		&lt;ref bean=<span class="string">"car"</span> /&gt;</div><div class="line">		&lt;ref bean=<span class="string">"car2"</span> /&gt;</div><div class="line">	&lt;/util:list&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person4"</span> class=<span class="string">"com.leezp.spring.beans.collections.Person"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Jack"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"age"</span> value=<span class="string">"21"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 引用配置的独立的集合Bean --&gt;</div><div class="line">		&lt;property name=<span class="string">"cars"</span> ref=<span class="string">"cars"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>修改Main.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(<span class="string">"person3"</span>);</div><div class="line">		System.out.println(p);</div><div class="line"></div><div class="line">		NewPerson p2 = (NewPerson) ctx.getBean(<span class="string">"newPerson"</span>);</div><div class="line">		System.out.println(p2);</div><div class="line"></div><div class="line">		DataSource dataSource = (DataSource) ctx.getBean(<span class="string">"dataSource"</span>);</div><div class="line">		System.out.println(dataSource);</div><div class="line">		</div><div class="line">		Person p4 = (Person) ctx.getBean(<span class="string">"person4"</span>);</div><div class="line">		System.out.println(p4);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">HelloWorld&apos;s Constructor</div><div class="line">setName:Spring</div><div class="line">Person [name=lee, age=18, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260], Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=0]]]</div><div class="line">Person [name=Candy, age=20, cars=&#123;AA=Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], BB=Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]&#125;]</div><div class="line">DataSource [properties=&#123;driverClass=com.mysql.jdbc.Driver, user=root, password=root, jdbcUrl=jdbc:mysql:///test&#125;]</div><div class="line">Person [name=Jack, age=21, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]]]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h2 id="使用-p-命名空间"><a href="#使用-p-命名空间" class="headerlink" title="使用 p 命名空间"></a>使用 p 命名空间</h2><p>为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息。</p>
<p>Spring 从2.5版本开始引入了一个新的 p 命名空间，可以通过<bean>元素属性的方式配置Bean的属性。 </bean></p>
<p>使用p命名空间后，基于XML的配置方式将进一步简化。</p>
<p>修改applicationContext.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean class:bean 的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参的构造器 id:标识容器中的Bean,唯一 --&gt;</div><div class="line">	&lt;bean id=&quot;helloWorld&quot; class=&quot;com.leezp.spring.beans.HelloWorld&quot;&gt;&lt;!-- 反射 --&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过构造方法配置bean的属性 --&gt;</div><div class="line">	&lt;bean id=&quot;car&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Audi&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;ShangHai&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;100000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- 通过参数的个数和类型区分重载 ,可以在后面加个type参数区分不同构造方法 --&gt;</div><div class="line">	&lt;bean id=&quot;car2&quot; class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Baoma&quot; type=&quot;java.lang.String&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;java.lang.String&quot;&gt;</div><div class="line">			&lt;value&gt;&lt;![CDATA[&lt;ShangHai^&gt;]]&gt;&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg type=&quot;int&quot;&gt;</div><div class="line">			&lt;!-- 属性值也可以使用value子节点进行配置 --&gt;</div><div class="line">			&lt;value&gt;260&lt;/value&gt;</div><div class="line">		&lt;/constructor-arg&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Tom&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;24&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用 porperty的ref属性或ref元素建立bean之间的引用关系 --&gt;</div><div class="line">		&lt;!-- 指向car2 --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot; ref=&quot;car2&quot;&gt;&lt;/property&gt; --&gt;</div><div class="line">		&lt;!-- &lt;property name=&quot;car&quot;&gt; &lt;ref bean=&quot;car2&quot; /&gt; &lt;/property&gt; --&gt;</div><div class="line">		&lt;property name=&quot;car&quot;&gt;</div><div class="line">			&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">			&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">			&lt;/bean&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;!-- 在struts2框架，会自动为car创建一个对象，在Spring中不可以，为级联属性赋值要先对对象Car赋值。 --&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person2&quot; class=&quot;com.leezp.spring.beans.Person&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;Jerry&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;constructor-arg value=&quot;25&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;!-- 测试赋值null --&gt;</div><div class="line">		&lt;!-- &lt;constructor-arg&gt; &lt;null /&gt; &lt;/constructor-arg&gt; --&gt;</div><div class="line">		&lt;constructor-arg ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">		&lt;!-- 和Struts、Hibernate等框架一样，Spring 支持级联属性的配置。 为级联属性赋值。 --&gt;</div><div class="line">		&lt;!-- 为级联属性赋值注意：属性要先初始化后才可以为级联属性赋值，否则会有异常。和Struts2不同。 --&gt;</div><div class="line">		&lt;property name=&quot;car.price&quot; value=&quot;300000&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;car.maxSpeed&quot; value=&quot;260&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 测试如何配置集合属性 --&gt;</div><div class="line">	&lt;bean id=&quot;person3&quot; class=&quot;com.leezp.spring.beans.collections.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;lee&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用 list 节点为List类型的属性赋值 --&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;ref bean=&quot;car&quot; /&gt;</div><div class="line">				&lt;ref bean=&quot;car2&quot; /&gt;</div><div class="line">				&lt;!-- 内部bean ,不能被外部引用，只能在内部使用 --&gt;</div><div class="line">				&lt;bean class=&quot;com.leezp.spring.beans.Car&quot;&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Ford&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;Changan&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">					&lt;constructor-arg value=&quot;200000&quot; type=&quot;double&quot;&gt;&lt;/constructor-arg&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Map属性值 --&gt;</div><div class="line">	&lt;bean id=&quot;newPerson&quot; class=&quot;com.leezp.spring.beans.collections.NewPerson&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Candy&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;20&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;cars&quot;&gt;</div><div class="line">			&lt;!-- 使用map节点及map的entry子节点配置Map类型的成员变量 --&gt;</div><div class="line">			&lt;map&gt;</div><div class="line">				&lt;entry key=&quot;AA&quot; value-ref=&quot;car&quot;&gt;&lt;/entry&gt;</div><div class="line">				&lt;entry key=&quot;BB&quot; value-ref=&quot;car2&quot;&gt;&lt;/entry&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Properties属性值 --&gt;</div><div class="line">	&lt;bean id=&quot;dataSource&quot; class=&quot;com.leezp.spring.beans.collections.DataSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;properties&quot;&gt;</div><div class="line">			&lt;!-- 使用props和prop子节点来为Properties属性赋值 --&gt;</div><div class="line">			&lt;props&gt;</div><div class="line">				&lt;prop key=&quot;user&quot;&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;password&quot;&gt;root&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///test&lt;/prop&gt;</div><div class="line">				&lt;prop key=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/prop&gt;</div><div class="line">			&lt;/props&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置独立的集合Bean，以供多个bean进行引用 ,需要导入util命名空间 --&gt;</div><div class="line">	&lt;util:list id=&quot;cars&quot;&gt;</div><div class="line">		&lt;ref bean=&quot;car&quot; /&gt;</div><div class="line">		&lt;ref bean=&quot;car2&quot; /&gt;</div><div class="line">	&lt;/util:list&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;person4&quot; class=&quot;com.leezp.spring.beans.collections.Person&quot;&gt;</div><div class="line">		&lt;property name=&quot;name&quot; value=&quot;Jack&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;age&quot; value=&quot;21&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 引用配置的独立的集合Bean --&gt;</div><div class="line">		&lt;property name=&quot;cars&quot; ref=&quot;cars&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入p命名空间 ,相对于之前方式更简洁一些 --&gt;</div><div class="line">	&lt;bean id=&quot;person5&quot; class=&quot;com.leezp.spring.beans.collections.Person&quot;</div><div class="line">		p:name=&quot;Ming&quot; p:age=&quot;22&quot; p:cars-ref=&quot;cars&quot;&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.collections;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;applicationContext.xml&quot;);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person3&quot;);</div><div class="line">		System.out.println(p);</div><div class="line"></div><div class="line">		NewPerson p2 = (NewPerson) ctx.getBean(&quot;newPerson&quot;);</div><div class="line">		System.out.println(p2);</div><div class="line"></div><div class="line">		DataSource dataSource = (DataSource) ctx.getBean(&quot;dataSource&quot;);</div><div class="line">		System.out.println(dataSource);</div><div class="line">		</div><div class="line">		Person p4 = (Person) ctx.getBean(&quot;person4&quot;);</div><div class="line">		System.out.println(p4);</div><div class="line">		</div><div class="line">		Person p5 = (Person) ctx.getBean(&quot;person5&quot;);</div><div class="line">		System.out.println(p5);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">HelloWorld&apos;s Constructor</div><div class="line">setName:Spring</div><div class="line">Person [name=lee, age=18, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260], Car [brand=Ford, corp=Changan, price=200000.0, maxSpeed=0]]]</div><div class="line">Person [name=Candy, age=20, cars=&#123;AA=Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], BB=Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]&#125;]</div><div class="line">DataSource [properties=&#123;driverClass=com.mysql.jdbc.Driver, user=root, password=root, jdbcUrl=jdbc:mysql:///test&#125;]</div><div class="line">Person [name=Jack, age=21, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]]]</div><div class="line">Person [name=Ming, age=22, cars=[Car [brand=Audi, corp=ShangHai, price=300000.0, maxSpeed=260], Car [brand=Baoma, corp=&lt;ShangHai^&gt;, price=0.0, maxSpeed=260]]]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1dFqrjPJ" target="_blank" rel="external">获取源代码</a></p>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="XML配置里的Bean自动装配"><a href="#XML配置里的Bean自动装配" class="headerlink" title="XML配置里的Bean自动装配"></a>XML配置里的Bean自动装配</h3><p>SpringIOC容器可以自动装配Bean。需要做的仅仅是<strong>在<bean>的autowire属性里指定自动装配的模式</bean></strong>。</p>
<p><strong>byType</strong>(根据类型自动装配)：若IOC容器中有多个与目标Bean类型一致的Bean,在这种情况下，Spring将无法判定哪个Bean最合适该属性，所以不能执行自动装配。</p>
<p><strong>byName</strong>(根据名称自动装配)：必须将目标Bean的名称和属性名设置的完全相同。</p>
<p>constructor（通过构造器自动装配）：当Bean中存在多个构造器时，此种自动装配方式将会很复杂。<strong>不推荐使用</strong>。</p>
<p>新建一个包com.leezp.spring.beans.autowire。</p>
<p>在该包下新建Address.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">public class Address &#123;</div><div class="line">	private String city;</div><div class="line">	</div><div class="line">	private String street;</div><div class="line"></div><div class="line">	public String getCity() &#123;</div><div class="line">		return city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCity(String city) &#123;</div><div class="line">		this.city = city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStreet() &#123;</div><div class="line">		return street;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStreet(String street) &#123;</div><div class="line">		this.street = street;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Address [city=&quot; + city + &quot;, street=&quot; + street + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在该包下新建Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	</div><div class="line">	private double price;</div><div class="line"></div><div class="line">	public String getBrand() &#123;</div><div class="line">		return brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double getPrice() &#123;</div><div class="line">		return price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPrice(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该包下新建Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line">	</div><div class="line">	private Address address;</div><div class="line">	</div><div class="line">	private Car car;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Address <span class="function"><span class="title">getAddress</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Address(Address address) &#123;</div><div class="line">		this.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Car <span class="function"><span class="title">getCar</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Car(Car car) &#123;</div><div class="line">		this.car = car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", address="</span> + address + <span class="string">", car="</span> + car</div><div class="line">				+ <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在src下新建一个Spring的配置文件beans-autowire.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line">	&lt;bean id=<span class="string">"address"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Address"</span></div><div class="line">		p:city=<span class="string">"NanJing"</span> p:street=<span class="string">"ShangHaiLu"</span>&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;!-- &lt;bean id=<span class="string">"address2"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Address"</span></div><div class="line">		p:city=<span class="string">"NanJing"</span> p:street=<span class="string">"ShangHaiLu"</span>&gt;</div><div class="line">	&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"car2"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Car"</span></div><div class="line">		p:brand=<span class="string">"BMW"</span> p:price=<span class="string">"300000"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 手动转配 --&gt;</div><div class="line">	&lt;!-- &lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Person"</span> p:name=<span class="string">"Tom"</span> </div><div class="line">		p:address-ref=<span class="string">"address"</span> p:car-ref=<span class="string">"car"</span>&gt;&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- 可以使用autowire属性指定自动装配的方式，byName根据bean的名字和当前bean的 setter风格的属性名进行自动装配， </div><div class="line">		若有匹配的，则进行自动装配；若没有匹配的，则不装配。 --&gt;</div><div class="line">	&lt;!-- &lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Person"</span> p:name=<span class="string">"Tom"</span> </div><div class="line">		autowire=<span class="string">"byName"</span>&gt;&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- byType根据bean的类型和当前bean的属性的类型进行自动装配。若IOC容器中有一个以上的类型匹配的Bean,则抛异常。 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Person"</span></div><div class="line">		p:name=<span class="string">"Tom"</span> autowire=<span class="string">"byType"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>在该包下新建一个Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-autowire.xml&quot;);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person&quot;);</div><div class="line">		System.out.println(p);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Person [name=Tom, address=Address [city=NanJing, street=ShangHaiLu], car=Car [brand=BMW, price=300000.0]]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1nvc3Hd3" target="_blank" rel="external">获取源代码</a></p>
<h3 id="XML配置里的Bean自动装配的缺点"><a href="#XML配置里的Bean自动装配的缺点" class="headerlink" title="XML配置里的Bean自动装配的缺点"></a>XML配置里的Bean自动装配的缺点</h3><p>在Bean配置文件里设置autowire属性进行自动装配将会装配Bean的所有属性。然而，若只希望装配个别属性时，autowire属性就不够灵活了。</p>
<p>autowire属性要么根据类型自动匹配，要么根据名称自动装配，不能两者兼而有之。</p>
<p>一般情况下，在实际的项目中很少使用自动装配功能，因为和自动装配功能所带来的好处比起来，明确清晰的配置文档更有说服力一些。</p>
<p>在整合第三方框架的时候，使用autowire的确给我们带来一些方便。</p>
<h2 id="bean之间的关系"><a href="#bean之间的关系" class="headerlink" title="bean之间的关系"></a>bean之间的关系</h2><p>继承；依赖。</p>
<h3 id="继承Bean配置"><a href="#继承Bean配置" class="headerlink" title="继承Bean配置"></a>继承Bean配置</h3><p><strong>Spring允许继承Bean的配置</strong>，被继承的Bean称为父Bean,继承这个父Bean的Bean称为子Bean。</p>
<p><strong>子Bean从父Bean中继承配置，包括Bean的属性配置</strong>。</p>
<p>子Bean也可以<strong>覆盖</strong>从父Bean继承过来的配置。</p>
<p>新建一个包com.leezp.spring.beans.relation。</p>
<p>在src下新建一个Spring的配置文件beans-relation.xml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;address&quot; class=&quot;com.leezp.spring.beans.autowire.Address&quot;</div><div class="line">		p:city=&quot;NanJing&quot; p:street=&quot;ShangHaiLu&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;address2&quot; class=&quot;com.leezp.spring.beans.autowire.Address&quot; </div><div class="line">		p:city=&quot;NanJing&quot; p:street=&quot;XiAnLu&quot;&gt;&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- bean配置的继承：使用bean的parent属性指定继承哪个bean的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;address2&quot; p:street=&quot;XiAnLu&quot; parent=&quot;address&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在该包下新建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.relation;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.autowire.Address;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-relation.xml&quot;);</div><div class="line"></div><div class="line">		Address address = (Address) ctx.getBean(&quot;address&quot;);</div><div class="line">		System.out.println(address);</div><div class="line">		</div><div class="line">		Address address2 = (Address) ctx.getBean(&quot;address2&quot;);</div><div class="line">		System.out.println(address2);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Address [city=NanJing, street=ShangHaiLu]</div><div class="line">Address [city=NanJing, street=XiAnLu]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>父Bean可以作为配置模板，也可以作为bean实例，<strong>若只想把父bean作为模板，可以设置<bean>的abstract属性为true</bean></strong>，这样Spring将不会实例化这个Bean（用IOC实例化它会报错）。</p>
<p><strong>并不是<bean>元素里的所有属性都会被继承</bean></strong>，比如：autowire,abstract等。</p>
<p>也<strong>可以忽略父bean的class属性</strong>，让子bean指定自己的类，而共享相同的属性配置。但此时<strong>abstract必须设置为true</strong>（若某一个bean的class属性没有指定，则该bean必须是一个抽象bean，否则报错）。</p>
<p>修改beans-relation.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- 抽象bean:bean的abstract属性为true的bean。这样的Bean不能被IOC容器实例化，只用来被继承配置 --&gt;</div><div class="line">	&lt;!-- 若某一个bean的class属性没有指定，则该bean必须是一个抽象bean --&gt;</div><div class="line">	&lt;bean id=&quot;address&quot; p:city=&quot;NanJing&quot; p:street=&quot;ShangHaiLu&quot;</div><div class="line">		abstract=&quot;true&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;address2&quot; class=&quot;com.leezp.spring.beans.autowire.Address&quot; </div><div class="line">		p:city=&quot;NanJing&quot; p:street=&quot;XiAnLu&quot;&gt;&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- bean配置的继承：使用bean的parent属性指定继承哪个bean的配置 --&gt;</div><div class="line">	&lt;bean id=&quot;address2&quot; class=&quot;com.leezp.spring.beans.autowire.Address&quot;</div><div class="line">		p:street=&quot;XiAnLu&quot; parent=&quot;address&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;address3&quot; class=&quot;com.leezp.spring.beans.autowire.Address&quot;</div><div class="line">		p:street=&quot;DaLianLu&quot; parent=&quot;address2&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.relation;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.autowire.Address;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-relation.xml&quot;);</div><div class="line"></div><div class="line">		// 注意抽象Bean不能被创建。否则报错：</div><div class="line">		// Error creating bean with name &apos;address&apos;: Bean definition is abstract</div><div class="line">		/*</div><div class="line">		 * Address address = (Address) ctx.getBean(&quot;address&quot;);</div><div class="line">		 * System.out.println(address);</div><div class="line">		 */</div><div class="line"></div><div class="line">		Address address2 = (Address) ctx.getBean(&quot;address2&quot;);</div><div class="line">		System.out.println(address2);</div><div class="line">		</div><div class="line">		Address address3 = (Address) ctx.getBean(&quot;address3&quot;);</div><div class="line">		System.out.println(address3);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Address [city=NanJing, street=XiAnLu]</div><div class="line">Address [city=NanJing, street=DaLianLu]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h3 id="依赖Bean配置"><a href="#依赖Bean配置" class="headerlink" title="依赖Bean配置"></a>依赖Bean配置</h3><p><strong>Spring允许用户通过depends-on属性设定Bean前置依赖的Bean,前置依赖的Bean会在本Bean实例化之前创建好</strong>。</p>
<p><strong>如果前置依赖于多个Bean，则可以通过逗号或空格的方式配置Bean的名称</strong>。</p>
<p>使用场景：当bean与bean直接 初始化 有先后顺序时，就需要指定他们直接的依赖关系，可以使用depends-on属性。</p>
<p>修改Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	</div><div class="line">	private double price;</div><div class="line"></div><div class="line">	public String getBrand() &#123;</div><div class="line">		return brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double getPrice() &#123;</div><div class="line">		return price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPrice(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Car() &#123;</div><div class="line">		System.out.println(&quot;Car被初始化&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改beans-relation.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 抽象bean:bean的abstract属性为<span class="literal">true</span>的bean。这样的Bean不能被IOC容器实例化，只用来被继承配置 --&gt;</div><div class="line">	&lt;!-- 若某一个bean的class属性没有指定，则该bean必须是一个抽象bean --&gt;</div><div class="line">	&lt;bean id=<span class="string">"address"</span> p:city=<span class="string">"NanJing"</span> p:street=<span class="string">"ShangHaiLu"</span></div><div class="line">		abstract=<span class="string">"true"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=<span class="string">"address2"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Address"</span> </div><div class="line">		p:city=<span class="string">"NanJing"</span> p:street=<span class="string">"XiAnLu"</span>&gt;&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- bean配置的继承：使用bean的parent属性指定继承哪个bean的配置 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"address2"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Address"</span></div><div class="line">		p:street=<span class="string">"XiAnLu"</span> parent=<span class="string">"address"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"address3"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Address"</span></div><div class="line">		p:street=<span class="string">"DaLianLu"</span> parent=<span class="string">"address2"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Car"</span></div><div class="line">		p:brand=<span class="string">"Audi"</span> p:price=<span class="string">"300000"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 要求在配置Person时，必须有一个关联的car！换句话说person这个bean依赖于Car这个bean --&gt;</div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Person"</span></div><div class="line">		p:name=<span class="string">"Tom"</span> p:address-ref=<span class="string">"address2"</span> depends-on=<span class="string">"car"</span>&gt;&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.relation;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.autowire.Address;</div><div class="line">import com.leezp.spring.beans.autowire.Car;</div><div class="line">import com.leezp.spring.beans.autowire.Person;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-relation.xml&quot;);</div><div class="line"></div><div class="line">		// 注意抽象Bean不能被创建。否则报错：</div><div class="line">		// Error creating bean with name &apos;address&apos;: Bean definition is abstract</div><div class="line">		/*</div><div class="line">		 * Address address = (Address) ctx.getBean(&quot;address&quot;);</div><div class="line">		 * System.out.println(address);</div><div class="line">		 */</div><div class="line"></div><div class="line">		Address address2 = (Address) ctx.getBean(&quot;address2&quot;);</div><div class="line">		System.out.println(address2);</div><div class="line"></div><div class="line">		Address address3 = (Address) ctx.getBean(&quot;address3&quot;);</div><div class="line">		System.out.println(address3);</div><div class="line"></div><div class="line">		Person person = (Person) ctx.getBean(&quot;person&quot;);</div><div class="line">		System.out.println(person);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Car被初始化</div><div class="line">Address [city=NanJing, street=XiAnLu]</div><div class="line">Address [city=NanJing, street=DaLianLu]</div><div class="line">Person [name=Tom, address=Address [city=NanJing, street=XiAnLu], car=null]</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1qY0eliO" target="_blank" rel="external">获取源代码</a></p>
<h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><p>singleton ;  prototype ； WEB 环境作用域</p>
<p>singleton:默认值。<strong>容器初始化时</strong>创建bean实例，在整个容器的生命周期内只创建这一个bean。单例的。</p>
<p>创建Spring配置文件beans-scope.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 使用bean的scope属性来配置bean的作用域 。 singleton:默认值。**容器初始化时**创建bean实例，在整个容器的生命周期内只创建这一个bean。单例的。 --&gt;</div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.autowire.Car"</span> scope=<span class="string">"prototype"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"brand"</span> value=<span class="string">"Audi"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"price"</span> value=<span class="string">"200000"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>修改包com.leezp.spring.beans.autowire下的Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.autowire;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line">	</div><div class="line">	private double price;</div><div class="line"></div><div class="line">	public String getBrand() &#123;</div><div class="line">		return brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double getPrice() &#123;</div><div class="line">		return price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPrice(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Car() &#123;</div><div class="line">		System.out.println(&quot;Car被初始化&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>创建包com.leezp.spring.beans.scope。</p>
<p>在包下创建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.scope;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.leezp.spring.beans.autowire.Car;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-scope.xml&quot;);</div><div class="line"></div><div class="line">		Car car = (Car) ctx.getBean(&quot;car&quot;);</div><div class="line">		Car car2 = (Car) ctx.getBean(&quot;car&quot;);</div><div class="line">		System.out.println(car == car2);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Car被初始化</div><div class="line">Car被初始化</div><div class="line">false</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h2 id="使用外部属性文件"><a href="#使用外部属性文件" class="headerlink" title="使用外部属性文件"></a>使用外部属性文件</h2><p>在配置文件里配置Bean时，有时需要在Bean的配置里混入<strong>系统部署的细节信息</strong>（例如：文件路径，数据源配置信息等），而这些部署细节实际上需要和Bean配置相分离。</p>
<p>Spring提供了一个PropertyPlaceholderConfigurer的<strong>BeanFactory后置处理器</strong>，这个处理器允许用户将Bean配置的部分内容外移到<strong>属性文件</strong>中。可以在Bean配置文件里使用形式为${var}的变量，PropertyPlaceholderConfigurer从属性文件里加载属性，并使用这些属性来替换变量。</p>
<p>Spring还允许在属性文件中使用${propName}，以实现属性之间的相互引用。</p>
<h3 id="注册PropertyPlaceholderConfigurer。"><a href="#注册PropertyPlaceholderConfigurer。" class="headerlink" title="注册PropertyPlaceholderConfigurer。"></a>注册PropertyPlaceholderConfigurer。</h3><p>Spring2.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt; </div><div class="line">		&lt;property name=&quot;location&quot; value=&quot;classpath:db.properties&quot;&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>Spring2.5：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot; /&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建beans-properties.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; </div><div class="line">		&lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; </div><div class="line">		value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt; </div><div class="line">		&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot;&gt;&lt;/property&gt; </div><div class="line">		&lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Spring2.0 --&gt;</div><div class="line">	&lt;!-- &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt; </div><div class="line">		&lt;property name=&quot;location&quot; value=&quot;classpath:db.properties&quot;&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</div><div class="line"></div><div class="line">	&lt;!-- Spring2.5以后：可通过&lt;context:property-placeholder元素简化，导入属性文件 --&gt;</div><div class="line">	&lt;!-- &lt;bean&gt;中添加context Schema定义 --&gt;</div><div class="line">	&lt;context:property-placeholder location=&quot;classpath:db.properties&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</div><div class="line">		&lt;!-- 使用外部属性文件的属性 --&gt;</div><div class="line">		&lt;property name=&quot;user&quot; value=&quot;$&#123;user&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driverClass&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbcUrl&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建db.properties属性文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbcUrl=jdbc:mysql://localhost:3306/test</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>新建包com.leezp.spring.beans.properties。在该包下新建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.properties;</div><div class="line"></div><div class="line">import java.sql.SQLException;</div><div class="line"></div><div class="line">import javax.sql.DataSource;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) throws SQLException &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-properties.xml&quot;);</div><div class="line"></div><div class="line">		DataSource dataSource = (DataSource) ctx.getBean(&quot;dataSource&quot;);</div><div class="line">		System.out.println(dataSource.getConnection());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">com.mchange.v2.c3p0.impl.NewProxyConnection@170ed6ab</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1nvAtUR3" target="_blank" rel="external">获取源代码</a></p>
<h2 id="spEL"><a href="#spEL" class="headerlink" title="spEL"></a>spEL</h2><p>Spring表达式或语言（简称SpEL）：是一个<strong>支持运行时查询和操作对象图的强大的表达式语言</strong>。</p>
<p><strong>语法类似于EL:SpEL使用#{…}作为界定符，所有在大括号中的字符都将被认为是SpEL</strong>。</p>
<p><strong>SpEL为bean的属性进行动态赋值提供了便利</strong>。</p>
<p>通过SpEL可以实现：<br>1.通过bean的id对bean进行引用。<br>2.调用方法以及引用对象中的属性。<br>3.计算表达式的值。<br>4.正则表达式的匹配。</p>
<h3 id="SpEL：字面量"><a href="#SpEL：字面量" class="headerlink" title="SpEL：字面量"></a>SpEL：字面量</h3><p>字面量的表示：<br>1.整数：&lt;property name=”count” value=”#{5}”/&gt;<br>2.小数：&lt;property name=”frequency” value=”#{20.1}”/&gt;<br>3.科学计数法：&lt;property name=”capacity” value=”#{1e3}”/&gt;<br>4.<strong>String可以使用单引号或者双引号作为字符串的界定符号：</strong><br>&lt;property name=”name” value=”<strong>#{‘lee’}</strong>“/&gt; 或 &lt;property name=”name” value=’<strong>#{“lee”}</strong>‘/&gt;<br>5.Boolean:&lt;property name=”enabled” value=”#{false}”/&gt;</p>
<p>仅仅赋字面值用SpEL的意义不大。重要作用是后面的操作。</p>
<h3 id="SpEL：引用Bean、属性和方法"><a href="#SpEL：引用Bean、属性和方法" class="headerlink" title="SpEL：引用Bean、属性和方法"></a>SpEL：引用Bean、属性和方法</h3><p>引用其他对象</p>
<p>1.&lt;!–通过value属性和SpEL配置Bean之间的应用关系–&gt;<br>&lt;property name=”prefix” value=”#{prefixGenerator}”&gt;&lt;/property&gt;</p>
<p>2.引用其他对象的属性<br>&lt;!–通过value属性和SpEL配置 suffix属性值为另一个Bean的suffix–&gt;<br>&lt;property name=”suffix” value=”#{sequenceGenerator2.suffix}”/&gt;</p>
<p>3.调用其他方法，还可以链式操作</p>
<p>&lt;!–通过value属性和SpEL配置 suffix属性值为另一个Bean的方法的返回值–&gt;<br>&lt;property name=”suffix” value=”#{sequenceGenerator2.toString()}”/&gt;</p>
<p>&lt;!–方法的连缀–&gt;<br>&lt;property name=”suffix” value=”{sequenceGenerator2.toString().toUpperCase()}”/&gt;</p>
<p>4.<strong>调用静态方法或静态属性</strong></p>
<p>通过T()调用一个类的静态方法，它将返回一个Class Object，然后再调用相应的方法或属性：<br>&lt;property name=”initValue” value=”#{T(java.lang.Math).PI}”/&gt;</p>
<p>新建一个包com.leezp.spring.beans.spel。</p>
<p>在该包下新建Address.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.spel;</div><div class="line"></div><div class="line">public class Address &#123;</div><div class="line">	private String city;</div><div class="line">	</div><div class="line">	private String street;</div><div class="line"></div><div class="line">	public String getCity() &#123;</div><div class="line">		return city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCity(String city) &#123;</div><div class="line">		this.city = city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getStreet() &#123;</div><div class="line">		return street;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setStreet(String street) &#123;</div><div class="line">		this.street = street;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Address [city=&quot; + city + &quot;, street=&quot; + street + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在该包下新建Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.spel;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	private String brand;</div><div class="line"></div><div class="line">	private double price;</div><div class="line"></div><div class="line">	// 轮胎周长</div><div class="line">	private double tyrePerimeter;</div><div class="line"></div><div class="line">	public double getTyrePerimeter() &#123;</div><div class="line">		return tyrePerimeter;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setTyrePerimeter(double tyrePerimeter) &#123;</div><div class="line">		this.tyrePerimeter = tyrePerimeter;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getBrand() &#123;</div><div class="line">		return brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public double getPrice() &#123;</div><div class="line">		return price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPrice(double price) &#123;</div><div class="line">		this.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;, price=&quot; + price + &quot;, typePerimeter=&quot;</div><div class="line">				+ tyrePerimeter + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Car() &#123;</div><div class="line">		// System.out.println(&quot;Car被初始化&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该包下新建Person.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.spel;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getCity</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>City(String city) &#123;</div><div class="line">		this.city = city;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getInfo</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> info;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Info(String info) &#123;</div><div class="line">		this.info = info;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//引用 address bean的city属性</div><div class="line">	private String city;</div><div class="line">	</div><div class="line">	//根据car的price确定info:car的price&gt;=300000:金领；否则：白领</div><div class="line">	private String info;</div><div class="line"></div><div class="line">	private Car car;</div><div class="line"></div><div class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Car <span class="function"><span class="title">getCar</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Car(Car car) &#123;</div><div class="line">		this.car = car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", city="</span> + city + <span class="string">", info="</span> + info</div><div class="line">				+ <span class="string">", car="</span> + car + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建beans-spel.xml配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"address"</span> class=<span class="string">"com.leezp.spring.beans.spel.Address"</span>&gt;</div><div class="line">		&lt;!-- 使用SpEL为属性赋一个字面值 --&gt;</div><div class="line">		&lt;property name=<span class="string">"city"</span> value=<span class="string">"#&#123;'ChengDu'&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"street"</span> value=<span class="string">"#&#123;'YuLinLu'&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.spel.Car"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"brand"</span> value=<span class="string">"Audi"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"price"</span> value=<span class="string">"400000"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用SpEL引用类的静态属性 --&gt;</div><div class="line">		&lt;property name=<span class="string">"tyrePerimeter"</span> value=<span class="string">"#&#123;T(java.lang.Math).PI*2*30&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=<span class="string">"person"</span> class=<span class="string">"com.leezp.spring.beans.spel.Person"</span>&gt;</div><div class="line">		&lt;!-- 使用SpEL来引用其他的Bean --&gt;</div><div class="line">		&lt;property name=<span class="string">"car"</span> value=<span class="string">"#&#123;car&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;!-- 使用SpEL来引用其他的Bean属性 --&gt;</div><div class="line">		&lt;property name=<span class="string">"city"</span> value=<span class="string">"#&#123;address.city&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"info"</span> value=<span class="string">"#&#123;address.street&#125;"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure>
<p>新建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.spel;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-spel.xml&quot;);</div><div class="line"></div><div class="line">		Address a = (Address) ctx.getBean(&quot;address&quot;);</div><div class="line">		System.out.println(a);</div><div class="line"></div><div class="line">		Car car = (Car) ctx.getBean(&quot;car&quot;);</div><div class="line">		System.out.println(car);</div><div class="line"></div><div class="line">		Person p = (Person) ctx.getBean(&quot;person&quot;);</div><div class="line">		System.out.println(p);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Address [city=ChengDu, street=YuLinLu]</div><div class="line">Car [brand=Audi, price=400000.0, typePerimeter=188.49555921538757]</div><div class="line">Person [name=null, city=ChengDu, info=YuLinLu, car=Car [brand=Audi, price=400000.0, typePerimeter=188.49555921538757]]</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p><a href="http://pan.baidu.com/s/1c16YnZy" target="_blank" rel="external">获取源代码</a></p>
<h3 id="SpEL支持的运算符号"><a href="#SpEL支持的运算符号" class="headerlink" title="SpEL支持的运算符号"></a>SpEL支持的运算符号</h3><p>1.算数运算符：+,-,*,/,%,^<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;property name=&quot;addition&quot; value=&quot;#&#123;counter.total+1&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;subtraction&quot; value=&quot;#&#123;counter.total-1&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;perimeter&quot; value=&quot;#&#123;2*T(java.lang.Math).PI*circle.radius&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;average&quot; value=&quot;#&#123;counter.total/counter.count&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;remainder&quot; value=&quot;#&#123;counter.total%counter.count&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;area&quot; value=&quot;#&#123;T(java.lang.Math).PI*circle.radius^2&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>2.加号还可以用作字符串连接：<br>&lt;constructor-arg value=”#{performer.firstName+’’+performer.lastName}”/&gt;</p>
<p>3.比较运算符：&lt;,&gt;,==,&lt;=,&gt;=,lt,gt,eq,le,ge<br>&lt;property name=”equal” value=”#{counter.total==100}”/&gt;<br>&lt;property name=”hasCapacity” value=”#{counter.total le 10000}”/&gt;</p>
<p>4.逻辑运算符号 and,or,not,!<br>&lt;property name=”largeCircle” value=”#{shape.kind==’circle’ and shape.perimeter gr&lt;10000}”/&gt;<br>&lt;property name=”ww” value=”#{!product.available}”/&gt;<br>&lt;property name=”zz” value=”#{not product.available}”/&gt;</p>
<p>5.if-else运算符（三目运算符） ?:</p>
<p>6.if-else的变体<br>&lt;constructor-arg value=”#{lee.song} ?: ‘ChunHua’}”/&gt;</p>
<p>7.正则表达式：matches<br>&lt;constructor-arg value=”#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}’}”/&gt;</p>
<h2 id="IOC容器中Bean的生命周期"><a href="#IOC容器中Bean的生命周期" class="headerlink" title="IOC容器中Bean的生命周期"></a>IOC容器中Bean的生命周期</h2><p><strong>SpringIOC容器可以管理Bean的生命周期</strong>，Spring允许在Bean生命周期的特定点执行定制的任务。</p>
<p>SpringIOC容器对Bean的生命周期进行管理的过程：<br>1.通过构造器或工厂方法创建Bean实例<br>2.为Bean的属性设置值和对其他Bean的引用<br>3.<strong>调用Bean的初始化方法</strong><br>4.Bean可以使用了<br>5.<strong>当容器关闭时，调用Bean的销毁方法</strong></p>
<p>在Bean的声明里设置init-method和destroy-method属性，为Bean指定初始化和销毁方法。</p>
<p>在src下创建包com.leezp.spring.beans.cycle。</p>
<p>在该包下创建Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.cycle;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	public Car() &#123;</div><div class="line">		System.out.println(&quot;Car&apos;s Constructor...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private String brand;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		System.out.println(&quot;setBrand...&quot;);</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void init() &#123;</div><div class="line">		System.out.println(&quot;init...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void destroy() &#123;</div><div class="line">		System.out.println(&quot;destroy...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>创建beans-cycle.xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;car&quot; class=&quot;com.leezp.spring.beans.cycle.Car&quot;</div><div class="line">		init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;</div><div class="line">		&lt;property name=&quot;brand&quot; value=&quot;Audi&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>创建Main.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.cycle;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				&quot;beans-cycle.xml&quot;);</div><div class="line"></div><div class="line">		Car car = (Car) ctx.getBean(&quot;car&quot;);</div><div class="line">		System.out.println(car);</div><div class="line">		</div><div class="line">		ctx.destroy();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>在控制台观察运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">Car&apos;s Constructor...</div><div class="line">setBrand...</div><div class="line">init...</div><div class="line">com.leezp.spring.beans.cycle.Car@22967f8e</div><div class="line">destroy...</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h3 id="创建Bean后置处理器"><a href="#创建Bean后置处理器" class="headerlink" title="创建Bean后置处理器"></a>创建Bean后置处理器</h3><p><strong>Bean后置处理器允许在调用初始化方法前后对Bean进行额外的处理</strong></p>
<p><strong>Bean后置处理器对IOC容器里的所有Bean实例逐一处理</strong>，而非单一实例，其典型应用是：检查Bean属性的正确性或根据特定的标准更改Bean的属性。</p>
<p>对Bean后置处理器而言，需要实现Interface BeanPostProcessor接口。在初始化方法被调用前后，Spring将把每个Bean实例分别传递给上述接口的以下两个方法：postProcessBeforeInitialization和postProcessAfterInitialization。</p>
<h3 id="添加Bean后置处理器后Bean的生命周期"><a href="#添加Bean后置处理器后Bean的生命周期" class="headerlink" title="添加Bean后置处理器后Bean的生命周期"></a>添加Bean后置处理器后Bean的生命周期</h3><p>SpringIOC容器对Bean的生命周期进行管理的过程：<br>1.通过构造器或工厂方法创建Bean实例<br>2.为Bean的属性设置值和对其他Bean的引用<br>3.<strong>将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization方法</strong><br>4.调用Bean的初始化方法<br>5.<strong>将Bean实例传递给Bean后置处理器的PostProcessAfterInitialization方法</strong><br>6.Bean可以使用了<br>7.当容器关闭时，调用Bean的销毁方法</p>
<p>修改Car.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">``` bash</div><div class="line">package com.leezp.spring.beans.cycle;</div><div class="line"></div><div class="line">public class Car &#123;</div><div class="line">	public Car() &#123;</div><div class="line">		System.out.println(&quot;Car&apos;s Constructor...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private String brand;</div><div class="line"></div><div class="line">	public void setBrand(String brand) &#123;</div><div class="line">		System.out.println(&quot;setBrand...&quot;);</div><div class="line">		this.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void init() &#123;</div><div class="line">		System.out.println(&quot;init...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void destroy() &#123;</div><div class="line">		System.out.println(&quot;destroy...&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Car [brand=&quot; + brand + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建MyBeanPostProcessor.java。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans.cycle;</div><div class="line"></div><div class="line">import org.springframework.beans.BeansException;</div><div class="line">import org.springframework.beans.factory.config.BeanPostProcessor;</div><div class="line"></div><div class="line">public class MyBeanPostProcessor implements BeanPostProcessor &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object postProcessBeforeInitialization(Object bean, String beanName)</div><div class="line">			throws BeansException &#123;</div><div class="line">		System.out.println(<span class="string">"postProcessBeforeInitialization"</span> + bean + <span class="string">","</span></div><div class="line">				+ beanName);</div><div class="line">		<span class="keyword">if</span> (<span class="string">"car"</span>.equals(beanName)) &#123;</div><div class="line">			//可以在这里过滤bean</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public Object postProcessAfterInitialization(Object arg0, String arg1)</div><div class="line">			throws BeansException &#123;</div><div class="line">		System.out</div><div class="line">				.println(<span class="string">"postProcessAfterInitialization"</span> + arg0 + <span class="string">","</span> + arg1);</div><div class="line">		// 在这里可以对Bean进行额外的配置		</div><div class="line">		Car car = new Car();</div><div class="line">		car.setBrand(<span class="string">"Ford"</span>);</div><div class="line">		<span class="built_in">return</span> car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改beans-cycle.xml配置文件。</p>
<pre><code class="bash">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;
&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span>
    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;

    &lt;bean id=<span class="string">"car"</span> class=<span class="string">"com.leezp.spring.beans.cycle.Car"</span>
        init-method=<span class="string">"init"</span> destroy-method=<span class="string">"destroy"</span>&gt;
        &lt;property name=<span class="string">"brand"</span> value=<span class="string">"Audi"</span>&gt;&lt;/property&gt;
    &lt;/bean&gt;

    &lt;!-- 实现BeanPostProcessor接口，并具体提供两个方法的实现 --&gt;
    &lt;!-- 配置Bean的后置处理器 --&gt;
    &lt;bean class=<span class="string">"com.leezp.spring.beans.cycle.MyBeanPostProcessor"</span>&gt;&lt;/bean&gt;

&lt;/beans&gt;
</code></pre>
<p>在控制台观察运行结果。</p>
<pre><code class="bash">Car<span class="string">'s Constructor...
setBrand...
postProcessBeforeInitializationCar [brand=Audi],car
init...
postProcessAfterInitializationCar [brand=Audi],car
Car'</span>s Constructor...
<span class="built_in">set</span>Brand...
Car [brand=Ford]
destroy...
</code></pre>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我们已经学会了用Eclipse配置Spring4.0环境并创建一个简单的Spring项目。&lt;/p&gt;
&lt;p&gt;在这一节中，将介绍Bean的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>一起学习Spring4.0</title>
    <link href="http://www.leezp.space/blog/2016/07/30/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Spring4.0/"/>
    <id>http://www.leezp.space/blog/2016/07/30/一起学习Spring4.0/</id>
    <published>2016-07-30T06:30:02.000Z</published>
    <updated>2017-02-14T06:35:54.872Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>从今天起，准备陆续更新Spring4.0的博客，当做自己知识的巩固。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://projects.spring.io/spring-framework/" target="_blank" rel="external">Spring 官网</a></p>
<p>开发工具：推荐使用Eclipse，我用的是<a href="http://pan.baidu.com/s/1nuGOIfR" target="_blank" rel="external">Eclipse 4.3(KEPLER) 64bit</a> 版本。</p>
<p>插件：<a href="http://pan.baidu.com/s/1jH4J64m" target="_blank" rel="external">springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite</a> <strong>注意要安装和自己Eclipse版本相对应的插件</strong>。</p>
<p>Spring4.0 jar包：<a href="http://pan.baidu.com/s/1mhB1gQs" target="_blank" rel="external">spring-framework-4.0.4.RELEASE.rar</a>,下载后解压使用。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Spring-简介"><a href="#Spring-简介" class="headerlink" title="Spring 简介"></a>Spring 简介</h3><p>Spring 是一个开源框架。也是一个 IOC (DI) 和 AOP 容器框架。<strong>IOC(反转控制)，DI（依赖注入）</strong>。</p>
<p>Spring 是轻量级，非侵入性的（使用Spring的时候不需要实现Spring提供的接口，也不需要继承它的任何父类，可以使用它提供的功能）。Spring 是一个容器，因为它包含并且管理应用对象的生命周期。</p>
<p>核心：<br>1.依赖注入<br>2.面向切面编程AOP</p>
<p>Spring 模块：<br>最底层：Beans,Core,Context,SpringEL</p>
<p>IOC(Inversion of Control)：其思想是反转资源获取的方向。传统的资源查找要求组件向容器发起请求查找资源。作为回应，容器适时的返回资源。而应用了IOC之后，则是<strong>容器主动地将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源</strong>。这种行为也被称为查找的被动形式。</p>
<p>DI(Dependency Injection)：IOC的另一种表述方式：即<strong>组件以一种预先定义好的方式（例如：setter方法）接受来自如容器的资源的注入</strong>。相对于IOC而言，这种表述更直接。</p>
<h3 id="Spring4-0-简介"><a href="#Spring4-0-简介" class="headerlink" title="Spring4.0 简介"></a>Spring4.0 简介</h3><p>Spring4.0是 Spring 推出的一个重大版本升级，进一步加强了 Spring 作为 Java 领域第一开源平台的地位。Spring4.0 引入了众多 Java 开发者期盼的新特性，如泛型依赖注入、SpEL、校验及格式化框架、Rest风格的 WEB 编程模型等。这些新功能实用性强、易用性高，可大幅降低 JavaEE 开发的难度，同时有效提升应用开发的优雅性。</p>
<h3 id="安装Spring-Tool-Suite"><a href="#安装Spring-Tool-Suite" class="headerlink" title="安装Spring Tool Suite"></a>安装Spring Tool Suite</h3><p>Spring Tool Suite 是一个Eclipse插件，利用该插件可以更方便的在Eclipse平台上开发基于Spring的应用。</p>
<p>打开Eclipse-&gt; Help-&gt; Install New Software…-&gt; Add-&gt; Archive…。<br>选中刚刚下载的压缩文件，点击打开。<br><img src="/blog/images/img/160730/Spring_1.png" alt=""><br>在弹出的Available Software 窗口将4个带 Spring IDE的项勾选，将下面“联网进行更新”复选框去掉。点击下一步…保存更改。<br><img src="/blog/images/img/160730/Spring_2.png" alt=""><br><strong>重启Eclipse</strong>,点击 Help-&gt; Welcome 打开欢迎页面，显示Spring IDE 图样即为安装成功。<br><img src="/blog/images/img/160730/Spring_3.png" alt=""><br>点击 Window-&gt; Preferences,如果看到 Spring,则证明插件已经安装成功。<br><img src="/blog/images/img/160730/Spring_4.png" alt=""></p>
<h3 id="搭建Spring开发环境"><a href="#搭建Spring开发环境" class="headerlink" title="搭建Spring开发环境"></a>搭建Spring开发环境</h3><p>在Eclipse新建一个项目，命名为spring-01，新建一个bin文件夹，将所需jar包复制到bin目录下。<br><img src="/blog/images/img/160730/Spring_5.png" alt=""><br>选中导入的jar，右击build path-&gt; Add to Build Path。<br><img src="/blog/images/img/160730/Spring_6.png" alt=""></p>
<p>新建一个package，命名为 com.leezp.spring.beans，在该包下新建一个类HelloWorld。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">public class HelloWorld &#123;</div><div class="line">	private String name;</div><div class="line"></div><div class="line">	public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">		System.out.println(<span class="string">"setName:"</span> + name);</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// <span class="built_in">set</span>Value 这里的value和xml 配置文件里 的property 的name属性的值对应</div><div class="line"></div><div class="line">	public void <span class="function"><span class="title">hello</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"hello:"</span> + name);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public <span class="function"><span class="title">HelloWorld</span></span>() &#123;</div><div class="line">		System.out.println(<span class="string">"HelloWorld's Constructor"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>src下new-&gt; Spring Bean Configuration File，命名为applicationContext.xml。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置bean --&gt;</div><div class="line">	&lt;bean id=<span class="string">"helloWorld"</span> class=<span class="string">"com.leezp.spring.beans.HelloWorld"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"name"</span> value=<span class="string">"Spring"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>新建一个Main.java</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.leezp.spring.beans;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		/*</div><div class="line">		 * // 创建 HelloWorld 的一个对象 HelloWorld helloWorld = new HelloWorld();</div><div class="line">		 * // 为name 属性赋值 helloWorld.setName(<span class="string">"lee"</span>);</div><div class="line">		 */</div><div class="line">		// 1. 创建Spring 的IOC 容器对象</div><div class="line">		// ApplicationContext代表IOC 容器</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"applicationContext.xml"</span>);// 创建对象时即调用它的<span class="built_in">set</span>方法对属性赋值</div><div class="line"></div><div class="line">		// 2. 从IOC容器中获取Bean实例</div><div class="line">		// HelloWorld helloWorld = (HelloWorld) ctx.getBean(<span class="string">"helloWorld"</span>);</div><div class="line">		// HelloWorld helloWorld = ctx.getBean(HelloWorld.class);//这样做有缺点，配置多个</div><div class="line">		// bean的时候它不知道访问哪一个，只适用于单个bean</div><div class="line"></div><div class="line">		// 调用hello方法</div><div class="line">		// helloWorld.hello();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行该文件，在控制台观察结果。<br><img src="/blog/images/img/160730/Spring_7.png" alt=""></p>
<p>发现不需要在main里对 helloWorld 赋值，只需创建一个Spring的IOC容器对象，自动进行了赋值。</p>
<p><a href="http://pan.baidu.com/s/1eR57Jfc" target="_blank" rel="external">获取源代码</a></p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天起，准备陆续更新Spring4.0的博客，当做自己知识的巩固。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leezp.space/blog/categories/java/"/>
    
    
      <category term="java" scheme="http://www.leezp.space/blog/tags/java/"/>
    
      <category term="Spring框架" scheme="http://www.leezp.space/blog/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客之进阶篇</title>
    <link href="http://www.leezp.space/blog/2016/07/23/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://www.leezp.space/blog/2016/07/23/Hexo搭建博客之进阶篇/</id>
    <published>2016-07-23T06:30:08.000Z</published>
    <updated>2017-02-08T00:42:06.923Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>在上一节中，我们已经学会了对Hexo博客配置文件和Next主题配置文件进行配置以达到我们想要的效果。</p>
<p>在这一节中，将介绍一些Hexo博客的进阶设计，有了这些设计，博客看起来会美美哒。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前的章节已经讲到如何搭建Hexo博客并选择自己喜欢的主题进行配置。那么如何添加自己喜欢的样式或效果来使自己的网站更加美观，在众多Hexo博客中脱颖而出呢？</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="为Hexo博客添加一个主页跳转"><a href="#为Hexo博客添加一个主页跳转" class="headerlink" title="为Hexo博客添加一个主页跳转"></a>为Hexo博客添加一个主页跳转</h3><p>思路：可以直接把hexo部署到一个分支，比如blog，然后首页自己写个html<br><strong>（这里的首页不是hexo生成的）</strong>，手动上传到master，在master下手动上传个CNAME绑定域名。</p>
<p>思维导图<br><img src="/blog/images/img/160723/hexo.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Hexo博客可配置的地方还有很多，这里只是抛砖引玉。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=30500470&auto=1&height=66"></iframe>

<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我们已经学会了对Hexo博客配置文件和Next主题配置文件进行配置以达到我们想要的效果。&lt;/p&gt;
&lt;p&gt;在这一节中，将介绍一些Hexo博客的进阶设计，有了这些设计，博客看起来会美美哒。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="http://www.leezp.space/blog/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="blog" scheme="http://www.leezp.space/blog/tags/blog/"/>
    
      <category term="建站" scheme="http://www.leezp.space/blog/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客之Next主题精析</title>
    <link href="http://www.leezp.space/blog/2016/07/17/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%B2%BE%E6%9E%90/"/>
    <id>http://www.leezp.space/blog/2016/07/17/Hexo搭建博客之Next主题精析/</id>
    <published>2016-07-17T06:00:07.000Z</published>
    <updated>2017-03-14T01:07:28.364Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>在上一节中，我们已经学会了使用hexo搭建博客，并且可以使用hexo发布博文。</p>
<p>在这一节中，将介绍一些基于Next主题配置的实用功能，有了这些功能，博客看起来会更美观和充实。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>配置Next主题</p>
<p>打开站点配置文件（这里要注意不是主题配置文件而是站点配置文件），将theme 后的主题改成你选择的主题，我的是Next。</p>
<p><img src="/blog/images/img/160717/Next.PNG" alt=""></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面开始配置主题配置文件_config.yml</p>
<h3 id="配置网站的图标"><a href="#配置网站的图标" class="headerlink" title="配置网站的图标"></a>配置网站的图标</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: /blog/images/favicon.ico</div></pre></td></tr></table></figure>
<p>在favicon 后填写图标的路径</p>
<h3 id="添加悬赏功能"><a href="#添加悬赏功能" class="headerlink" title="添加悬赏功能"></a>添加悬赏功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reward_comment: 您的支持将鼓励我继续创作,我一直在期待那个最帅的人出现！</div><div class="line">wechatpay: /blog/images/wechat-image.png</div><div class="line">alipay: /blog/images/alipay-image.png</div></pre></td></tr></table></figure>
<h3 id="配置主页显示的菜单"><a href="#配置主页显示的菜单" class="headerlink" title="配置主页显示的菜单"></a>配置主页显示的菜单</h3><p>可以根据自己喜好进行配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  <span class="comment">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="comment">#commonweal: /404.html</span></div></pre></td></tr></table></figure>
<h3 id="配置博客的字体"><a href="#配置博客的字体" class="headerlink" title="配置博客的字体"></a>配置博客的字体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">font:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></div><div class="line">  host:</div><div class="line"></div><div class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></div><div class="line">  global:</div><div class="line">    <span class="comment"># external: true will load this font family from host.</span></div><div class="line">    external: <span class="literal">true</span></div><div class="line">    family: Lato</div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line">  headings:</div><div class="line">    external: <span class="literal">true</span></div><div class="line">    family:</div><div class="line"></div><div class="line">  <span class="comment"># Font settings for posts</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line">  posts:</div><div class="line">    external: <span class="literal">true</span></div><div class="line">    family:</div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Logo</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line">  <span class="comment"># The `size` option use `px` as unit</span></div><div class="line">  logo:</div><div class="line">    external: <span class="literal">true</span></div><div class="line">    family:</div><div class="line">    size:</div><div class="line"></div><div class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></div><div class="line">  codes:</div><div class="line">    external: <span class="literal">true</span></div><div class="line">    family:</div><div class="line">    size:</div></pre></td></tr></table></figure>
<h3 id="配置代码高亮样式"><a href="#配置代码高亮样式" class="headerlink" title="配置代码高亮样式"></a>配置代码高亮样式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></div><div class="line">highlight_theme: night eighties</div></pre></td></tr></table></figure>
<h3 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h3><p>注册并登陆<a href="http://tongji.baidu.com" target="_blank" rel="external">百度统计</a>。点击 管理-&gt;新增网站，添加自己网站的域名，<br><img src="/blog/images/img/160717/baidu_analyze.png" alt=""><br>添加成功以后点击获取代码，这里有两种情况。常规方法：在管理–&gt;获取代码-&gt;复制代码，复制到你的网站主页<code>head</code>标签内的<code>script</code>标签里。<br>在Next主题中已经帮我们完成了这个步骤，只需要将你的Baidu Analytics ID 复制到主题配置文件中即可。<br><img src="/blog/images/img/160717/baidu_analyze_2.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Baidu Analytics ID</span></div><div class="line">baidu_analytics:</div></pre></td></tr></table></figure>
<h3 id="添加百度分享"><a href="#添加百度分享" class="headerlink" title="添加百度分享"></a>添加百度分享</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Baidu Share</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    button | slide</span></div><div class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></div><div class="line"><span class="comment">#baidushare:</span></div><div class="line">  <span class="comment">#type: slide</span></div></pre></td></tr></table></figure>
<p>这里可以配置百度分享，但要注意<strong>百度分享会覆盖掉多说分享，所以如果你想使用多说分享，一定要把这段话注释掉</strong>。<br><br><br><br><br>下面开始配置站点配置文件_config.yml。   </p>
<h3 id="多说和多说热评配置"><a href="#多说和多说热评配置" class="headerlink" title="多说和多说热评配置"></a>多说和多说热评配置</h3><p>duoshuo_shortname为博客中显示的你的昵称。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 多说share</span></div><div class="line">duoshuo_shortname: leezp</div><div class="line">duoshuo_share: <span class="literal">true</span></div><div class="line"><span class="comment"># hot comments</span></div><div class="line">duoshuo_hotartical: <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="站点概览显示的栏目配置"><a href="#站点概览显示的栏目配置" class="headerlink" title="站点概览显示的栏目配置"></a>站点概览显示的栏目配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Menu configuration</span></div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  categories: /categories</div></pre></td></tr></table></figure>
<p><img src="/blog/images/img/160717/watch.png" alt=""></p>
<h3 id="社交媒体配置"><a href="#社交媒体配置" class="headerlink" title="社交媒体配置"></a>社交媒体配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">social:</div><div class="line">  GitHub: https://github.com/leezp</div><div class="line">  <span class="comment">#Twitter: your-twitter-url</span></div><div class="line">  Weibo: your-weibo-url</div><div class="line">  DouBan: your-douban-url</div><div class="line">  ZhiHu: your-zhihu-url</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Hexo博客和Next主题可配置的地方还有很多，这里只是抛砖引玉。</p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我们已经学会了使用hexo搭建博客，并且可以使用hexo发布博文。&lt;/p&gt;
&lt;p&gt;在这一节中，将介绍一些基于Next主题配置的实用功能，有了这些功能，博客看起来会更美观和充实。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="http://www.leezp.space/blog/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="blog" scheme="http://www.leezp.space/blog/tags/blog/"/>
    
      <category term="建站" scheme="http://www.leezp.space/blog/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo从零开始搭建Blog</title>
    <link href="http://www.leezp.space/blog/2016/07/16/%E4%BD%BF%E7%94%A8Hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BABlog/"/>
    <id>http://www.leezp.space/blog/2016/07/16/使用Hexo从零开始搭建Blog/</id>
    <published>2016-07-16T14:02:02.000Z</published>
    <updated>2017-02-07T01:00:24.582Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/assets/js/DPlayer.min.js"> </script><script src="/blog/assets/js/APlayer.min.js"> </script><p>今天是农历6月13，对我来说是一个特别的日子。</p>
<p>我们来使用hexo生成静态博客并架设在免费的github page平台，看看会发生什么。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我的电脑系统是win7 64bit，node.js 版本 v4.4.4，本教程只针对windows用户。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>安装方法请自行百度</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>安装方法请自行百度</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装前先介绍几个hexo常用的命令,#后面为注释。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#完整命令为hexo generate，用于生成静态文件</span></div><div class="line">$ hexo s <span class="comment">#完整命令为hexo server，用于启动服务器，主要用来本地预览</span></div><div class="line">$ hexo d <span class="comment">#完整命令为hexo deploy，用于将本地文件发布到github上</span></div><div class="line">$ hexo n <span class="comment">#完整命令为hexo new，用于新建一篇文章</span></div></pre></td></tr></table></figure>
<p>在电脑里选择一个目录建立一个文件夹（例如D:\hexo），双击建好的文件夹进入文件夹，鼠标右键任意地方，选择Git Bash，使用以下命令安装hexo（ps：以下命令中的$符号只为了让教程和实际看起来一致，实际输入命令只需输入$ 后面的命令即可）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>验证软件是否正确安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git --version</div><div class="line">$ node -v</div><div class="line">$ npm -v</div></pre></td></tr></table></figure>
<p>hexo初始化</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>让我们看看刚刚下载的hexo文件带来了什么，在D:\hexo内执行以下命令，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>然后用浏览器访问 <code> <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> </code>，此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。</p>
<h3 id="注册Github帐号"><a href="#注册Github帐号" class="headerlink" title="注册Github帐号"></a>注册Github帐号</h3><p>已经有Github帐号跳过此步，首先进入Github进行注册，用户名、邮箱和密码之后都需要用到，自己记好。</p>
<h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入Github，并进入个人页面，选择Repositories(下图第一个红圈的地方)，然后New一个repository(下图第二个红圈的地方)</p>
<p><img src="/blog/images/img/160716/hexo-guide-1.png" alt=""></p>
<p>创建时，只需要填写Repository name即可，当然这个名字的格式必须为youname.github.io，例如我的为leezp.github.io</p>
<p><img src="/blog/images/img/160716/hexo-guide-2.png" alt=""></p>
<h3 id="部署本地文件到github"><a href="#部署本地文件到github" class="headerlink" title="部署本地文件到github"></a>部署本地文件到github</h3><p>既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\hexo下的_config.yml文件，建议使用Notepad++。<br>在_config.yml最下方，添加如下配置(命令中的第一个leezp为Github的用户名,第二个leezp为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则$ npm install hexo-deployer-git –save</p>
<p>在_config.yml最下方，添加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: http://github.com/leezp/leezp.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>配置好_config.yml并保存后，执行以下命令部署到Github上。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下，具体方法<a href="http://blog.csdn.net/v123411739/article/details/44071059/" target="_blank" rel="external">史上最全github使用方法：github入门到精通</a>里面有介绍到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。<br>此时，我们的博客已经搭建起来，并发布到Github上了，在浏览器访问leezp.github.io就能看到自己的博客了。第一次访问刚地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。</p>
<h3 id="hexo的配置文件"><a href="#hexo的配置文件" class="headerlink" title="hexo的配置文件"></a>hexo的配置文件</h3><p>hexo里面有两个常用到的配置文件，分别是整个博客的配置文件D:\hexo_config.yml和主题的配置文件D:\hexo\themes\next_config.yml,此地址是对于我来说，hexo3.0使用的默认主题是landscape，因此你们的地址应该是D:\hexo\themes\landscape_config.yml，下文所有讲到next的地方，你们将之换为自己的主题名即可。<br>接下来介绍整个博客的配置文件。<br>D:\hexo_config.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site	这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></div><div class="line">title: leezp	<span class="comment">#博客名</span></div><div class="line">subtitle: 	<span class="comment">#副标题</span></div><div class="line">description:  <span class="comment">#用于搜索，没有直观表现</span></div><div class="line">author: lee	<span class="comment">#作者</span></div><div class="line">language: zh-Hans	<span class="comment">#语言</span></div><div class="line">timezone: 	<span class="comment">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></div><div class="line"></div><div class="line"><span class="comment"># URL	暂不配置，使用默认值</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: http://leezp.space  <span class="comment">#域名</span></div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"><span class="comment"># Directory		暂不配置，使用默认值</span></div><div class="line">source_dir: <span class="built_in">source</span></div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"><span class="comment"># Writing	文章布局等，使用默认值</span></div><div class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></div><div class="line">default_layout: post</div><div class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line">filename_case: 0</div><div class="line">render_drafts: <span class="literal">false</span></div><div class="line">post_asset_folder: <span class="literal">false</span></div><div class="line">relative_link: <span class="literal">false</span></div><div class="line">future: <span class="literal">true</span></div><div class="line">highlight:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  line_number: <span class="literal">true</span></div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag	暂不配置，使用默认值</span></div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"><span class="comment"># Date / Time format	时间格式，使用默认值</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination	</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line">per_page: 10	<span class="comment">#每页显示的文章数，0表示不分页</span></div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"><span class="comment"># Extensions	插件配置，暂时不配置</span></div><div class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></div><div class="line"><span class="comment">#plugins:</span></div><div class="line"><span class="comment">#- hexo-generator-feed</span></div><div class="line">theme: next	<span class="comment">#使用的主题，即：E:\myblog\themes文件夹下的主题文件夹名</span></div><div class="line"></div><div class="line">feed:	<span class="comment">#之后配置rss会用，使用如下配置即可</span></div><div class="line">  <span class="built_in">type</span>: atom</div><div class="line">  path: atom.xml</div><div class="line">  <span class="built_in">limit</span>: 20  </div><div class="line"></div><div class="line"><span class="comment"># Deployment	用于部署到github，之前已经配置过</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"></div><div class="line">deploy: </div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: http://github.com/leezp/leezp.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>按照自己的意愿修改完后，执行hexo g，hexo s，打开localhost:4000看看效果。</p>
<h3 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h3><p>1.在Git Bash执行命令：$ hexo new “my new post”<br>2.在D:\hexo\source_post中打开my-new-post.md，打开方式使用记事本或notepad++。<br>hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">title: my new post <span class="comment">#可以改成中文的，如“新文章”</span></div><div class="line">date: 2016-07-16 22:00:00 <span class="comment">#发表日期，一般不改动</span></div><div class="line">categories: blog <span class="comment">#文章文类</span></div><div class="line">tags: [博客，文章] <span class="comment">#文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></div><div class="line">---</div><div class="line"><span class="comment">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></div><div class="line">&lt;!--more--&gt; <span class="comment">#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span></div></pre></td></tr></table></figure></p>
<p>写完文章后，你可以使用1.$ hexo g生成静态文件。2.$ hexo s在本地预览效果。3.hexo d同步到github，然后使用<a href="http://leezp.github.io进行访问。" target="_blank" rel="external">http://leezp.github.io进行访问。</a></p>
<h3 id="另一种发布到github的配置"><a href="#另一种发布到github的配置" class="headerlink" title="另一种发布到github的配置"></a>另一种发布到github的配置</h3><p>现在提供另一种配置方式，这种方式在发布时不需要同时输入用户名和邮箱账号，也是我目前使用的方法，配置代码如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:leezp/leezp.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>这种配置方式，需要配置SSH key，教程如下：<br>鼠标右键任意地方，选择Git Bash，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure>
<p>后面的your_email@youremail.com改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在C:\Users\Administrator下生成.ssh文件夹，进入该文件夹，打开id_rsa.pub，复制里面的key。<br>回到github，进入Settings，选择SSH and GPG Keys -&gt; New SSH Key，title随便填，粘贴key。为了验证是否成功，在git bash下输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated， but GitHub does not provide shell access ，这就表示已成功连上github。<br>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"your name"</span>  </div><div class="line">$ git config --global user.email <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到目前为止，实现了用hexo搭建博客的基本功能。由于本文是博主工作之余写的，比较仓促，难免有错误，欢迎指正。后面的文章将介绍本博客使用到的一些实用的功能，如访问次数，新浪微博秀，RSS，多说评论等，喜欢这些功能的朋友可以继续跟随。</p>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="http://leezp.space" target="_blank" rel="external">Leezp’s Blog</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是农历6月13，对我来说是一个特别的日子。&lt;/p&gt;
&lt;p&gt;我们来使用hexo生成静态博客并架设在免费的github page平台，看看会发生什么。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="http://www.leezp.space/blog/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="blog" scheme="http://www.leezp.space/blog/tags/blog/"/>
    
      <category term="建站" scheme="http://www.leezp.space/blog/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
